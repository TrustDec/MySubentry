package com.insplatform.module.osta.eval.sign.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.stereotype.Repository;

import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.curruser.CurrentUser;
import com.insplatform.module.osta.eval.sign.model.OstaEvalSignPerson;
import com.insplatform.module.osta.eval.sign.repository.OstaEvalSignPersonRepository;

import com.insframework.system.map.Condition;


@Repository
public class OstaEvalSignPersonRepositoryImpl extends BaseRepositoryImpl<OstaEvalSignPerson> implements OstaEvalSignPersonRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.* from PX_OSTA_EVAL_SIGN_PERSON t ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_OSTA_EVAL_SIGN_PERSON t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_OSTA_EVAL_SIGN_PERSON t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public OstaEvalSignPerson get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(OstaEvalSignPerson entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(OstaEvalSignPerson entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public boolean beforeCheckAddBatch(String userId, String pid) {
		String sql = "select t.id from px_osta_eval_sign_person t where t.user_id = ? and t.pid = ?";
		return jdbcAssistant.queryOne(sql, new Object[]{userId,pid})==null;
	}

	@Override
	public String addBatch(String userId, String pid, CurrentUser user) {
		String id = TextUtil.getUUID();
		String sql = "insert into px_osta_eval_sign_person" +
				" (id, user_id, user_name, id_card, phone, company_id," +
				" company_name, sex, age, edu, pid," +
				" create_user_id, create_user_name, create_time)" +
				" select '"+id+"',u.id,u.name,u.id_card,u.phone,u.company_id," +
				" u.company_name,u.sex,to_char(sysdate,'yyyy')-substr(id_card,7,4),u.edu,?," +
				" '"+user.getId()+"','"+user.getName()+"',sysdate" +
				" from v_sys_user_info u" +
				" where u.id = ?";
		return jdbcAssistant.update(sql, new Object[]{pid,userId})==1?id:null;
	}
	
}
