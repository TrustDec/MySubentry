package com.insplatform.module.yearplan.repository.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.insframework.common.spring.jdbc.mapper.ValueMapper;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.yearplan.model.YearPlanMonth;
import com.insplatform.module.yearplan.repository.YearPlanMonthRepository;


@Repository
public class YearPlanMonthRepositoryImpl extends BaseRepositoryImpl<YearPlanMonth> implements YearPlanMonthRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.* from PX_YEAR_PLAN_MONTH t where t.year_plan_id = ? " +
				" order by t.month_name";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray(),new ValueMapper() {
			
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				monthNameValueMapper(record);
				return RETURN_CODE.NEXT;
			}
		});
	}

	private void monthNameValueMapper(Map<String, Object> record) {
		String[] monthAry = new String[]{"0","一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"};
		String index = record.get("monthName").toString();
		int i = Integer.parseInt(index);
		record.put("monthName", monthAry[i]);
	}

	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_YEAR_PLAN_MONTH t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_YEAR_PLAN_MONTH t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id},new ValueMapper() {
			
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				monthNameValueMapper(record);
				return null;
			}
		});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public YearPlanMonth get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(YearPlanMonth entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(YearPlanMonth entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public List<Map<String, Object>> loadAllListByYearPlanId(String yearPlanId) {
		String sql = "select t.id,t.year_plan_id,t.month_name " +
				" from PX_YEAR_PLAN_MONTH t " +
				" where t.year_plan_id = ?";
		return jdbcAssistant.query(sql, new Object[]{yearPlanId});
	}

	@Override
	public boolean beforeSaveCheckMonth(YearPlanMonth obj) {
		String sql = "select t.id from px_year_plan_month t where t.month_name = ? and t.year_plan_id = ?";
		Map<String, Object> map = jdbcAssistant.queryOne(sql,new Object[]{obj.getMonthName(),obj.getYearPlanId()});
		if (map==null) {
			return true;
		}else if (obj.getId()==null) {
			return false;
		}else if (obj.getId().equals(map.get("id"))) {
			return true;
		}
		return false;
	}

	@Override
	public List<Map<String, Object>> loadAllMonth(String yearPlanId) {
		String sql = "select t.month_name from px_year_plan_month t where t.year_plan_id = ?";
		return jdbcAssistant.query(sql, new Object[]{yearPlanId});
	}
	
}
