package com.insplatform.module.testpaper.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.stereotype.Repository;

import com.insframework.common.spring.jdbc.mapper.ValueMapper;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insplatform.module.testpaper.model.TestPaper;
import com.insplatform.module.testpaper.repository.TestPaperRepository;

import com.insframework.system.map.Condition;


@Repository
public class TestPaperRepositoryImpl extends BaseRepositoryImpl<TestPaper> implements TestPaperRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.* from PX_TEST_PAPER t where t.PX_TYPE='培训科' ";
		if(condition.containsKey("title")){
			sql += " and t.title like ? ";
			condition.put("title", "%" + condition.get("title") + "%" );
		}
		if(condition.containsKey("totalTopic")){
			sql += " and t.total_topic= ? ";
		}
		if(condition.containsKey("totalScore")){
			sql += " and t.total_score= ? ";
		}
		if(condition.containsKey("passScore")){
			sql += " and t.pass_score= ? ";
		}
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray(),new ValueMapper() {
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				int questionShuliang=getQuestionSumState(record.get("id").toString());
				record.put("questionShuliang", questionShuliang);
				double questionScore=getQuestionScoreState(record.get("id").toString());
				record.put("questionScore", questionScore);
				String sql="select * from PX_EXAMINATION t where t.px_test_paper='"+record.get("id")+"'";
				List<Map<String, Object>> list=jdbcAssistant.query(sql);
				String sql2="select * from PX_EXAMINATION_RESULT t where t.px_test_paper='"+record.get("id")+"'";
				List<Map<String, Object>> list2=jdbcAssistant.query(sql2);
				record.put("editOrDelete", true);
				if(list.size()!=0 || list2.size()!=0)
				{
					record.put("editOrDelete", false);
				}
				return RETURN_CODE.NEXT;
			}
		});
	}
	
	public int getQuestionSumState(String id) {
		String paperSql="select count(*) as  shuliang from PX_TEST_PAPER_QUESTION t where t.px_test_paper='"+id+"'";
		Map<String, Object> paperMap=jdbcAssistant.queryOne(paperSql);
		//试卷试题总数
		int paperTotal=Integer.parseInt(paperMap.get("shuliang").toString());
		return paperTotal;
	}

	public double getQuestionScoreState(String id) {
		String paperSql="select sum(t.question_score) as  questionScore from PX_TEST_PAPER_QUESTION t where t.px_test_paper='"+id+"'";
		Map<String, Object> paperMap=jdbcAssistant.queryOne(paperSql);
		double questionScore=0;
		if(paperMap.get("questionScore")!=null)
		{
			questionScore=Double.parseDouble(paperMap.get("questionScore").toString());
		}
		return questionScore;
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_TEST_PAPER t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_TEST_PAPER t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public TestPaper get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TestPaper entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(TestPaper entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}
	
}
