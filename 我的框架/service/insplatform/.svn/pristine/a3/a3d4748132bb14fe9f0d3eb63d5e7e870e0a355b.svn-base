package com.insplatform.module.osta.eval.demand.service.impl;

import java.io.Serializable;
import java.util.*;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.map.Condition;
import com.insframework.system.map.Messager;

import com.insplatform.module.osta.eval.demand.model.OstaEvalDemand;
import com.insplatform.module.osta.eval.demand.repository.OstaEvalDemandRepository;
import com.insplatform.module.osta.eval.demand.service.OstaEvalDemandService;

@Service
public class OstaEvalDemandServiceImpl extends BaseServiceImpl<OstaEvalDemand> implements OstaEvalDemandService{
	
	@Autowired
	private OstaEvalDemandRepository ostaEvalDemandRepository;

	@Override
	public BaseRepository<OstaEvalDemand> getRepository() {		
		return ostaEvalDemandRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return ostaEvalDemandRepository.loadAllGrid(condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return ostaEvalDemandRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return ostaEvalDemandRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public OstaEvalDemand get(Serializable id) {		
		return ostaEvalDemandRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(OstaEvalDemand entity) {	
		return ostaEvalDemandRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(OstaEvalDemand entity) {		
		ostaEvalDemandRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		ostaEvalDemandRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		ostaEvalDemandRepository.deleteByIds(ids);
	}

	@Override
	public Map<String, Object> updateRelease(String[] ids, String value) {
		boolean chackParm = updateReleaseCheckParm(ids, value);
		if (!chackParm) {
			return new Messager().put("err", "errParm");
		}
		boolean flag = false;
		int result = 0;
		int errNum = 0;
		for (int i = 0; i < ids.length; i++) {
			flag = ostaEvalDemandRepository.beforeCheckUpdateRelease(ids[i],value);
			if (flag) {
				result = ostaEvalDemandRepository.updateRelease(ids[i],value);
				if (result == 0) {errNum ++;}
			}
		}
		return new Messager().put("errNum", errNum);
	}

	/**
	 * 校验修改发布状态参数
	 * @param ids
	 * @param value
	 * @return 
	 */
	private boolean updateReleaseCheckParm(String[] ids, String value) {
		if (ids!=null&&ids.length>0&&value!=null) {
			String[] tvAble = new String[]{"Y","N"};
			for (String tv : tvAble) {
				if (tv.equals(value)) {
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public Map<String, Object> updateWriteAble(String[] ids, String value) {
		boolean chackParm = updateWriteAbleCheckParm(ids, value);
		if (!chackParm) {
			return new Messager().put("err", "errParm");
		}
		boolean flag = false;
		int result = 0;
		int errNum = 0;
		for (int i = 0; i < ids.length; i++) {
			flag = ostaEvalDemandRepository.beforeCheckUpdateWriteAble(ids[i],value);
			if (flag) {
				result = ostaEvalDemandRepository.updateWriteAble(ids[i],value);
				if (result == 0) {errNum ++;}
			}
		}
		return new Messager().put("errNum", errNum);
	}

	/**
	 * 校验修改填写许可参数
	 * @param ids
	 * @param value
	 * @return
	 */
	private boolean updateWriteAbleCheckParm(String[] ids, String value) {
		if (ids!=null&&ids.length>0&&value!=null) {
			String[] tvAble = new String[]{"Y","N"};
			for (String tv : tvAble) {
				if (tv.equals(value)) {
					return true;
				}
			}
		}
		return false;
	}

	@Override
	public Map<String, Object> deleteByIdsx(String[] ids) {
		int errNum = 0;
		if (ids!=null&&ids.length>0) {
			boolean flag = false;
			int result = 0;
			for (String id : ids) {
				flag = ostaEvalDemandRepository.beforeCheckDeleteByIdsx(id);
				if (flag) {
					try {
						result = ostaEvalDemandRepository.deleteByIdx(id);
						if (result==0) {
							errNum++;
						}
					} catch (Exception e) {
						errNum++;
					}
				}
			}
		}else {
			return new Messager().put("err", "errParm");
		}
		return new Messager().put("errNum", errNum);
	}

}
