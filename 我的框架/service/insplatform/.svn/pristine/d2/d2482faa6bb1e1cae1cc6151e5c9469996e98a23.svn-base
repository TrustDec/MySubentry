package com.insplatform.module.video.repository.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.insframework.common.spring.jdbc.mapper.ValueMapper;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.resource.ResourceValueMapper;
import com.insplatform.module.video.model.Video;
import com.insplatform.module.video.repository.VideoRepository;

@Repository
public class VideoRepositoryImpl extends BaseRepositoryImpl<Video> implements VideoRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.*,k.name as kpoint_name from PX_VIDEO t " +
				" left join PX_KPOINT k on t.kpoint_id = k.id " +
				" where 1=1 ";	
		if(condition.containsKey("name")){
			sql += " and t.name like ? ";
			condition.put("name", "%" + condition.get("name") + "%" );
		}
		if(condition.containsKey("createUserName")){
			sql += " and t.create_user_name like ? ";
			condition.put("createUserName", "%" + condition.get("createUserName") + "%" );
		}
		if(condition.containsKey("difficulty")){
			sql += " and t.difficulty = ? ";			
		}
		if(condition.containsKey("kpointName")){
			sql += " and k.name like ? ";
			condition.put("kpointName", "%" + condition.get("kpointName") + "%" );
		}
		sql += " order by t.update_time desc ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray(), new ValueMapper(){
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				ResourceValueMapper.difficulty(record);
				return RETURN_CODE.NEXT;
			}
		});
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_VIDEO t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.*,k.name as kpoint_name from PX_VIDEO t" +
				 " left join PX_KPOINT k on t.kpoint_id = k.id where t.id='"+id+"'";
		return jdbcAssistant.queryOne(sql);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public Video get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(Video entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(Video entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}
	
}
