package com.insplatform.system.user.controller;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.insframework.common.utils.ImageUtil;
import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.controller.BaseController;
import com.insframework.system.context.App;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;
import com.insplatform.system.login.service.LoginService;
import com.insplatform.system.role.service.RoleService;
import com.insplatform.system.user.model.User;
import com.insplatform.system.user.service.UserService;

@Controller
@RequestMapping("/system/user")
public class UserController extends BaseController{
	
	@Autowired
	private RoleService roleService;
	
	@Autowired
	private LoginService loginService;
	
	@Autowired
	private UserService userService;
	
	/**
	 * 加载用户
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAll")
	public @ResponseBody Map<String, Object> loadAll(
			HttpServletRequest request, HttpServletResponse response){		
		return userService.loadAll(this.getCondition(request, "name","account","working","enabled","orgName","orgId","notOrg","roleId","notRoleId"));
	}
	
	/**
	 * 加载用户
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllChooser")
	public @ResponseBody Map<String, Object> loadAllChooser(
			HttpServletRequest request, HttpServletResponse response){		
		CurrentUser user = this.getCurrentUser(request);
		String companyId = user.getCompanyId();
		String id = request.getParameter("id");
		Condition condition = this.getCondition(request, "name","account","working","enabled","orgName","orgId","notOrg","roleId","notRoleId");
		condition.put("companyId", companyId);
		condition.put("id", id);
		return userService.loadAllChooser(condition);
	}
	
	/**
	 * 加载单条用户
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody Map<String, Object> load(@RequestParam("id") String id){		
		return this.getMessager().success().data(userService.load(id));		
	}
	
	/**
	 * 新增用户
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")	
	public @ResponseBody Map<String, Object> add (
			User user, 
			@RequestParam(value="photoReal",required=false) String photoReal,
			@RequestParam(value="orgId",required=false) String orgId)throws Exception{
		String id = (String) userService.save(user, orgId);
		if(TextUtil.isNotEmpty(photoReal)){
			userService.savePhoto(id, photoReal);
		}
		return this.getMessager().success();
	}
	
	/**
	 * 编辑用户
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")	
	public @ResponseBody Map<String, Object> update(
		   @RequestParam(value="photoReal",required=false) String photoReal,
		   @RequestParam(value="id",required=false) String id,
		   @RequestParam(value="orgId",required=false) String orgId,
		   HttpServletRequest request)throws Exception{		
		User user = userService.get(id);
		this.bindObject(request, user);
		userService.update(user, orgId);		
		if(TextUtil.isNotEmpty(photoReal)){
			userService.savePhoto(id, photoReal);
		}
		return this.getMessager().success();
	}
	
	/**
	 *	删除用户
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")	
	public @ResponseBody Map<String, Object> delete(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		userService.deleteByIds(ids);
		return this.getMessager().success();
	}
	
	/**
	 * 重置密码
	 * @param request
	 * @return
	 */
	@RequestMapping("/resetPassword")	
	public @ResponseBody Map<String, Object> resetPassword(HttpServletRequest request){	
		userService.resetPassword(this.getSelectedItems(request));
		return this.getMessager().success();
	}
	
	/**
	 * 获取当前用户信息
	 * @return
	 */
	@RequestMapping("/getCurrentUserInfo")	
	public @ResponseBody Map<String, Object> getCurrentUserInfo(HttpServletRequest request){
		//获取当前用户账号
		CurrentUser user = this.getCurrentUser(request);
		if(user == null){
			//未登录的情况下有可能为空
			return this.getMessager().put("user", null);
		}else{
			//重新设置当前用户信息
			return this.getMessager().put("user", loginService.setCurrentUserInfo(request, user.getAccount()));
		}		
	}
	
	/**
	 * 获取当前用户是否为超级管理员
	 * @return
	 */
	@RequestMapping("/getCurrentUserIsAdmin")	
	public @ResponseBody Map<String, Object> getCurrentUserIsAdmin(HttpServletRequest request){
		//重新获取当前用户详细信息		
		CurrentUser user = this.getCurrentUser(request);
		return this.getMessager().put("isAdmin", roleService.checkUserIsSysAdmin(user.getId()));
	}
	
	/**
	 * 根据用户id获取用户是否为超级管理员
	 * @return
	 */
	@RequestMapping("/getUserIsAdminById")	
	public @ResponseBody Map<String, Object> getUserIsAdminById(@RequestParam("id") String id){
		//重新获取当前用户详细信息
		return this.getMessager().put("isAdmin", roleService.checkUserIsSysAdmin(id));
	}
	
	/**
	 * 检查账号是否存在
	 * @param code
	 * @param id
	 * @return
	 */
	@RequestMapping("/checkHasAccount")
	public @ResponseBody Map<String, Object> checkHasAccount(HttpServletRequest request){
		String id = request.getParameter("id");
		String account = request.getParameter("account");
		boolean has = userService.checkHasAccount(account, id);
		return this.getMessager().success().put("has", has);
	}
	
	/**
	 * 照片是否存在
	 * @param request
	 * @param response
	 */
	@RequestMapping("/hasPhoto")
	public @ResponseBody Map<String, Object> hasPhoto(HttpServletRequest request, HttpServletResponse response){
		String id = request.getParameter("id");
		byte[] photo = userService.getPhotoById(id);
		if(photo == null || photo.length==0){
			return this.getMessager().error();
		}else{
			return this.getMessager().success();
		}
	}
	
	/**
	 * 向浏览器输出照片
	 * @param request
	 * @param response
	 */
	@RequestMapping("/writePhoto")
	public void writePhoto(HttpServletRequest request, HttpServletResponse response){
		String id = request.getParameter("id");
		byte[] photo = null;
		try {
			photo = userService.getPhotoById(id);
		} catch (Exception e) {
		}
		InputStream is = null;	
		try {			
			is = new ByteArrayInputStream(photo);			
			Image img = ImageIO.read(is);		
			BufferedImage image = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_RGB);
			image.getGraphics().drawImage(img, 0, 0, img.getWidth(null), img.getHeight(null), null); 
			ImageUtil.outImageResponse(response, image);			
		} catch (Exception e) {			
			e.printStackTrace();
		}finally{
			try {
				is.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
		
	/**
	 * 向浏览器输出照片
	 * @param request
	 * @param response
	 */
	@RequestMapping("/writePhotox")
	public void writePhotox(HttpServletRequest request, HttpServletResponse response){
		String id = request.getParameter("id");
		byte[] photo = null;
		try {
			photo = userService.getPhotoById(id);
		} catch (Exception e) {
		}
		InputStream is = null;
		HttpURLConnection conn = null;
		try {
			if (photo==null||photo.length==0) {	
				//此处有些问题
				String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+App.STATIC_PATH +"/";
				URL url = new URL(basePath + "/image/header/photo.png");
				conn = (HttpURLConnection) url.openConnection();
				conn.setDoInput(true);
				conn.connect(); 
				is = conn.getInputStream();
			}else {
				is = new ByteArrayInputStream(photo);
			}
			Image img = ImageIO.read(is);
			BufferedImage image = resize(50,null,img);
			ImageUtil.outImageResponse(response, image);
//			FileUtil.writeImage(response, is);
		} catch (Exception e) {			
			e.printStackTrace();
		}finally{
			try {
				is.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}	
	
	
	/**
	 * 缩放图片，若只设置高度或者宽度则按照设置的高度或者宽度等比例缩放图片，否则按照指定的高度和宽度缩放图片（这种方式可能不是等比例缩放）
	 * 
	 * @param w
	 *            缩放后的宽度
	 * @param h
	 *            缩放后的高度
	 * @param img
	 *            原图片img对象
	 * @return 
	 */
	private BufferedImage resize(Integer w, Integer h, Image img) {
		int width = img.getWidth(null);
		int height = img.getHeight(null);
		if (h == null && w != null) {// 按照宽度等比例缩放图片
			h = height * w / width;
		} else if (w == null && h != null) {// 按照高度等比例缩放图片
			w = width * h / height;
		} else if (h == null && w == null) {
			throw new RuntimeException("需要指定缩放后的图片大小");
		}
		BufferedImage image = new BufferedImage(w, h,
				BufferedImage.TYPE_INT_RGB);
		image.getGraphics().drawImage(img, 0, 0, w, h, null); // 绘制缩小后的图
		return image;
	}

}
