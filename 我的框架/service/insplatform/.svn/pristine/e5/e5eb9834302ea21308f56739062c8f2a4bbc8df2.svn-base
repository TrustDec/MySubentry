package com.insplatform.module.course.course.controller;

import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.controller.BaseController;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;
import com.insplatform.module.course.course.model.Course;
import com.insplatform.module.course.course.service.CourseService;
import com.insplatform.module.course.courseworktype.service.CourseWorktypeService;
import com.insplatform.module.resource.service.ResourceService;

@Controller
@RequestMapping("/px/course")
public class CourseController extends BaseController{
	
	@Autowired
	private CourseService courseService;
	
	@Autowired
	private ResourceService resourceService;
	
	@Autowired
	private CourseWorktypeService courseWorktypeService;
	
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllWorkType")
	public @ResponseBody Map<String, Object> loadAllWorkType(
			HttpServletRequest request, HttpServletResponse response){		
		return courseService.loadAllWorkType(this.getCondition(request, "worktypeId", "worktypeClassifyId", "fullName","courseId"));
	}

	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGrid")
	public @ResponseBody Map<String, Object> loadAllGrid(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"title","difficulty","release","createUserName");
		return courseService.loadAllGrid(condition);
	}
	/**
	 * 课程选择器
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllChooser")
	public @ResponseBody Map<String, Object> loadAllChooser(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"title","difficulty","courseType","createUserName");
		return courseService.loadAllChooser(condition);
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllList")
	public @ResponseBody Map<String, Object> loadAllList(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return this.getMessager().success().data(courseService.loadAllList(condition));
	}	
	
	
	/**
	 * 加载单条数据
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody Map<String, Object> load(@RequestParam("id") String id){		
		return this.getMessager().success().data(courseService.load(id));		
	}
	
	/**
	 * 新增
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")	
	public @ResponseBody Map<String, Object> add(Course course, HttpServletRequest request){
		
		CurrentUser user = getCurrentUser(request);
		String courseId = course.getId();
		if (TextUtil.isEmpty(course.getId())) {
			course.setCreateUserId(user.getId());
			course.setCreateUserName(user.getName());
			course.setCreateTime(new Date());
			course.setUpdateTime(new Date());
			course.setRelease("N");
			courseId = courseService.save(course)+"";
		}else {
			Course oldCourse = courseService.get(course.getId());
			this.bindObject(request, oldCourse);
			courseService.update(oldCourse);
		}
		
		//查看提交类型是不是发布
		String operateType = request.getParameter("operateType");
		if ("release".equals(operateType)) {
			String releaseResult = "Y";
			int result = courseService.updateReleaseCourse(courseId,"Y");
			if (result == -2) {
				releaseResult = "N";
			}else if(result == 0) {
				releaseResult = "error";
			}
			return this.getMessager().success().put("courseId", courseId).put("releaseResult", releaseResult);
		}
		return this.getMessager().success().put("courseId", courseId);
	}
	
	
	/**
	 * 发布或取消发布课程，单条
	 * @param dict
	 * @return
	 */
	@RequestMapping("/releaseCourse")	
	public @ResponseBody Map<String, Object> releaseCourse(@RequestParam("id") String id,HttpServletRequest request){
		//查看提交类型是不是发布
		String operateType = request.getParameter("operateType");
		int result = 1;
		if ("release".equals(operateType)) {
			result = courseService.updateReleaseCourse(id,"Y");
		}else if("unRelease".equals(operateType)){
			result = courseService.updateReleaseCourse(id,"N");
		}
		
		String releaseResult = "Y";
		if (result == -2) {
			releaseResult = "N";
		}else if(result == 0) {
			releaseResult = "error";
		}

		return this.getMessager().success().put("releaseResult", releaseResult);
	}
	
	
	
	/**
	 * 编辑
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")	
	public @ResponseBody Map<String, Object> update(
		   @RequestParam("id") String id,
		   HttpServletRequest request){		
		Course course = courseService.get(id);
		this.bindObject(request, course);
		course.setUpdateTime(new Date());
		courseService.update(course);
		return this.getMessager().success();
	}
	
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")	
	public @ResponseBody Map<String, Object> delete(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		courseService.deleteByIds(ids);
		return this.getMessager().success();
	}
	
	/**
	 * 加载首页课程列表(8条记录)
	 * @return
	 */
	@RequestMapping("/loadHomeCourseList")
	public @ResponseBody Map<String, Object> loadHomeCourseList(){
		List<Map<String, Object>> courseList = courseService.loadHomeCourseList();
		return this.getMessager().success().put("courseList", courseList);
	}
	
	/**
	 * 根据课程id获取课程详细信息
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadCourseDetailsById")
	public @ResponseBody Map<String, Object> loadCourseDetailsById(HttpServletRequest request){		
		String courseId = request.getParameter("courseId");
		Map<String, Object> course = courseService.loadByDetails(courseId);
		List<Map<String, Object>> worktypes = courseWorktypeService.loadCourseWorktypes(courseId);
		List<Map<String, Object>> kpointResourceList = resourceService.loadCourseResource(courseId);
		boolean hasFocusCourse = courseService.hasFocusCourse(this.getCurrentUser(request).getId(), courseId);
		boolean hasStudyedCourse = courseService.hasStudyedCourse(this.getCurrentUser(request).getId(), courseId);
		return this.getMessager().success().put("course", course)
										   .put("worktypes", worktypes)
										   .put("kpointResourceList", kpointResourceList)
										   .put("hasFocusCourse", hasFocusCourse == true ? "Y" : "N")
										   .put("hasStudyedCourse", hasStudyedCourse == true ? "Y" : "N");
		
	} 
	
	
	/**
	 * 用户关注课程
	 * @param request
	 * @return
	 */
	@RequestMapping("/focuseCourse")
	public @ResponseBody Map<String, Object> focuseCourse(HttpServletRequest request){
		String type = request.getParameter("type");
		String courseId = request.getParameter("courseId");
		String userId = this.getCurrentUser(request).getId();
		if(TextUtil.isNotEmpty(type) && TextUtil.isNotEmpty(courseId)){
			courseService.updateFocuseCourse(userId, courseId, type);			
		}
		return this.getMessager().success();
	}
	
	/**
	 * 添加用户学习过的课程
	 * @param request
	 * @return
	 */
	@RequestMapping("/studyedCourse")
	public @ResponseBody Map<String, Object> studyedCourse(HttpServletRequest request){		
		String courseId = request.getParameter("courseId");
		String resourceId = request.getParameter("resourceId");
		String resourceType = request.getParameter("resourceType");
		String userId = this.getCurrentUser(request).getId();		
		courseService.updateStudyedCourse(userId, courseId);	
		resourceService.updateStudyedResource(userId, resourceId, resourceType);
		return this.getMessager().success();
	}
	
	/**
	 * 加载该课程的小伙伴学过的课程
	 * @param request
	 * @return
	 */
	@RequestMapping("/loadCourseOtherUserStudyed")
	public @ResponseBody Map<String, Object> loadCourseOtherUserStudyed(
			@RequestParam("courseId") String courseId, HttpServletRequest request){
		String userId = this.getCurrentUser(request).getId();
		List<Map<String, Object>> list = courseService.loadCourseOtherUserStudyed(courseId, userId);	
		return this.getMessager().success().put("otherUserStudyedList", list);
	}
	
	/**
	 * 加载课程页面模板
	 * @param request
	 * @return
	 */
	@RequestMapping("/loadAllListTemplate")
	public @ResponseBody Map<String, Object> loadAllListTemplate(HttpServletRequest request){
		return courseService.loadAllListTemplate(request);			
	}
	
}
