package com.insplatform.module.examination.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.stereotype.Repository;

import com.insframework.common.spring.jdbc.mapper.ValueMapper;
import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insplatform.module.examination.model.ExaminationUser;
import com.insplatform.module.examination.repository.ExaminationUserRepository;

import com.insframework.system.map.Condition;


@Repository
public class ExaminationUserRepositoryImpl extends BaseRepositoryImpl<ExaminationUser> implements ExaminationUserRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select  t.id,t.px_examination,t.userid,(case b.sex  when '1' then   '男' when '2' then '女'end) as sex,b.name,b.org_name,b.account,t.create_time,b.id_card,b.company_name,b.duty from  V_SYS_USER_INFO b ,PX_EXAMINATION_USER t where t.userid=b.id and t.px_examination=?";
		condition.put("pxExamination", condition.get("pxExamination") );
		if(condition.containsKey("name"))
		{
			sql+=" and b.name like ?";
			condition.put("name", "%" + condition.get("name") + "%" );
		}
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray(),new ValueMapper() {
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				String sql="select * from PX_EXAMINATION_RESULT t where t.px_examination='"+record.get("pxExamination")+"' and t.create_user_id='"+record.get("userid")+"'";
				List<Map<String, Object>> list=jdbcAssistant.query(sql);
				record.put("editOrDelete", true);
				if(list.size()!=0)
				{
					record.put("editOrDelete", false);
				}
				return RETURN_CODE.NEXT;
			}
		});
	}
	
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_EXAMINATION_USER t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_EXAMINATION_USER t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public ExaminationUser get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 获取考试安排信息
	 * @param id
	 * @return
	 */
	public Map<String, Object> getExamInfo(String  id) {
		String sql="select * from PX_EXAMINATION t where t.id='"+id+"'";
		Map<String, Object> map=jdbcAssistant.queryOne(sql);
		return map;		
		
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(ExaminationUser entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(ExaminationUser entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}


	@Override
	public void add(String id, String[] ids, Condition condition) {
		Map<String, Object> map=getExamInfo(id);
		String effectiveTimes=map.get("effectiveTimes").toString();
		for(int i = 0 ; i < ids.length ; i++)
		{
			String sql = "select * from PX_EXAMINATION_USER t where px_examination='"+id+"' and t.userid='"+ids[i]+"'";
			List<Map<String, Object>> list=jdbcAssistant.query(sql);
			if(list.size()==0)
			{
				String insertSql="insert into PX_EXAMINATION_USER (id, px_examination, userid, create_user_id, create_user_name, create_time,effective_times) values " +
						"('"+TextUtil.getUUID()+"','"+id+"', '"+ids[i]+"',  '"+condition.getCurrentUser().getId()+"', '"+condition.getCurrentUser().getName()+"', sysdate,"+effectiveTimes+")";
				jdbcAssistant.execute(insertSql);
			}
		}
		
	}


	@Override
	public void addMotion(String id, String ClassReportId, Condition condition) {
		Map<String, Object> map=getExamInfo(id);
		String effectiveTimes=map.get("effectiveTimes").toString();
		String sql="select * from PX_CLASS_REPORT_USER t where t.px_class_repor='"+ClassReportId+"' and t.state='审批通过'";
		List<Map<String, Object>> list=jdbcAssistant.query(sql);
		String[] sqlInsert = new String[list.size()];
		for(int i=0;i<list.size();i++){
			Map<String, Object> map2=list.get(i);
			String userid=map2.get("userid").toString();
			sqlInsert[i]="insert into PX_EXAMINATION_USER (id, px_examination, userid, create_user_id, create_user_name, create_time,effective_times) values " +
					"('"+TextUtil.getUUID()+"','"+id+"', '"+userid+"',  '"+condition.getCurrentUser().getId()+"', '"+condition.getCurrentUser().getName()+"', sysdate,"+effectiveTimes+")";
			
		}
		jdbcAssistant.batchUpdate(sqlInsert);
		
	}


	@Override
	public String deleteCheck(String[] ids, Condition condition) {
		int result=0;
		for (int i = 0; i < ids.length; i++) {
			String state=getDeleteState(ids[i]);
			if(TextUtil.isNotEmpty(state))
			{
				result=1;
			}
		}
		return result+"";
	}

	public String getDeleteState(String id)
	{
		String result="";
		String sql="select * from PX_EXAMINATION_USER t where t.id='"+id+"'";
		Map<String, Object> map=jdbcAssistant.queryOne(sql);
		String examId=map.get("pxExamination")+"";
		String userid=map.get("userid")+"";
		String seleSql="select * from PX_EXAMINATION_RESULT t where t.px_examination='"+examId+"' and t.create_user_id='"+userid+"'";
		List<Map<String, Object>> list=jdbcAssistant.query(seleSql);
		if(list.size()!=0)
		{
			result="1";
		}
		return result;
		
	}


	@Override
	public String delete(String[] ids, Condition condition) {
		for (int i = 0; i < ids.length; i++) {
			String state=getDeleteState(ids[i]);
			if(TextUtil.isEmpty(state))
			{
				String sql="delete PX_EXAMINATION_USER t where t.id='"+ids[i]+"'";
				jdbcAssistant.execute(sql);
			}
		}
		return null;
	}


	
}
