package com.insplatform.module.course.coursekpointresource.repository.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.course.coursekpointresource.model.CourseKpointResource;
import com.insplatform.module.course.coursekpointresource.repository.CourseKpointResourceRepository;


@Repository
public class CourseKpointResourceRepositoryImpl extends BaseRepositoryImpl<CourseKpointResource> implements CourseKpointResourceRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select vpr.*,ckrs.course_kpoint_id,ckrs.sort_number from v_px_resource vpr" +
				" inner join px_course_kpoint_resource ckrs " +
				" on ckrs.course_kpoint_id = ? and ckrs.resource_id = vpr.id";
				
//		"name","difficulty","type"
		String name = condition.get("name")+"";
		if (TextUtil.isNotEmpty(name)) {
			sql += " and vpr.name like ?";
			condition.put("name", "%"+name+"%");
		}
		String difficulty = condition.get("difficulty")+"";
		if (TextUtil.isNotEmpty(difficulty)) {
			sql += " and vpr.difficulty = ?";
			condition.put("difficulty", difficulty);
		}
		String type = condition.get("type")+"";
		if (TextUtil.isNotEmpty(type)) {
			sql += " and vpr.type = ?";
			condition.put("type", type);
		}
		sql += " order by ckrs.sort_number";

		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_COURSE_KPOINT_RESOURCE t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_COURSE_KPOINT_RESOURCE t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public CourseKpointResource get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(CourseKpointResource entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(CourseKpointResource entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {
		super.deleteByIds(ids);
	}

	@Override
	public void deleteByIds(String courseKpointId, String[] ids) {
		if(TextUtil.isNotEmpty(courseKpointId)&&ids!=null &&ids.length > 0){
			String[] sqls = new String[ids.length];
			String tmpl = "delete px_course_kpoint_resource ckr" +
					" where ckr.course_kpoint_id = '"+courseKpointId+"'and ckr.resource_id = '";
			for (int i = 0; i < ids.length; i++) {
				sqls[i] = tmpl+ids[i]+"'";
			}
			jdbcAssistant.batchUpdate(sqls);

		}
	}

	@Override
	public Map<String, Object> loadAllGridBySelect(Condition condition) {
		String sql = "select vpr.id, vpr.name, vpr.difficulty, vpr.kpoint_id, vpr.update_time, vpr.create_time, vpr.create_user_id, vpr.create_user_name, vpr.type" +
				" from v_px_resource vpr" +
				" inner join px_course_kpoint_rel ckr on ckr.kpoint_id = vpr.kpoint_id" +
				" where ckr.id = ?" ;
				
		String name = condition.get("name")+"";
		if (TextUtil.isNotEmpty(name)) {
			sql += " and vpr.name like ?";
			condition.put("name", "%"+name+"%");
		}
		String difficulty = condition.get("difficulty")+"";
		if (TextUtil.isNotEmpty(difficulty)) {
			sql += " and vpr.difficulty = ?";
			condition.put("difficulty", difficulty);
		}
		String type = condition.get("type")+"";
		if (TextUtil.isNotEmpty(type)) {
			sql += " and vpr.type = ?";
			condition.put("type", type);
		}
		sql += " order by vpr.name";

		return gridService.loadData(condition.getGridTransModel(), sql,condition.valueArray());
	}

	@Override
	public void kpointUpOrDown(String resourceId, String courseKpointId,
			String type) {
		String sql = "select t.resource_id, t.sort_number, t.course_kpoint_id from PX_COURSE_KPOINT_RESOURCE t" +
				" where t.resource_id = ? and t.course_kpoint_id = ?";
		Map<String, Object> map = jdbcAssistant.queryOne(sql,new Object[]{resourceId, courseKpointId});
		if (map==null) return;
		if ("up".equals(type)) {
			sql = "select ckr.resource_id, ckr.sort_number, ckr.course_kpoint_id" +
					" from px_course_kpoint_resource ckr" +
					" where ckr.course_kpoint_id = ? and ckr.sort_number < ?" +
					" order by ckr.sort_number desc";
		}else {
			sql = "select ckr.resource_id, ckr.sort_number, ckr.course_kpoint_id" +
					" from px_course_kpoint_resource ckr" +
					" where ckr.course_kpoint_id = ? and ckr.sort_number > ?" +
					" order by ckr.sort_number";
		}
		Map<String, Object> otherMap = jdbcAssistant.queryOne(sql,new Object[]{courseKpointId,map.get("sortNumber")});
		if (otherMap==null) return;
		String[] sqls = new String[2];
		sqls[0] = "update px_course_kpoint_resource t set sort_number = '"+otherMap.get("sortNumber")+"' where t.resource_id = '"+resourceId+"' and t.course_kpoint_id = '"+courseKpointId+"'";
		sqls[1] = "update px_course_kpoint_resource t set sort_number = '"+map.get("sortNumber")+"' where t.resource_id = '"+otherMap.get("resourceId")+"' and t.course_kpoint_id = '"+otherMap.get("courseKpointId")+"'";
		jdbcAssistant.batchUpdate(sqls);
	}

	@Override
	public void batchSave(String courseKpointId, String[] ids) {
		Map<String, Object> map = null;
		String sql = "";
		String tmpl = "insert into px_course_kpoint_resource(course_kpoint_id, resource_id, sort_number)" +
				" values(?,?,";
		for (int i = 0; i < ids.length; i++) {
			sql = "select ckr.resource_id, ckr.sort_number, ckr.course_kpoint_id" +
					" from px_course_kpoint_resource ckr" +
					" where ckr.course_kpoint_id = ? and ckr.resource_id = ?";
			map = jdbcAssistant.queryOne(sql, new Object[]{courseKpointId,ids[i]});
			if (map==null) {
				sql = "select nvl(max(ckr.sort_number),0)+1 maxSortNumber from px_course_kpoint_resource ckr" +
						" where ckr.course_kpoint_id = ?";
				map = jdbcAssistant.queryOne(sql,new Object[]{courseKpointId});
				
				if (map==null||map.get("maxSortNumber")==null) {
					sql = tmpl+"1 )";
				}else {
					sql = tmpl+map.get("maxSortNumber")+")";
				}
				jdbcAssistant.update(sql,new Object[]{courseKpointId,ids[i]});
			}
		}
	}
	
}
