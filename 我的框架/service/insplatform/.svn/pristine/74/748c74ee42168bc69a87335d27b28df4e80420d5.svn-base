package com.insplatform.module.attachment.service.impl;

import java.io.File;
import java.io.Serializable;
import java.util.*;

import javax.servlet.http.HttpServletRequest;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.context.App;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;

import com.insplatform.module.attachment.model.Attachment;
import com.insplatform.module.attachment.repository.AttachmentsRepository;
import com.insplatform.module.attachment.service.AttachmentsService;

@Service
public class AttachmentsServiceImpl extends BaseServiceImpl<Attachment> implements AttachmentsService{
	
	@Autowired
	private AttachmentsRepository attachmentsRepository;

	@Override
	public BaseRepository<Attachment> getRepository() {		
		return attachmentsRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return attachmentsRepository.loadAllGrid(condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return attachmentsRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return attachmentsRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public Attachment get(Serializable id) {		
		return attachmentsRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(Attachment entity) {	
		return attachmentsRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(Attachment entity) {		
		attachmentsRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		attachmentsRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		attachmentsRepository.deleteByIds(ids);
	}

	@Override
	public int batchSaveFiles(String pid, HttpServletRequest request) {
		try {
			List<MultipartFile> files = attachmentsRepository.getMultipartFiles(request,"attachment");
			String basePath = App.FILE_SYS + File.separatorChar + "attachment";
			String baseUrl = App.FILE_SYS_URL + "/" + "attachment";
			CurrentUser user = getCurrentUser(request);
			attachmentsRepository.batchSaveFiles(pid,files, basePath, baseUrl, true, user);
		} catch (Exception e) {
			return 0;
		}
		return 0;
	}

	private CurrentUser getCurrentUser(HttpServletRequest request) {
		Object obj = request.getSession().getAttribute(App.CURRENT_USER);
		if(obj != null){
			return (CurrentUser)obj;
		}
		return new CurrentUser();
	}

	@Override
	public List<Map<String, Object>> loadAllListByPid(Condition condition) {
		String pid = "noHavePid";
		if (condition.containsKey("pid")) {
			pid = condition.get("pid")+"";
		}
		
		return attachmentsRepository.loadAllByPid(pid);
	}

	@Override
	public void deleteFile(String[] pids) {
		attachmentsRepository.deleteFile(pids);
		
	}





}
