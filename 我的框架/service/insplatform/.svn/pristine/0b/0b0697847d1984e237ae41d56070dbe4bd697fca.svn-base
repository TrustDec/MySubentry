package com.insplatform.module.course.coursekpointrel.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.stereotype.Repository;

import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insplatform.module.course.coursekpointrel.model.CourseKpointRel;
import com.insplatform.module.course.coursekpointrel.repository.CourseKpointRelRepository;

import com.insframework.system.map.Condition;


@Repository
public class CourseKpointRelRepositoryImpl extends BaseRepositoryImpl<CourseKpointRel> implements CourseKpointRelRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.* from PX_COURSE_KPOINT_REL t ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_COURSE_KPOINT_REL t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_COURSE_KPOINT_REL t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public CourseKpointRel get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(CourseKpointRel entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(CourseKpointRel entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {
		CourseKpointRel  courseKpoint = super.get(id);
		if (courseKpoint!=null) {
			String sql  = "delete px_course_kpoint_rel t" +
					" where t.course_id = '"+courseKpoint.getCourseId()+"' and t.kpoint_id in(" +
					" select kp.id from px_kpoint kp start with kp.id='"+courseKpoint.getKpointId()+"' " +
					" connect by prior kp.id = kp.parent_id" +
					" )";
			jdbcAssistant.update(sql);
		}
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public Map<String, Object> loadAllTreeGrid(Condition condition) {
		String sql = "select t.*,t.name as text, t.parent_id as pid, ckr.sort_number, ckr.id course_kpoint_id from PX_KPOINT t" +
				" inner join px_course_kpoint_rel ckr on ckr.kpoint_id = t.id" +
				" where ckr.course_id = '"+condition.get("courseId")+"'" +
				" order by ckr.sort_number";
		return treeService.loadData(sql);
	}

	@Override
	public List<Map<String, Object>> loadAllTreeGridBySelectKpoint(
			Condition condition) {
		String sql = "select t.*,t.name as text, t.parent_id as pid,ck.sort_number" +
				" from PX_KPOINT t" +
				" left join px_course_kpoint_rel ck on ck.kpoint_id = t.id and ck.course_id = ?" +
				" order by t.name ";
		return jdbcAssistant.query(sql,new Object[]{condition.get("courseId")});
	}

	@Override
	public String[] batchSave(String courseId, String[] ids, String[] kpointCatalogues) {
		String[] courseKpointIds = null;
		if (ids!=null&&ids.length>0) {
			
			courseKpointIds = new String[ids.length];
			
			String sql= "select t.id from PX_COURSE_KPOINT_REL t where t.course_id = ?";
			List<Map<String, Object>> list = jdbcAssistant.query(sql, new Object[]{courseId});
			String tmpl = "insert into px_course_kpoint_rel(course_id, id, kpoint_id, sort_number, kpoint_catalogue)" +
					" values ('"+courseId+"','";
			if (list.size()==0) {
				String[] sqls = new String[ids.length];
				for (int i = 0; i < ids.length; i++) {
					courseKpointIds[i]=TextUtil.getUUID();
					sqls[i] = tmpl+courseKpointIds[i]+"','"+ids[i]+"',"+i+",'"+kpointCatalogues[i]+"')";
				}
				jdbcAssistant.batchUpdate(sqls);
			}else {
				Map<String, Object> map = null;
				for (int i = 0; i < ids.length; i++) {
					
					sql = "select k.parent_id from px_kpoint k where k.id = ? ";
					map = jdbcAssistant.queryOne(sql, new Object[]{ids[i]});
					
					if (map.get("parentId")==null) {
						continue;
					}
					String parentId = map.get("parentId").toString();
					
					sql = "select max(ck.sort_number)+1 max_sort_number from px_course_kpoint_rel ck" +
							" left join px_kpoint kp on kp.id = ck.kpoint_id" +
							" where ck.course_id = '"+courseId+"' and  kp.parent_id = '"+parentId+"'";
					
					map = jdbcAssistant.queryOne(sql);
					
					courseKpointIds[i]=TextUtil.getUUID();
					
					if (map==null||map.get("maxSortNumber")==null) {
						sql = tmpl+courseKpointIds[i]+"',?,1,?)";
					}else {
						sql = tmpl+courseKpointIds[i]+"',?,"+map.get("maxSortNumber")+",?)";
					}
					jdbcAssistant.update(sql,new Object[]{ids[i], kpointCatalogues[i]});
					
				}
			}
		}
		return courseKpointIds;
	}
	
	
	
	

	@Override
	public void batchSaveResource(String[] courseKpointIds, String[] ids) {
		String sql = "insert into px_course_kpoint_resource (resource_id, sort_number, course_kpoint_id)" +
				" select id,rownum,? from (select vprs.id " +
				" from v_px_resource vprs where vprs.kpoint_id = ? order by name) ";
		for (int i = 0; i < ids.length; i++) {
			jdbcAssistant.update(sql,new Object[]{courseKpointIds[i],ids[i]});
		}
		
	}
	
	@Override
	public void kpointUpOrDown(String id, String type) {
		String sql = "select ck.course_id,ck.sort_number,kp.parent_id from px_course_kpoint_rel ck" +
				" left join px_kpoint kp on kp.id = ck.kpoint_id" +
				" where ck.id = ?";
		Map<String, Object> map = jdbcAssistant.queryOne(sql,new Object[]{id});
		if (map==null) return;
		if ("up".equals(type)) {
			sql = "select * from px_course_kpoint_rel ck" +
					" where ck.course_id = ? and ck.sort_number < ? and ck.kpoint_id in (" +
					" select kp.id from px_kpoint kp where kp.parent_id = ?" +
					" )" +
					" order by ck.sort_number desc";
		}else {
			sql = "select * from px_course_kpoint_rel ck" +
					" where ck.course_id = ? and ck.sort_number > ? and ck.kpoint_id in (" +
					" select kp.id from px_kpoint kp where kp.parent_id = ?" +
					" )" +
					" order by ck.sort_number";
		}
		Map<String, Object> otherMap = jdbcAssistant.queryOne(sql,new Object[]{map.get("courseId"),map.get("sortNumber"),map.get("parentId")});
		if (otherMap==null) return;
		String[] sqls = new String[2];
		sqls[0] = "update px_course_kpoint_rel set sort_number = '"+otherMap.get("sortNumber")+"' where id = '"+id+"'";
		sqls[1] = "update px_course_kpoint_rel set sort_number = '"+map.get("sortNumber")+"' where id = '"+otherMap.get("id")+"'";
		jdbcAssistant.batchUpdate(sqls);
	}

	@Override
	public void saveKpointSortNumber(String[] ids) {
		String[] sqls = new String[ids.length];
		String tmpSql = "update px_course_kpoint_rel set sort_number = ";
		for (int i = 0; i < ids.length; i++) {
			sqls[i] = tmpSql+i+" where id = '"+ids[i]+"'";
		}
		jdbcAssistant.batchUpdate(sqls);
		
	}



}
