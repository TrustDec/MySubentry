package com.insplatform.system.organization.repository.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.curruser.CurrentUser;
import com.insplatform.system.organization.model.Organization;
import com.insplatform.system.organization.repository.OrganizationRepository;
import com.insplatform.system.user.service.UserBizDataAuthzService;

import com.insframework.system.map.Condition;


@Repository
public class OrganizationRepositoryImpl extends BaseRepositoryImpl<Organization> implements OrganizationRepository{
	
	@Autowired
	private UserBizDataAuthzService userBizDataAuthzService;

	@Override
	public List<Map<String, Object>> loadAll(Condition condition) {	
		String sql = "select t.id,t.name as text,t.parent_id as pid,t.is_company,t.order_index from SYS_ORGANIZATION t where 1=1 ";
		//需要进行权限过滤
		CurrentUser user = (CurrentUser) condition.get("currentUser");
		if(user != null){
			sql = userBizDataAuthzService.buildUserBizDataAuthzOrgSql(sql, "t.id", user);
		}		
		sql += "order by t.order_index ";
		return jdbcAssistant.query(sql);
	}	
	
	@Override
	public List<String> loadChildrenIds(String id) {
		List<String> ids = new ArrayList<String>();
		ids = loadChildrenIdsSupport(id, ids);
		return ids;
	}
	
	private List<String> loadChildrenIdsSupport(String id, List<String> ids){
		//先加入自身
		ids.add(id);
		//查询子节点
		String sql = "select t.id,t.parent_id from SYS_ORGANIZATION t where parent_id = '"+id+"'";
		List<Map<String, Object>> children = jdbcAssistant.query(sql);
		for(Map<String, Object> child : children){
			String childId = child.get("id").toString();
			//递归调用
			loadChildrenIdsSupport(childId, ids);
		}		
		return ids;
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public Organization get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(Organization entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(Organization entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}

	@Override
	public List<Map<String, Object>> loadByIds(List<String> ids) {
		String sql = "select t.* from SYS_ORGANIZATION t where t.id in " + TextUtil.tansferListtoSqlString(ids);
		return jdbcAssistant.query(sql);
	}

	
	@Override
	public void addOrgUser(String id, String... userIds) {		
		for(String userId : userIds){			
			String sql = "insert into SYS_USER_ORG_REL values ('"+userId+"', '"+id+"') ";
			jdbcAssistant.update(sql);				
		}				
	}

	@Override
	public void deleteOrgUser(String id, String... userIds) {			
		for(String userId: userIds){
			String sql = "delete from SYS_USER_ORG_REL where ORGANIZATION_id = '"+id+"' and user_id = '"+userId+"' ";
			jdbcAssistant.update(sql);				
		}
	}

	@Override
	public List<Map<String, Object>> loadSupersByIdAsOracle(String id) {
		String sql = "select id,name as text,parent_id as pid,is_company,name,parent_id,order_index from SYS_ORGANIZATION where id!='"+id+"' start with id='"+id+"'connect by  prior parent_id = id";
		return jdbcAssistant.query(sql);
	}

	@Override
	public Map<String, Object> loadSuperCompany(String id) {
		String sql = "select t.* from SYS_ORGANIZATION t where t.id = '"+id+"' ";
		Map<String, Object> org = jdbcAssistant.queryOne(sql);
		if("Y".equals(org.get("isCompany").toString()) || org.get("parentId") == null){
			return org;
		}else{
			return loadSuperCompany(org.get("parentId").toString());
		}		
	}

	@Override
	public boolean orgHasUser(String orgId, String userId) {
		String sql = "select count(1) from SYS_USER_ORG_REL t where t.user_id = ? and t.organization_id = ? ";
		int count = jdbcAssistant.queryAsInt(sql, new Object[]{userId,orgId});
		if(count > 0){
			return true;
		}
		return false;
	}

	@Override
	public Map<String, Object> loadUserOrg(String userId) {
		String sql = "select * from SYS_ORGANIZATION where id = " +
				"(select organization_id from SYS_USER_ORG_REL where user_id = '"+userId+"')";		
		return jdbcAssistant.queryOne(sql);
	}

	

	
	
	
}
