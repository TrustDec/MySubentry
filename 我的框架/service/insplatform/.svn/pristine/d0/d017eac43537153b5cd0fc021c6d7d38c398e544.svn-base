package com.insplatform.module.search.service.impl;

import java.io.IOException;
import java.io.StringReader;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.wltea.analyzer.lucene.IKAnalyzer;

import com.insframework.common.spring.jdbc.JdbcAssistant;
import com.insframework.common.spring.jdbc.mapper.ValueMapper;
import com.insframework.common.utils.LuceneUtil;
import com.insframework.common.utils.TextUtil;
import com.insframework.common.utils.pager.Pager;
import com.insframework.system.context.App;
import com.insframework.system.curruser.CurrentUser;
import com.insplatform.module.bbs.questionanswer.service.BbsQuestionAnswerService;
import com.insplatform.module.constant.LuceneIndex;
import com.insplatform.module.search.service.SearchService;

@Service
public class SearchServiceImpl implements SearchService{	
	
	@Autowired
	protected JdbcAssistant jdbcAssistant;	
	
	@Autowired
	private BbsQuestionAnswerService bbsQuestionAnswerService;
	
	public Map<String, Object> search(HttpServletRequest request) throws Exception {
		String searchType = request.getParameter("searchType");
		String searchWords = request.getParameter("searchWords").trim();
		searchWords = URLDecoder.decode(searchWords, "UTF-8");
		if (TextUtil.isEmpty(searchWords)) {
			searchWords="undefined";
		}
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (TextUtil.isNotEmpty(searchWords)&&!"undefined".equals(searchWords)) {
				if ("question".equals(searchType)) {
					map = this.searchQuestion(searchWords,request);
				}else if ("article".equals(searchType)) {
					map = this.searchArticle(searchWords,request);
				}else {
					searchType = "course";
					map = this.searchCourse(searchWords,request);//默认课程
				}
				//添加热门搜索分词-------开始
				try {
					int total = Integer.valueOf(map.get("total")+"") ;
					if (total>0) {
						this.displayAllTokenInfo(searchWords,searchType);
					}
				} catch (Exception e) {
				}
				//添加热门搜索分词 -------结束
			}
		} catch (Exception e) {
			System.out.println("查询异常");
		}
		String searchWordsInput = searchWords;
		if ("undefined".equals(searchWords)) {
			searchWordsInput = "";
		}
		map.put("searchWords", searchWordsInput);
		searchWords = URLEncoder.encode(searchWords,"UTF-8");
		searchWords = searchWords.replace("+", "%20");
		map.put("searchCourse", "#search/"+searchWords+"/course/1");
		map.put("searchQuestion", "#search/"+searchWords+"/question/1");
		map.put("searchArticle", "#search/"+searchWords+"/article/1");
		map.put("searchType", searchType);
		
		//查询热门检索词
		String sql = "select word,wordnum from (" +
				" select t.word,count(t.word) wordnum  from px_search_hot_word t" +
				" where t.type = '"+searchType+"'" +
				" group by t.word)" +
				" where rownum < 15" +
				" order by wordnum desc";
		List<Map<String, Object>> hotWords = jdbcAssistant.query(sql);
		for (Map<String, Object> hotWord : hotWords) {
			hotWord.put("wordEncode", URLEncoder.encode(hotWord.get("word")+"","UTF-8"));
		}
		map.put("hotWords", hotWords);
//		map.put("success", true);
		return map;
	}

	private Map<String, Object> searchCourse(String searchWords, HttpServletRequest request) throws Exception {
		String pageString = request.getParameter("page");
		if(TextUtil.isEmpty(pageString)){
			pageString = "1";
		}
		int page = Integer.parseInt(pageString);
		//索引查询
		Pager<Map<String, Object>> pager = 
				LuceneUtil.query(LuceneIndex.COURSE_INDEX.getValue(), searchWords, 
						new String[]{"title", "info"}, "updateTime", true, 1, 20);
		//高亮设置
		String highLightWord = "<font color='red'>"+searchWords+"</font>";
		String title = "";
		String info = "";
		for (Map<String, Object> map : pager.getData()) {
			//设置高亮
			title = map.get("title")+"";
			title = title.replaceAll(searchWords, highLightWord);
			map.put("title", title);
			info = map.get("info")+"";
			info = TextUtil.subStr(info, 300).replaceAll(searchWords, highLightWord);
			map.put("info", info);
		}
		
		
		Map<String, Object> dataMap = pager.toMap();
		//设置上一页/下一页/首页/尾页url地址
		searchWords = URLEncoder.encode(searchWords,"UTF-8");
		String url = "#search/"+searchWords+"/course/";
		if(pager.isHasNextPage()){
			dataMap.put("nextPageUrl", url+(page+1));
		}else{
			dataMap.put("nextPageUrl", "javascript:;");
		}		
		if(pager.isHasPreviousPage()){
			dataMap.put("previousPageUrl", url + (page-1));
		}else{
			dataMap.put("previousPageUrl", "javascript:;");
		}		
		if(pager.isFirstPage()){
			dataMap.put("firstPageUrl", "javascript:;");
		}else{
			dataMap.put("firstPageUrl", url +"1");
		}		
		if(pager.isLastPage()){
			dataMap.put("lastPageUrl", "javascript:;");
		}else{
			dataMap.put("lastPageUrl", url+pager.getPageCount());
		}
		//设置导航页
		int [] navigatePageNumbers = pager.getNavigatePageNumbers();
		List<Map<String, Object>> navigatePage = new ArrayList<Map<String,Object>>();
		for(int i : navigatePageNumbers){
			Map<String, Object> navigatePageItem = new HashMap<String, Object>();
			navigatePageItem.put("text", i);
			navigatePageItem.put("url", url+i);
			if(i == page){
				navigatePageItem.put("active", "Y");
			}else{
				navigatePageItem.put("active", "N");
			}
			navigatePage.add(navigatePageItem);
		}
		dataMap.put("navigatePage", navigatePage);
		return dataMap;
	}

	private Map<String, Object> searchArticle(String searchWords, HttpServletRequest request) throws Exception {
		String pageString = request.getParameter("page");
		if(TextUtil.isEmpty(pageString)){
			pageString = "1";
		}
		int page = Integer.parseInt(pageString);
		
		//索引查询
		Pager<Map<String, Object>> pager = 
				LuceneUtil.query(LuceneIndex.ARTICLE_INDEX.getValue(), searchWords, 
						new String[]{"articleTitle", "articleContent"}, "createTime", true, 1, 20, false);
		String sql = "";
		Map<String, Object> temp = null;
		//高亮词
		String highLightWord = "<font color='red'>"+searchWords+"</font>";
		String articleTitle = "";
		String articleContent = "";
		for (Map<String, Object> map : pager.getData()) {
			String id = map.get("id")+"";
			sql = "select t.*,ac.name classify_name from PX_BBS_ARTICLE t" +
					" left join SYS_DICT ac on ac.id = t.article_classify" +
					" where t.id = ?";			
			temp=jdbcAssistant.queryOne(sql, new Object[]{id});
			if (temp==null) {
				temp = new HashMap<String, Object>();
			}
			map.put("classifyName", temp.get("classifyName"));
			map.put("lookNum", temp.get("lookNum"));
			map.put("acticlePhoto", temp.get("acticlePhoto"));
			
			//设置高亮
			articleTitle = map.get("articleTitle")+"";
			articleTitle = articleTitle.replaceAll(searchWords, highLightWord);
			map.put("articleTitle", articleTitle);
			articleContent = map.get("articleContent")+"";
			articleContent = TextUtil.subStr(articleContent, 300).replaceAll(searchWords, highLightWord);
			map.put("articleContent", articleContent);
		}
		
		Map<String, Object> dataMap = pager.toMap();
		//设置上一页/下一页/首页/尾页url地址
		searchWords = URLEncoder.encode(searchWords,"UTF-8");
		String url = "#search/"+searchWords+"/article/";
		if(pager.isHasNextPage()){
			dataMap.put("nextPageUrl", url+(page+1));
		}else{
			dataMap.put("nextPageUrl", "javascript:;");
		}		
		if(pager.isHasPreviousPage()){
			dataMap.put("previousPageUrl", url + (page-1));
		}else{
			dataMap.put("previousPageUrl", "javascript:;");
		}		
		if(pager.isFirstPage()){
			dataMap.put("firstPageUrl", "javascript:;");
		}else{
			dataMap.put("firstPageUrl", url +"1");
		}		
		if(pager.isLastPage()){
			dataMap.put("lastPageUrl", "javascript:;");
		}else{
			dataMap.put("lastPageUrl", url+pager.getPageCount());
		}
		//设置导航页
		int [] navigatePageNumbers = pager.getNavigatePageNumbers();
		List<Map<String, Object>> navigatePage = new ArrayList<Map<String,Object>>();
		for(int i : navigatePageNumbers){
			Map<String, Object> navigatePageItem = new HashMap<String, Object>();
			navigatePageItem.put("text", i);
			navigatePageItem.put("url", url+i);
			if(i == page){
				navigatePageItem.put("active", "Y");
			}else{
				navigatePageItem.put("active", "N");
			}
			navigatePage.add(navigatePageItem);
		}
		dataMap.put("navigatePage", navigatePage);
		return dataMap;
		
	}

	private Map<String, Object> searchQuestion(String searchWords, HttpServletRequest request) throws Exception {
		CurrentUser user = (CurrentUser) request.getSession().getAttribute(App.CURRENT_USER);
		String pageString = request.getParameter("page");
		if(TextUtil.isEmpty(pageString)){
			pageString = "1";
		}		
		int page = Integer.parseInt(pageString);
		
		String sql = "select t.id, t.title, t.classify, t.create_person_id, " +
				" t.create_person_name, t.create_time, t.content," +
				" (select count(1) from px_bbs_question_answer qa where qa.pid = t.id) answernum," +
				" (select count(1) from px_bbs_question_mylove qul " +
				" 		where qul.question_id = t.id and qul.create_person_id = '"+user.getId()+"' ) isnotfollow" +
				" from px_bbs_question t where 1=1 ";
		sql +=" and t.title like ?";
		sql += "order by t.create_time desc";
		Pager<Map<String, Object>> pager = new Pager<Map<String, Object>>(0, page, 20);
		String parm = "%"+searchWords+"%";
		pager = jdbcAssistant.queryAsPager(sql, new Object[]{parm}, this.getQuestionMapper(searchWords), pager);
		
		Map<String, Object> dataMap = pager.toMap();
		
		List<Map<String, Object>> list = pager.getData();
		List<Map<String, Object>> acceptAnswerList = null;
		Map<String, Object> tempMap = new HashMap<String, Object>();
		for (int i = 0; i < list.size(); i++) {
			tempMap = list.get(i);
			acceptAnswerList = bbsQuestionAnswerService.loadAcceptApply(tempMap.get("id")+"");
			tempMap.put("acceptAnswerList", acceptAnswerList);
		}
		
		
		//设置上一页/下一页/首页/尾页url地址
		searchWords = URLEncoder.encode(searchWords,"UTF-8");
		String url = "#search/"+searchWords+"/question/";
		if(pager.isHasNextPage()){
			dataMap.put("nextPageUrl", url+(page+1));
		}else{
			dataMap.put("nextPageUrl", "javascript:;");
		}		
		if(pager.isHasPreviousPage()){
			dataMap.put("previousPageUrl", url + (page-1));
		}else{
			dataMap.put("previousPageUrl", "javascript:;");
		}		
		if(pager.isFirstPage()){
			dataMap.put("firstPageUrl", "javascript:;");
		}else{
			dataMap.put("firstPageUrl", url +"1");
		}		
		if(pager.isLastPage()){
			dataMap.put("lastPageUrl", "javascript:;");
		}else{
			dataMap.put("lastPageUrl", url+pager.getPageCount());
		}
		//设置导航页
		int [] navigatePageNumbers = pager.getNavigatePageNumbers();
		List<Map<String, Object>> navigatePage = new ArrayList<Map<String,Object>>();
		for(int i : navigatePageNumbers){
			Map<String, Object> navigatePageItem = new HashMap<String, Object>();
			navigatePageItem.put("text", i);
			navigatePageItem.put("url", url+i);
			if(i == page){
				navigatePageItem.put("active", "Y");
			}else{
				navigatePageItem.put("active", "N");
			}
			navigatePage.add(navigatePageItem);
		}
		dataMap.put("navigatePage", navigatePage);

		return dataMap;
	}

	private ValueMapper getQuestionMapper(final String searchWords){
		return new ValueMapper(){
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				String title = record.get("title")+"";
				String temp = title.replaceAll(searchWords, "<font color='red'>"+searchWords+"</font>");
				record.put("title", temp);
				return RETURN_CODE.NEXT;
			}
		};
	}
	
	private void displayAllTokenInfo(String str,String type){
		List<String> list = new ArrayList<String>();
		String sql = "";
		TokenStream stream = null;
	    try {  
	    	Analyzer analyzer = new IKAnalyzer(true);
	        stream = analyzer.tokenStream("content",new StringReader(str));  
	        //每个语汇单元的位置偏移量  
	        OffsetAttribute oa=stream.addAttribute(OffsetAttribute.class);  
	        //存储每一个语汇单元的信息（分词单元信息）  
	        CharTermAttribute cta=stream.addAttribute(CharTermAttribute.class);  
	        stream.reset();  
	        int lastOffset = -1;
	        while(stream.incrementToken()) {  
	            if(oa.startOffset() < lastOffset) continue;  
	            lastOffset = oa.endOffset();  
	            sql = "insert into px_search_hot_word(word, type) values('"+cta+"', '"+type+"')";
	            list.add(sql);  
	        }  
	        stream.end();
	        jdbcAssistant.batchUpdate(list.toArray(new String[list.size()]));
	    } catch (IOException e) {
	    	System.out.println("热门检索词添加------------异常");
	    	try {
				stream.close();
			} catch (IOException e1) {
			}
	    }  
	}

	
}
