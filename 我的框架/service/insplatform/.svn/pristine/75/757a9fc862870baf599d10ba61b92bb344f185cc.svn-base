package com.insplatform.module.osta.register.demand.repository.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.insframework.common.spring.jdbc.mapper.ValueMapper;
import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;
import com.insplatform.module.osta.register.demand.model.OstaRegDemandWrite;
import com.insplatform.module.osta.register.demand.repository.OstaRegDemandWriteRepository;


@Repository
public class OstaRegDemandWriteRepositoryImpl extends BaseRepositoryImpl<OstaRegDemandWrite> implements OstaRegDemandWriteRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.* from PX_OSTA_REG_DEMAND_WRITE t ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_OSTA_REG_DEMAND_WRITE t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id, CurrentUser user) {	
		String sql = "select t.id, t.user_id, t.user_name, t.id_card, phone, t.company_id," +
				" t.company_name, t.sex, t.age, t.edu, t.technical_title, t.pid," +
				" t.create_user_id, t.create_user_name, t.create_time," +
				" (select wmsys.wm_concat('\r\n证件名称：'||uq.name||'  证件编号：'||uq.num||" +
				" '  获取时间：'||to_char(uq.gain_time,'yyyy-mm-dd')||" +
				" '  工种名称：'||uq.workname||'  工种级别：'||uq.worktype_level_name)" +
				" from px_user_qualification uq" +
				" where uq.user_id = '"+user.getId()+"') yyzg" +
				" from px_osta_reg_demand_write t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id},new ValueMapper() {
			
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				String yyzg = record.get("yyzg")+"";
				if (TextUtil.isNotEmpty(yyzg)) {
					yyzg = yyzg.replaceFirst("\r\n", "");
					record.put("yyzg", yyzg);
				}
				return RETURN_CODE.NEXT;
			}
		});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public OstaRegDemandWrite get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(OstaRegDemandWrite entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(OstaRegDemandWrite entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public Map<String, Object> loadByPidAndUserId(String pid, String userId) {
		String sql = "select t.id, t.user_id, t.user_name, t.id_card, t.phone, t.company_id, t.company_name," +
				" t.sex, t.age, t.edu, t.technical_title, t.pid, t.create_user_id," +
				" t.create_user_name, t.create_time" +
				" from PX_OSTA_REG_DEMAND_WRITE t" +
				" where t.pid = ? and t.user_id = ?";
		return jdbcAssistant.queryOne(sql, new Object[]{pid, userId});
	}

	@Override
	public String addANewRecord(String pid, String userId) {
		String id = TextUtil.getUUID();
		
		String sql = "insert into PX_OSTA_REG_DEMAND_WRITE" +
				" (id, user_id, user_name, id_card, phone, company_id," +
				" company_name, sex, age, edu, technical_title, pid," +
				" create_user_id, create_user_name, create_time)" +
				" select '"+id+"',u.id,u.name,u.id_card,u.phone,u.company_id," +
				" u.company_name,u.sex,to_char(sysdate,'yyyy')-substr(id_card,7,4),u.edu,'',?," +
				" u.id,u.name,sysdate" +
				" from v_sys_user_info u" +
				" where u.id = ?";
		int result = jdbcAssistant.update(sql,new Object[]{pid,userId});
		return result==1?id:null;
	}
	
}
