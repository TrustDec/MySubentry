package com.insplatform.module.trainingplan.controller;

import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import com.insframework.system.base.controller.BaseController;
import com.insframework.system.map.Condition;
import com.insplatform.module.trainingplan.model.TrainingPlan;
import com.insplatform.module.trainingplan.service.TrainingPlanService;

@Controller
@RequestMapping("/px/trainingplan")
public class TrainingPlanController extends BaseController{
	
	@Autowired
	private TrainingPlanService trainingPlanService;
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGrid")
	public @ResponseBody Map<String, Object> loadAllGrid(
			HttpServletRequest request, HttpServletResponse response){
		return trainingPlanService.loadAllGrid(this.getCondition(request, "planName","pxAddress","trainingProject","sponsor","pxYear","pxMonth"));
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllList")
	public @ResponseBody Map<String, Object> loadAllList(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return this.getMessager().success().data(trainingPlanService.loadAllList(condition));
	}	
	
	
	/**
	 * 加载单条数据
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody Map<String, Object> load(@RequestParam("id") String id){		
		return this.getMessager().success().data(trainingPlanService.load(id));		
	}
	
	/**
	 * 新增
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")	
	public @ResponseBody Map<String, Object> add(TrainingPlan trainingplan, HttpServletRequest request){
		trainingplan.setCreateUserId(this.getCurrentUser(request).getId());
		trainingplan.setCreateUserName(this.getCurrentUser(request).getName());
		Date date = new Date();
		trainingplan.setCreateTime(date);
		trainingplan.setUpdateTime(date);
		trainingPlanService.addWithCompanyName(trainingplan);
		return this.getMessager().success();
	}
	
	/**
	 * 编辑
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")	
	public @ResponseBody Map<String, Object> update(
		   @RequestParam("id") String id,
		   HttpServletRequest request){		
		TrainingPlan trainingplan = trainingPlanService.get(id);
		this.bindObject(request, trainingplan);
		trainingPlanService.update(trainingplan);
		return this.getMessager().success();
	}
	
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")	
	public @ResponseBody Map<String, Object> delete(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		trainingPlanService.deleteByIds(ids);
		return this.getMessager().success();
	}

	/**
	 * 新增前检查
	 * @param request
	 * @return
	 */
	@RequestMapping("/beforeInsertCheck")
	public @ResponseBody Map<String, Object> beforeInsertCheck(HttpServletRequest request){
		String year = request.getParameter("year");
		String month = request.getParameter("month");
		String id = getCurrentUser(request).getId();
		boolean has = trainingPlanService.beforeInsertCheck(id,year, month);
		return this.getMessager().success().put("has", has);
	}
	
	/**
	 * 修改或删除前检查
	 * @param request
	 * @return
	 */
	@RequestMapping("/beforeUpdAndDelCheck")
	public @ResponseBody Map<String, Object> beforeUpdAndDelCheck(HttpServletRequest request){
		String [] planIds = request.getParameterValues("planIds");
		return this.getMessager().success().put("has", trainingPlanService.beforeUpdAndDelCheck(planIds));
	}
	
}
