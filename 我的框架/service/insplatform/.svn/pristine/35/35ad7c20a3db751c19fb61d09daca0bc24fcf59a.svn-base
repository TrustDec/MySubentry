package com.insplatform.module.project.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.insframework.system.base.controller.BaseController;
import com.insframework.system.map.Condition;
import com.insplatform.module.project.model.Project;
import com.insplatform.module.project.service.ProjectService;

@Controller
@RequestMapping("/px/project")
public class ProjectController extends BaseController {

	@Autowired
	private ProjectService projectService;

	/**
	 * 加载数据
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGrid")
	public @ResponseBody
	Map<String, Object> loadAllGrid(HttpServletRequest request,
			HttpServletResponse response) {
		Condition condition = this.getCondition(request, "projectClassifyId",
				"name", "cultivateType");
		return projectService.loadAllGrid(condition);
	}

	/**
	 * 加载数据
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllList")
	public @ResponseBody
	Map<String, Object> loadAllList(HttpServletRequest request,
			HttpServletResponse response) {
		Condition condition = this.getCondition(request);
		return this.getMessager().success()
				.data(projectService.loadAllList(condition));
	}

	/**
	 * 加载单一工种数据
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadWorkType")
	public @ResponseBody
	Map<String, Object> loadWorkType(HttpServletRequest request,
			HttpServletResponse response) {
		String id = request.getParameter("projectId");
		Condition condition = this.getCondition(request);
		condition.put("projectId", id);
		return projectService.loadWorkType(condition);
	}

	/**
	 * 添加单一工种数据
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/addWorkType")
	public @ResponseBody
	Map<String, Object> addWorkType(HttpServletRequest request,
			HttpServletResponse response) {
		String[] ids = this.getSelectedItems(request, "idSer");
		String id = request.getParameter("id");
		projectService.add(id, ids);
		return this.getMessager().success();
	}

	/**
	 * 删除单一工种数据
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/deleteWorkType")
	public @ResponseBody
	Map<String, Object> deleteWorkType(HttpServletRequest request,
			HttpServletResponse response) {
		String[] ids = this.getSelectedItems(request);
		String id = request.getParameter("id");
		projectService.delete(id, ids);
		return this.getMessager().success();
	}

	/**
	 * 加载单条数据
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody
	Map<String, Object> load(@RequestParam("id") String id) {
		return this.getMessager().success().data(projectService.load(id));
	}

	/**
	 * 新增
	 * 
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")
	public @ResponseBody
	Map<String, Object> add(HttpServletRequest request, Project project) {
		String ids = project.getPxPersonClassifyId();
		List<Map<String, Object>> list = projectService.selectInfo(ids);
		String PxPersonClassifyName = "";
		for (int i = 0; i < list.size(); i++) {
			PxPersonClassifyName += (String) list.get(i).get("name") + ",";
		}
		PxPersonClassifyName = PxPersonClassifyName.substring(0,
				PxPersonClassifyName.length() - 1);

		project.setPxPersonClassifyName(PxPersonClassifyName);
		project.setPxPersonClassifyId(ids);

		projectService.save(project);

		return this.getMessager().success();
	}

	/**
	 * 编辑
	 * 
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")
	public @ResponseBody
	Map<String, Object> update(@RequestParam("id") String id,
			HttpServletRequest request) {
		Project project = projectService.get(id);
		this.bindObject(request, project);
		String ids = project.getPxPersonClassifyId();
		List<Map<String, Object>> list = projectService.selectInfo(ids);
		String PxPersonClassifyName = "";
		for (int i = 0; i < list.size(); i++) {
			PxPersonClassifyName += (String) list.get(i).get("name") + ",";
		}
		PxPersonClassifyName = PxPersonClassifyName.substring(0,
				PxPersonClassifyName.length() - 1);

		project.setPxPersonClassifyName(PxPersonClassifyName);
		project.setPxPersonClassifyId(ids);
		projectService.update(project);
		return this.getMessager().success();
	}

	/**
	 * 删除
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")
	public @ResponseBody
	Map<String, Object> delete(HttpServletRequest request) {
		String[] ids = this.getSelectedItems(request);
		projectService.deleteByIds(ids);
		return this.getMessager().success();
	}
	

	/**
	 * 查询培训项目模板数据
	 * @param request
	 * @return
	 */
	@RequestMapping("/loadAllListTemplate")
	public @ResponseBody
	Map<String, Object> loadAllListTemplate(HttpServletRequest request) {
		Condition condition = this.getCondition(request,"projectId");
		return this.getMessager().success()
				.data(projectService.loadAllListTemplate(condition));
	}

}
