package com.insplatform.module.monthplan.service.impl;

import java.io.Serializable;
import java.text.DecimalFormat;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.map.Condition;
import com.insframework.system.map.Messager;
import com.insplatform.module.monthplan.model.MonthPlan;
import com.insplatform.module.monthplan.repository.MonthPlanProjectRepository;
import com.insplatform.module.monthplan.repository.MonthPlanRepository;
import com.insplatform.module.monthplan.service.MonthPlanService;
import com.insplatform.module.yearplan.repository.YearPlanRepository;

@Service
public class MonthPlanServiceImpl extends BaseServiceImpl<MonthPlan> implements MonthPlanService{
	
	@Autowired
	private MonthPlanRepository monthPlanRepository;
	
	@Autowired
	private YearPlanRepository yearPlanRepository;
	
	@Autowired
	private MonthPlanProjectRepository monthPlanProjectRepository;
	
	@Override
	public BaseRepository<MonthPlan> getRepository() {		
		return monthPlanRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return monthPlanRepository.loadAllGrid(condition);
	}
	
	@Override
	public Map<String, Object> loadAllGridByNeedApprove(Condition condition) {
		return monthPlanRepository.loadAllGridByNeedApprove(condition);
	}

	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return monthPlanRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return monthPlanRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public MonthPlan get(Serializable id) {		
		return monthPlanRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(MonthPlan entity) {
		boolean flag = monthPlanRepository.beforeSaveCheckMonth(entity);
		if (!flag) {
			return "exist";
		}
		Map<String, Object> yearPlan = yearPlanRepository.getTheLatestVersion(entity.getYear());
		if (yearPlan==null) {
			return "noYearPlan";
		}else if (!"C".equals(yearPlan.get("state"))) {
			return "notPassApproval";
		}
		entity.setTitle(entity.getYear() + " 年 "+entity.getMonth()+" 月 培训计划");
		String monthPlanId = monthPlanRepository.save(entity).toString();
		monthPlanProjectRepository.batchSaveMonthProjectFromYearPlan(monthPlanId,
				yearPlan.get("id").toString(),entity.getMonth());
		
		//计算年度计划金额
		
		int personNum = yearPlanRepository.getYearStudyPersonNumber(yearPlan.get("id").toString());
		if (personNum>0) {
			double money = Double.parseDouble(yearPlan.get("budget").toString());
			int monthPersonNum = monthPlanRepository.getMonthStudyPersonNumber(monthPlanId);
			double monthMoney = money/personNum*monthPersonNum;
			DecimalFormat df = new DecimalFormat("#.####");
			monthMoney = Double.valueOf(df.format(monthMoney));
			monthPlanRepository.updateMonthBudget(monthPlanId,monthMoney);
		}
		return monthPlanId;
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(MonthPlan entity) {		
		monthPlanRepository.update(entity);
	}
	
	@Override
	public String updatex(MonthPlan monthplan) {
		boolean flag = monthPlanRepository.beforeSaveCheckMonth(monthplan);
		if (!flag) {
			return "exist";
		}
		monthPlanRepository.update(monthplan);
		return "1";
	}

	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		monthPlanRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		monthPlanRepository.deleteByIds(ids);
	}

	@Override
	public int deleteMonthPlan(String[] ids) {
		int noDel = 0;
		boolean flag = false;
		for (String id : ids) {
			flag = monthPlanRepository.whetherItCanBeDeleted(id); 
			if (flag) {
				monthPlanRepository.deleteById(id);
			}else {
				noDel++;
			}
		}
		return noDel;
	}
	
	@Override
	public int updateSendApproval(String id) {
		boolean flag = monthPlanRepository.beforeSendApprovalCheck(id);
		if (!flag) {
			return -1;
		}
		return monthPlanRepository.updateState(id,"B");
	}

	@Override
	public int updateApproval(String id, String type) {
		if ("tg".equals(type)) {
			return monthPlanRepository.updateState(id,"C");
		}else if ("btg".equals(type)) {
			return monthPlanRepository.updateState(id,"D");
		}
		return 0;
	}

	@Override
	public int updateBatchApproval(String[] ids, String type) {
		int num = 0;
		for (int i = 0; i < ids.length; i++) {
			num += this.updateApproval(ids[i],type);
		}
		return num;
	}
	
	@Override
	public Map<String, Object> updateBatchSendApproval(String[] ids, String type) {
		int send = 0;
		int noSend = 0;
		int tmp = 0;
		for (int i = 0; i < ids.length; i++) {
			boolean flag = monthPlanRepository.beforeSendApprovalCheck(ids[i]);
			if (!flag) {
				noSend ++;
				continue;
			}
			tmp = monthPlanRepository.updateState(ids[i],"B");
			if (tmp == 1) {
				send++;
			}
		}
		return new Messager().put("send", send).put("noSend", noSend);
	}

}
