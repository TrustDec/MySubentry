package com.insplatform.module.teacher.service.impl;

import java.io.Serializable;
import java.util.*;

import javax.servlet.http.HttpServletRequest;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.curruser.UserSession;
import com.insframework.system.map.Condition;

import com.insplatform.module.teacher.model.Teacher;
import com.insplatform.module.teacher.repository.TeacherRepository;
import com.insplatform.module.teacher.service.TeacherService;

@Service
public class TeacherServiceImpl extends BaseServiceImpl<Teacher> implements TeacherService{
	
	@Autowired
	private TeacherRepository teacherRepository;

	@Override
	public BaseRepository<Teacher> getRepository() {		
		return teacherRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return teacherRepository.loadAllGrid(condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return teacherRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return teacherRepository.load(id);
	}
	
	@Override
	public void saveTeachers(String[] userIds,HttpServletRequest request) {
		List<String> teacherUserIds = teacherRepository.loadTeacherUserIds();
		for(String userId : userIds){
			if(!teacherUserIds.contains(userId)){
				Teacher teacher = new Teacher();
				CurrentUser user = UserSession.getCurrentUser(request);
				teacher.setCreateUserId(user.getId());
				teacher.setCreateUserName(user.getName());
				Date date = new Date();
				teacher.setCreateTime(date);
				teacher.setUpdateTime(date);
				
				teacher.setUserId(userId);
				teacherRepository.save(teacher);
			}
		}
	}
	
	@Override
	public void deleteByTIds(String[] userIds) {
		for (String teacherId : userIds) {
			Map<String, Object> list= teacherRepository.loadTeacherCheckIds(teacherId);
			if(list!=null){
				teacherRepository.deleteById(teacherId);
			};
		}
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public Teacher get(Serializable id) {		
		return teacherRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(Teacher entity) {	
		return teacherRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(Teacher entity) {		
		teacherRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		teacherRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		teacherRepository.deleteByIds(ids);
	}
	
	
	/**
	 * 加载审批通过教师信息Chooser
	 * @param request
	 * @param response
	 * @return
	 */
	@Override
	public Map<String, Object> loadAgreeTeacherGrid(Condition condition) {			
		return teacherRepository.loadAgreeTeacherGrid(condition);
	}

}
