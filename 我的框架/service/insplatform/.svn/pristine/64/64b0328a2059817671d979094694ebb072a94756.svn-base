package com.insplatform.module.trainingimplement.controller;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.insframework.system.base.controller.BaseController;
import com.insframework.system.context.App;
import com.insframework.system.map.Condition;
import com.insplatform.module.trainingimplement.model.TrainingPhoto;
import com.insplatform.module.trainingimplement.service.TrainingPhotoService;

@Controller
@RequestMapping("/px/trainingphoto")
public class TrainingPhotoController extends BaseController {

	@Autowired
	private TrainingPhotoService trainingPhotoService;

	/**
	 * 加载数据
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGrid")
	public @ResponseBody
	Map<String, Object> loadAllGrid(HttpServletRequest request,
			HttpServletResponse response) {
		Condition condition = this.getCondition(request,"id");
		return trainingPhotoService.loadAllGrid(condition);
	}

	/**
	 * 加载数据
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGridType")
	public @ResponseBody
	Map<String, Object> loadAllGridType(HttpServletRequest request,
			HttpServletResponse response) {
		Condition condition = this.getCondition(request,"id");
		return this.getMessager().success()
				.data(trainingPhotoService.loadAllGridType(condition));
	}

	/**
	 * 加载数据
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllList")
	public @ResponseBody
	Map<String, Object> loadAllList(HttpServletRequest request,
			HttpServletResponse response) {
		Condition condition = this.getCondition(request,"id");
		return this.getMessager().success()
				.data(trainingPhotoService.loadAllList(condition));
	}

	/**
	 * 加载单条数据
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody
	Map<String, Object> load(@RequestParam("id") String id) {
		return this.getMessager().success().data(trainingPhotoService.load(id));
	}

	/**
	 * 加载单条数据
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/loadType")
	public @ResponseBody
	Map<String, Object> loadType(@RequestParam("id") String id) {
		return this.getMessager().success()
				.data(trainingPhotoService.loadType(id));
	}

	/**
	 * 新增
	 * 
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")
	public @ResponseBody
	Map<String, Object> add(TrainingPhoto trainingphoto,
			HttpServletRequest request) {
		trainingPhotoService.save(trainingphoto,request);
		return this.getMessager().success();
	}

	/**
	 * 新增
	 * 
	 * @param dict
	 * @return
	 */
	@RequestMapping("/addType")
	public @ResponseBody
	Map<String, Object> addType(HttpServletRequest request) {
		String trainingSchemeId = request.getParameter("trainingSchemeId");
		String type = request.getParameter("type");
		String remark = request.getParameter("remark");
		trainingPhotoService.addType(trainingSchemeId, type, remark);
		return this.getMessager().success();
	}

	/**
	 * 编辑
	 * 
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")
	public @ResponseBody
	Map<String, Object> update(@RequestParam("id") String id,
			HttpServletRequest request) {
		TrainingPhoto trainingphoto = trainingPhotoService.get(id);
		this.bindObject(request, trainingphoto);
		trainingPhotoService.update(trainingphoto,request);
		return this.getMessager().success();
	}

	/**
	 * 编辑
	 * 
	 * @param dict
	 * @return
	 */
	@RequestMapping("/updateType")
	public @ResponseBody
	Map<String, Object> updateType(@RequestParam("id") String id,
			HttpServletRequest request) {
		String type = request.getParameter("type");
		String remark = request.getParameter("remark");
		trainingPhotoService.updateType(id, type, remark);
		return this.getMessager().success();
	}

	/**
	 * 删除
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")
	public @ResponseBody
	Map<String, Object> delete(HttpServletRequest request) {
		String[] ids = this.getSelectedItems(request);
		trainingPhotoService.deleteByIds(ids);
		return this.getMessager().success();
	}

	/**
	 * 删除
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/deleteType")
	public @ResponseBody
	Map<String, Object> deleteType(HttpServletRequest request) {
		String[] ids = this.getSelectedItems(request);
		trainingPhotoService.deleteType(ids);
		return this.getMessager().success();
	}
	
	/**
	 * 下载视频文件
	 * @param id
	 * @param response
	 */
	@RequestMapping("/downloadAttachment")	
	public void downloadVideo(@RequestParam("id") String id, HttpServletResponse response){
		TrainingPhoto trainingphoto = trainingPhotoService.get(id);
		String url = trainingphoto.getPhotoUrl();
		String path = App.FILE_SYS;
		path += url.replace(App.FILE_SYS_URL, "");
		downloadService.downloadFile(path, trainingphoto.getOriginalName(), response);
	}

}
