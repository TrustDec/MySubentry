package com.insplatform.module.trainingimplement.repository.impl;

import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.trainingimplement.model.TrainingUserRoster;
import com.insplatform.module.trainingimplement.repository.TrainingUserRosterRepository;


@Repository
public class TrainingUserRosterRepositoryImpl extends BaseRepositoryImpl<TrainingUserRoster> implements TrainingUserRosterRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.* from PX_TRAINING_USER_ROSTER t ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_TRAINING_USER_ROSTER t where 1=1 ";
		if(condition.containsKey("id"))
		{
			sql += " and t.training_scheme_id = ? ";
			condition.put("id", condition.get("id"));
		}
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> load(String id) {	
		String sql = "select t.* from PX_TRAINING_USER_ROSTER t where t.training_scheme_id = ? ";
		List<Map<String, Object>> list = jdbcAssistant.query(sql, new Object[]{id});
//		if("1".equals(map.get("sex")))
//		{
//			map.put("sex", "男");
//		}else
//		{
//			map.put("sex", "女");
//		}
		return list;
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public TrainingUserRoster get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TrainingUserRoster entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(TrainingUserRoster entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public void add(String id, String[] ids) {
		String str = "";
		for(int i = 0 ; i < ids.length ; i++)
		{
			str = str + "'" + ids[i] + "',";
		}
		str = str.substring(0, str.length() - 1);
		String sql = "select t.* from v_sys_user_info t where id in(" + str + ")";
		List<Map<String, Object>> list = jdbcAssistant.query(sql);
		
		String idsSql[] = new String[ids.length];
		for(int i = 0 ; i < ids.length ; i++)
		{
			idsSql[i] = "insert into PX_TRAINING_USER_ROSTER values((select sys_guid() from dual),'" + list.get(i).get("companyName") + "','','" + list.get(i).get("id") + "'," +
					"'" + list.get(i).get("name") + "','" + list.get(i).get("sex") + "','" + list.get(i).get("idCard") + "','" + list.get(i).get("birthday") + "'," +
					"'','" + list.get(i).get("phone") + "','" + list.get(i).get("edu") + "','','','" + list.get(i).get("duty") + "','" + id + "','','N','')";
		}
		
		jdbcAssistant.batchUpdate(idsSql);
	}

	@Override
	public void isChecking(String id, String[] ids, String statu) {
		if(ids.length == 0)
		{
			String sql = "update PX_TRAINING_USER_ROSTER set is_checking = '" + statu + "' where id = '" + id + "'";
			jdbcAssistant.update(sql);
		}
		else
		{
			String [] arrstr = new String[ids.length];
			for(int i = 0 ; i < arrstr.length ; i++)
			{
				arrstr[i] = "update PX_TRAINING_USER_ROSTER set is_checking = '" + statu + "' where id = '" + ids[i] + "'";
			}
			jdbcAssistant.batchUpdate(arrstr);
		}
	}

	@Override
	public void addOrUpadteUser(String id, String courseId) {
		String sqlRoster = "select t.user_id from px_training_user_roster t where t.training_scheme_id = '" + id + "' and t.is_checking = 'Y'";
		List<Map<String, Object>> mapRoster = jdbcAssistant.query(sqlRoster);

		String sqlTemp = "";
		
		Map<String,Object> map = new HashMap<String, Object>();
		
		for(int k = 0 ; k < mapRoster.size() ; k++)
		{
			sqlTemp = "select count(*) as num from px_training_roster_checking where course_id = '" + courseId + "' and training_roster = '" + mapRoster.get(k).get("userId") + "'";
			map = jdbcAssistant.queryOne(sqlTemp);
			if("0".equals(map.get("num") + ""))
			{
				sqlTemp = "insert into px_training_roster_checking values((select sys_guid() from dual),'" + id + "','" + courseId + "','" + mapRoster.get(k).get("userId") + "','0','0','')";
				jdbcAssistant.update(sqlTemp);
			}
		}
	}

	@Override
	public Map<String, Object> loadAllQueryClockGrid(Condition condition) {
//		String sql = "select a.*,b.course_id, b.statu from (select p.* from px_training_user_roster p " +
//				"where p.user_id in (select t.training_roster from px_training_roster_checking t where " +
//				"t.training_scheme_id = '" + condition.get("id") + "' and t.course_id = '" + condition.get("courseId") + "') and " +
//						"p.training_scheme_id = '" + condition.get("id") + "') a,px_training_roster_checking b";
//		String sql = "select p.*,'" + condition.get("courseId") + "' as course_id," +
//				"(select statu from px_training_roster_checking where training_scheme_id = '" + condition.get("id") + "' " +
//				"and course_id = '" + condition.get("courseId") + "') AS statu from px_training_user_roster p where p.user_id in" +
//				"(select t.training_roster from px_training_roster_checking t where t.training_scheme_id = '" + condition.get("id") + "' " +
//				"and t.course_id = '" + condition.get("courseId") + "') and p.training_scheme_id = '" + condition.get("id") + "'";
		String sql = "select tur.*,'" + condition.get("courseId") + "' as course_id,(select t.id from px_training_roster_checking t where t.training_scheme_id = '" + condition.get("id") + "'" +
				"and t.course_id = '" + condition.get("courseId") + "' and t.training_roster = tur.user_id) checking_id," +
				"(select t.result from px_training_roster_checking t where t.training_scheme_id = '" + condition.get("id") + "'" +
				"and t.course_id = '" + condition.get("courseId") + "' and t.training_roster = tur.user_id) result," +
				"(select t.statu from px_training_roster_checking t where t.training_scheme_id = '" + condition.get("id") + "'" +
				"and t.course_id = '" + condition.get("courseId") + "' and t.training_roster = tur.user_id) statu from px_training_user_roster tur " +
				"where tur.training_scheme_id = '" + condition.get("id") + "' and tur.is_checking = 'Y'";
		if(condition.containsKey("name"))
		{
			sql += " and tur.name like '%" + condition.get("name") + "%'";
		}
		return gridService.loadData(condition.getGridTransModel(), sql);
	}

	@Override
	public void isCheckingChecked(String id, String schemeId, String statu, String courseId) {
		String sql = "update px_training_roster_checking set statu = '" + statu + "' where training_roster = '" + id + "' and training_scheme_id = '" + schemeId + "' and course_id = '" + courseId + "'";
		jdbcAssistant.update(sql);
	}

	@Override
	public Map<String, Object> updateResult(String id, String result, String remark) {
		String sql = "update px_training_roster_checking set result = '" + result + "', remark = '" + remark + "' where id = '" + id + "'";
		jdbcAssistant.update(sql);
		sql = "select * from px_training_roster_checking where id = '" + id + "'";
		return jdbcAssistant.queryOne(sql);
	}

	@Override
	public Map<String, Object> loadData(String id) {
		String sql = "select * from px_training_roster_checking where id = '" + id + "'";
		return jdbcAssistant.queryOne(sql);
	}

	@Override
	public List<Map<String, Object>> loadAllListIsChecking(Condition condition) {
		String sql = "select a.*, p.name as user_group_name from (select t.* " +
				"from PX_TRAINING_USER_ROSTER t where t.training_scheme_id = '" + condition.get("id") + "' " +
				"and t.is_checking = 'Y') a , sys_dict p where a.user_group = p.id";
		return jdbcAssistant.query(sql);
	}

	@Override
	public void userGroup(Condition condition, String[] ids, String userGroup) {
		String sql[] = new String[ids.length];
		for(int i = 0 ; i < sql.length ; i++)
		{
			sql[i] = "update PX_TRAINING_USER_ROSTER set user_group = '" + userGroup + "' where id = '" + ids[i] + "'";
		}
		jdbcAssistant.batchUpdate(sql);
	}
}
