package com.insplatform.module.accidentcase.repository.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.insframework.common.utils.pager.Pager;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.accidentcase.model.AccidentCase;
import com.insplatform.module.accidentcase.repository.AccidentCaseRepository;

@Repository
public class AccidentCaseRepositoryImpl extends
		BaseRepositoryImpl<AccidentCase> implements AccidentCaseRepository {

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {
		String sql = "select t.id, t.name, t.create_user_name,t.update_time, t.digest, "
				+ "t.company_name, t.time, t.address, t.type, t.nature from PX_ACCIDENT_CASE t where 1=1";
		if (condition.containsKey("name")) {
			sql += " and t.name like ? ";
			condition.put("name", "%" + condition.get("name") + "%");
		}
		if (condition.containsKey("createUserName")) {
			sql += " and t.create_user_name like ? ";
			condition.put("createUserName",
					"%" + condition.get("createUserName") + "%");
		}
		if (condition.containsKey("type")) {
			sql += " and t.type like ? ";
			condition.put("type", "%" + condition.get("type") + "%");
		}
		if (condition.containsKey("address")) {
			sql += " and t.address like ? ";
			condition.put("address", "%" + condition.get("address") + "%");
		}
		if (condition.containsKey("timeEnd")) {
			sql += " and to_char(t.time,'yyyy-mm-dd') <= ? ";
			condition.put("timeEnd", condition.get("timeEnd"));
		}
		if (condition.containsKey("timeStart")) {
			sql += " and to_char(t.time,'yyyy-mm-dd') >= ? ";
			condition.put("timeStart", condition.get("timeStart"));
		}
		if (condition.containsKey("nature")) {
			sql += " and t.nature like ? ";
			condition.put("nature", "%" + condition.get("nature") + "%");
		}
		if (condition.containsKey("companyName")) {
			sql += " and t.company_name like ? ";
			condition.put("companyName", "%" + condition.get("companyName")
					+ "%");
		}
		sql += " order by t.update_time desc ";
		return gridService.loadData(condition.getGridTransModel(), sql,
				condition.valueArray());
	}

	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {
		String sql = "select t.* from PX_ACCIDENT_CASE t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}

	@Override
	public Map<String, Object> load(String id) {
		String sql = "select t.* from PX_ACCIDENT_CASE t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[] { id });
	}

	/**
	 * 重写父类get方法
	 */
	@Override
	public AccidentCase get(Serializable id) {
		return super.get(id);
	}

	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(AccidentCase entity) {
		return super.save(entity);
	}

	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(AccidentCase entity) {
		super.update(entity);
	}

	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {
		super.deleteById(id);
	}

	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {
		super.deleteByIds(ids);
	}

	@Override
	public Map<String, Object> loadAttachment(Condition condition) {
		String sql = "select t.accident_case_id, t.type, t.attachment_id ,p.id, p.name, q.name as Kpoint_name from px_accident_case_attachment t ,v_px_resource p, px_kpoint q where t.attachment_id = p.id and p.kpoint_id = q.id and t.accident_case_id = '"
				+ condition.get("accidentcaseId") + "' order by t.type";
		return gridService.loadData(condition.getGridTransModel(), sql);
	}

	@Override
	public void addAttachment(String id, String[] ids) {
		String[] sqlInsert = new String[ids.length];
		String type = "";
		if (!"".equals(ids[0].trim())) {
			for (int k = 0; k < ids.length; k++) {
				String sqlDelete = "delete from PX_ACCIDENT_CASE_ATTACHMENT where ATTACHMENT_ID = '"
						+ ids[k] + "' and accident_case_id = '" + id + "'";
				jdbcAssistant.update(sqlDelete);
			}
			for (int i = 0; i < ids.length; i++) {
				String sql = "select type from v_px_resource where id = '"
						+ ids[i] + "'";
				List<Map<String, Object>> list = jdbcAssistant.query(sql);
				Map<String, Object> map = list.get(0);
				type = (String) map.get("type");
				sqlInsert[i] = "insert INTO PX_ACCIDENT_CASE_ATTACHMENT values('"
						+ id + "','" + ids[i] + "','" + type + "')";
			}
			jdbcAssistant.batchUpdate(sqlInsert);
		}
	}

	@Override
	public void deleteAttachment(String id, String[] ids) {
		if (!"".equals(ids[0].trim())) {
			for (int k = 0; k < ids.length; k++) {
				String sqlDelete = "delete from PX_ACCIDENT_CASE_ATTACHMENT where ATTACHMENT_ID = '"
						+ ids[k] + "' and accident_case_id = '" + id + "'";
				jdbcAssistant.update(sqlDelete);
			}
		}
	}

	@Override
	public Map<String, Object> loadAccidentCaseListMobile(String idx) {
		Pager<Map<String, Object>> pager = new Pager<Map<String,Object>>(0, Integer.parseInt(idx), 20);
		String sql = "select t.id,t.name from px_accident_case t order by t.create_time desc";
		return jdbcAssistant.queryAsPager(sql, pager).toMap();
	}

	@Override
	public List<Map<String, Object>> loadAccidentCaseMobile(String id) {
		String sql = "";
		sql = "select count(*) as num from px_accident_case_attachment where accident_case_id = '" + id + "'";
		String num = jdbcAssistant.queryOne(sql).get("num") + "";
		if("0".equals(num))
		{
			sql = "select a.*,p.attachment_id,p.type as ptype from (select t.* from px_accident_case t where " +
					"t.id = '" + id + "') a left join  px_accident_case_attachment p " +
					"on a.id = p.accident_case_id order by a.create_time desc,p.type";
		}
		else{
			sql = "select a.*,b.name as bname from (select t.*,p.attachment_id,p.type as ptype from px_accident_case t " +
				  "left join  px_accident_case_attachment p on t.id = '" + id + "' and t.id = p.accident_case_id " +
				  "order by t.create_time desc,p.type) a ,v_px_resource b where a.attachment_id = b.id";
		}
		return jdbcAssistant.query(sql);
	}
}
