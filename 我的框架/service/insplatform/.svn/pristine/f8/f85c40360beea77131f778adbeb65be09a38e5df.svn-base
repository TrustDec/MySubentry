package com.insplatform.module.testpaper.service.impl;

import java.io.Serializable;
import java.util.*;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.map.Condition;

import com.insplatform.module.testpaper.model.TestPaperKpoint;
import com.insplatform.module.testpaper.repository.TestPaperKpointRepository;
import com.insplatform.module.testpaper.service.TestPaperKpointService;

@Service
public class TestPaperKpointServiceImpl extends BaseServiceImpl<TestPaperKpoint> implements TestPaperKpointService{
	
	@Autowired
	private TestPaperKpointRepository testPaperKpointRepository;

	@Override
	public BaseRepository<TestPaperKpoint> getRepository() {		
		return testPaperKpointRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return testPaperKpointRepository.loadAllGrid(condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return testPaperKpointRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return testPaperKpointRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public TestPaperKpoint get(Serializable id) {		
		return testPaperKpointRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TestPaperKpoint entity) {	
		return testPaperKpointRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(TestPaperKpoint entity) {		
		testPaperKpointRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		testPaperKpointRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		testPaperKpointRepository.deleteByIds(ids);
	}

	@Override
	public Map<String, Object> loadAllTreeGridBySelectKpoint(Condition condition) {
		// TODO Auto-generated method stub
		List<Map<String, Object>> data = testPaperKpointRepository.loadAllTreeGridBySelectKpoint(condition);
		List<Map<String, Object>> treeData = buildTreeData(data);
		
		
		//给菜数据加图标
		for(Map<String, Object> node : treeData){
			if (node.get("sortNumber")==null) {
				node.put("checked", false);
			}else{
				node.put("checked", null);
			}
		}
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("children", treeService.parse(treeData, null, true, false));
		return map;
	}
	
	/**
	 * 组合树
	 * @param data
	 * @param chekced	是否可以复选
	 * @return
	 */
	private List<Map<String, Object>> buildTreeData(List<Map<String, Object>> data){
		//使用set去重
		Set<Map<String, Object>> set = new HashSet<Map<String, Object>>();
		//先将集合加入set中，保证数据完整性
		set.addAll(data);
		List<Map<String, Object>> finalList = new ArrayList<Map<String, Object>>();		
		finalList.addAll(set);	
		return finalList;
	}

	@Override
	public void addKpoint(Condition condition) {
		testPaperKpointRepository.addKpoint(condition);
		
	}

	@Override
	public Map<String, Object> loadAllKpintSelect(Condition condition) {
		// TODO Auto-generated method stub
		return testPaperKpointRepository.loadAllKpintSelect(condition);
	}

	@Override
	public int loadAllKpoint(Condition condition) {
		// TODO Auto-generated method stub
		return testPaperKpointRepository.loadAllKpoint(condition);
	}

	@Override
	public void delete(String[] ids) {
		testPaperKpointRepository.delete(ids);
		
	}

}
