package com.insplatform.module.yearplan.repository.impl;

import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.insframework.common.spring.jdbc.mapper.ValueMapper;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;
import com.insplatform.module.yearplan.model.YearPlan;
import com.insplatform.module.yearplan.repository.YearPlanRepository;


@Repository
public class YearPlanRepositoryImpl extends BaseRepositoryImpl<YearPlan> implements YearPlanRepository{

	@Override
	public Map<String, Object> loadAllGridByNeedApprove(Condition condition) {	
		String sql = "select * from (select ROW_NUMBER() OVER(PARTITION BY t.year ORDER BY t.version_num DESC) rnws," +
				" t.id,t.year_demand_id, " +
				" case when t.budget=0 then null else t.budget end budget, t.state, t.state statex," +
				" t.create_user_id, t.create_user_name, t.create_time," +
				" t.update_time, t.title, t.year, t.version_num," +
				" (select case when count(distinct mpj.project_id)=0 then null else count(distinct mpj.project_id) end from px_year_plan_month m" +
				" left join px_year_plan_month_project mpj on mpj.year_plan_month_id = m.id where m.year_plan_id = t.id) project_number," +
				" (select sum(mpj.person_number) from px_year_plan_month m" +
				" left join px_year_plan_month_project mpj on mpj.year_plan_month_id = m.id where m.year_plan_id = t.id) person_number" +
				" from px_year_plan t) t where rnws = 1 and (t.state = 'B' or t.state = 'C')";
		
//		Condition condition = this.getCondition(request,"year","title","state",
//				"createUserName","startCreateTime","endCreateTime");
		
		if (condition.containsKey("year")) {
			sql += " and t.year like ?";
			condition.put("year","%"+condition.get("year")+"%");
		}
		if (condition.containsKey("title")) {
			sql += " and t.title like ?";
			condition.put("title","%"+condition.get("title")+"%");
		}
		if (condition.containsKey("state")) {
			sql += " and t.state = ?";
		}
		if (condition.containsKey("createUserName")) {
			sql += " and t.create_user_name like ?";
			condition.put("createUserName","%"+condition.get("createUserName")+"%");
		}
		if (condition.containsKey("startCreateTime")) {
			sql += " and t.create_time >= to_date( ?, 'yyyy-mm-dd hh24:mi:ss')";
		}
		if (condition.containsKey("endCreateTime")) {
			sql += " and t.create_time -1 < to_date( ?,'yyyy-mm-dd hh24:mi:ss')";
		}
		
		sql += " order by t.update_time desc";
		
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray(),new ValueMapper() {
			
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				approveState(record);
				
				return RETURN_CODE.NEXT;
			}
		});
	}
	private void approveState(Map<String, Object> record) {
		String state = record.get("state")+"";
		if ("A".equals(state)) {
			record.put("state", "未发送审批");
		}else if ("B".equals(state)) {
			record.put("state", "审批中");
		}else if ("C".equals(state)) {
			record.put("state", "审批通过");
		}else if ("D".equals(state)) {
			record.put("state", "审批不通过");
		}
	}

	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select * from (select ROW_NUMBER() OVER(PARTITION BY t.year ORDER BY t.version_num DESC) rnws," +
				" t.id, t.year_demand_id, " +
				" case when t.budget=0 then null else t.budget end budget, t.state, t.state statex," +
				" t.create_user_id, t.create_user_name, t.create_time," +
				" t.update_time, t.title, t.year, t.version_num," +
				" (select case when count(distinct mpj.project_id)=0 then null else count(distinct mpj.project_id) end from px_year_plan_month m" +
				" left join px_year_plan_month_project mpj on mpj.year_plan_month_id = m.id where m.year_plan_id = t.id) project_number," +
				" (select sum(mpj.person_number) from px_year_plan_month m" +
				" left join px_year_plan_month_project mpj on mpj.year_plan_month_id = m.id where m.year_plan_id = t.id) person_number" +
				" from px_year_plan t) t where rnws = 1 ";
		
//		Condition condition = this.getCondition(request,"year","title","state",
//				"createUserName","startCreateTime","endCreateTime");
		
		if (condition.containsKey("year")) {
			sql += " and t.year like ?";
			condition.put("year","%"+condition.get("year")+"%");
		}
		if (condition.containsKey("title")) {
			sql += " and t.title like ?";
			condition.put("title","%"+condition.get("title")+"%");
		}
		if (condition.containsKey("state")) {
			sql += " and t.state = ?";
		}
		if (condition.containsKey("createUserName")) {
			sql += " and t.create_user_name like ?";
			condition.put("createUserName","%"+condition.get("createUserName")+"%");
		}
		if (condition.containsKey("startCreateTime")) {
			sql += " and t.create_time >= to_date( ?, 'yyyy-mm-dd hh24:mi:ss')";
		}
		if (condition.containsKey("endCreateTime")) {
			sql += " and t.create_time -1 < to_date( ?,'yyyy-mm-dd hh24:mi:ss')";
		}
		
		sql += " order by t.update_time desc";
		
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray(),new ValueMapper() {
			
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				approveState(record);
				return RETURN_CODE.NEXT;
			}
		});
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_YEAR_PLAN t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_YEAR_PLAN t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public YearPlan get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(YearPlan entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(YearPlan entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public Map<String, Object> loadUsableYearDemand(Condition condition) {
		String sql = "select case" +
				" when sysdate < t.write_start_time then 'NWRITE'" +
				" when sysdate -1 < t.write_end_time then 'WRITE'" +
				" when sysdate -1 < statistical_end_time then 'GSHZ'" +
				" else 'JTHZ' end state," +
				" t.id, t.year, t.title, to_char(t.write_start_time,'yyyy-MM-dd') as write_start_time," +
				" to_char(t.write_end_time,'yyyy-MM-dd') as write_end_time," +
				" to_char(t.statistical_end_time,'yyyy-MM-dd') as statistical_end_time," +
				" t.release, t.create_user_id, t.create_user_name, t.create_time, t.update_time, t.details" +
				" from px_year_demand t where t.id not in (select nvl(yp.year_demand_id,-1) from px_year_plan yp)";
		//"year","title","release","createUserName"

		if (condition.containsKey("year")) {
			sql += " and t.year like ?";
			condition.put("year","%"+condition.get("year")+"%");
		}
		if (condition.containsKey("title")) {
			sql += " and t.title like ?";
			condition.put("title","%"+condition.get("title")+"%");
		}
		if (condition.containsKey("createUserName")) {
			sql += " and t.create_user_name like ?";
			condition.put("release","%"+condition.get("createUserName")+"%");
		}
		
		
		sql += " order by t.update_time";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}

	@Override
	public boolean whetherItCanBeDeleted(String id) {
		YearPlan yp = super.get(id);
		return "A".equals(yp.getState())?true:false;
	}

	@Override
	public boolean beforeSendApprovalCheck(String id) {
		YearPlan yp = super.get(id);
		if (yp.getBudget()==0) {
			return false;
		}
		String sql = "select t.id from px_year_plan_month_project t" +
				" inner join px_year_plan_month mp on mp.year_plan_id = ? " +
				" and mp.id = t.year_plan_month_id";
		Map<String, Object> map = jdbcAssistant.queryOne(sql, new Object[]{id});
		if (map==null) {
			return false;
		}
		return true;
	}

	@Override
	public int updateState(String id, String state) {
		String sql = "update px_year_plan set state = ? where id = ?";
		return jdbcAssistant.update(sql, new Object[]{state, id});
	}
	@Override
	public Serializable createCopy(String id, CurrentUser user) {
		YearPlan yearPlan = super.get(id);
		if (yearPlan==null) {
			return null;
		}
		//创建并保存副本年度计划
		yearPlan.setState("A");
		Date date = new Date();
		yearPlan.setCreateTime(date);
		yearPlan.setUpdateTime(date);
		yearPlan.setCreateUserId(user.getId());
		yearPlan.setCreateUserName(user.getName());
		yearPlan.setParentId(id);
		
		Map<String, Object> map = getMaxVersionNum(yearPlan.getYear());
		if (map!=null&&map.get("versionNum")!=null) {
			yearPlan.setVersionNum(Integer.parseInt(map.get("versionNum")+"")+1);
		}else{
			yearPlan.setVersionNum(1);
		}
		return super.save(yearPlan);
	}
	private Map<String, Object> getMaxVersionNum(int id) {
		String sql = "select max(t.version_num) version_num from px_year_plan t where t.year = ?";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	@Override
	public boolean beforeSaveCheckYear(int year) {
		String sql = "select t.id from px_year_plan t where t.year = ?";
		return jdbcAssistant.queryOne(sql, new Object[]{year})==null?true:false;
	}
	@Override
	public Map<String, Object> getTheLatestVersion(int year) {
		String sql = "select t.* from px_year_plan t where t.year = ? order by t.version_num desc";
		return jdbcAssistant.queryOne(sql, new Object[]{year});
	}
	
	@Override
	public int getYearStudyPersonNumber(String yearMonthId) {
		String sql = "select sum(mpj.person_number) person_number from px_year_plan t" +
				" left join px_year_plan_month pm on pm.year_plan_id = t.id" +
				" left join px_year_plan_month_project mpj on mpj.year_plan_month_id = pm.id" +
				" where t.id = ?";
		Map<String, Object> map = jdbcAssistant.queryOne(sql,new Object[]{yearMonthId});
		if (map!=null&&map.get("personNumber")!=null) {
			return Integer.parseInt(map.get("personNumber").toString());
		}
		return 0;
	}
	
}
