package com.insplatform.module.trainingimplement.repository.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.web.multipart.MultipartFile;

import com.insframework.component.service.file.UploadService;
import com.insframework.component.service.file.bean.FileBean;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.trainingimplement.model.TrainingInformAttachment;
import com.insplatform.module.trainingimplement.repository.TrainingInformAttachmentRepository;


@Repository
public class TrainingInformAttachmentRepositoryImpl extends BaseRepositoryImpl<TrainingInformAttachment> implements TrainingInformAttachmentRepository{

	@Autowired
	private UploadService uploadService;
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.*, p.name as training_scheme from PX_TRAINING_INFORM_ATTACHMENT t, px_training_scheme p where 1=1 " +
				"and t.training_scheme_id = p.id";
		if(condition.containsKey("id"))
		{
			sql += "and t.training_scheme_id = ?";
			condition.put("id", condition.get("id"));
		}
		if(condition.containsKey("name"))
		{
			sql += "and t.name like ?";
			condition.put("name", "%" + condition.get("name") + "%");
		}
		if(condition.containsKey("trainScheme"))
		{
			sql += "and t.training_scheme like ?";
			condition.put("trainScheme", "%" + condition.get("trainScheme") + "%");
		}
		sql += " order by t.create_time desc";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		
		String sql = "select t.* from PX_TRAINING_INFORM_ATTACHMENT t where 1=1 ";
		if(condition.containsKey("id"))
		{
			sql += "and t.training_scheme_id = ?";
			condition.put("id", condition.get("id"));
		}
		if(condition.containsKey("name"))
		{
			sql += "and t.name like ?";
			condition.put("name", "%" + condition.get("name") + "%");
		}
		sql += "order by t.create_time desc";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_TRAINING_INFORM_ATTACHMENT t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public TrainingInformAttachment get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TrainingInformAttachment entity,HttpServletRequest request) {
		
	MultipartFile file = uploadService.getMultipartFile(request, "file");
	entity.setOriginalName(file.getOriginalFilename());
	FileBean fileBean = null;
	try {
		fileBean = uploadService.uploadFile(file);			
	} catch (Exception e) {		
		e.printStackTrace();
	}
	entity.setAttachmentUrl(fileBean.getUrl());
	return super.save(entity);
	}
		
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public void update(TrainingInformAttachment trainingInformAttachment,
			HttpServletRequest request) {
		
		MultipartFile file = uploadService.getMultipartFile(request, "file");
		if(file != null && file.getSize() > 0){
			trainingInformAttachment.setOriginalName(file.getOriginalFilename());			
			FileBean fileBean = null;
			try {
				fileBean = uploadService.uploadFile(file);			
			} catch (Exception e) {		
				e.printStackTrace();
			}
			trainingInformAttachment.setAttachmentUrl(fileBean.getUrl());			
		}
		super.update(trainingInformAttachment);
		
	}

	@Override
	public void isRelease(String id) {
		String sql = "select t.is_release from PX_TRAINING_INFORM_ATTACHMENT t where id = '" + id + "'";
		String isRelease = jdbcAssistant.queryAsString(sql);
		if("N".equals(isRelease))
		{
			sql = "update PX_TRAINING_INFORM_ATTACHMENT set is_release = 'Y' where id = '" + id + "'";
		}
		else
		{
			sql = "update PX_TRAINING_INFORM_ATTACHMENT set is_release = 'N' where id = '" + id + "'";
		}
		jdbcAssistant.update(sql);
	}

	@Override
	public Map<String, Object> loadAttachment(String id) {
		String sql = "select t.* from PX_TRAINING_INFORM_ATTACHMENT t where t.training_scheme_id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
}
