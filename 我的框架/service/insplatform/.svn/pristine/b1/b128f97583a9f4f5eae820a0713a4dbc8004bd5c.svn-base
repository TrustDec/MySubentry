package com.insplatform.module.trainingplan.repository.impl;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.*;

import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.stereotype.Repository;

import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insplatform.module.trainingplan.model.TrainingPlan;
import com.insplatform.module.trainingplan.repository.TrainingPlanRepository;

import com.insframework.system.map.Condition;


@Repository
public class TrainingPlanRepositoryImpl extends BaseRepositoryImpl<TrainingPlan> implements TrainingPlanRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String currentUserId = condition.getCurrentUser().getId();
		String sql = "SELECT t.* FROM PX_TRAINING_PLAN t WHERE t.COMPANY_ID =(SELECT v.COMPANY_ID FROM V_SYS_USER_INFO v WHERE v.ID='"+currentUserId+"' AND ROWNUM=1) ";
		if(condition.containsKey("pxAddress")){
			sql += " and t.PX_ADDRESS like ? ";
			condition.put("pxAddress", "%" + condition.get("pxAddress") + "%" );
		}		
		if(condition.containsKey("planName")){
			sql += " and t.PLAN_NAME like ? ";
			condition.put("planName", "%" + condition.get("planName") + "%" );
		}
		if(condition.containsKey("trainingProject")){
			sql += " and t.TRAINING_PROJECT like ? ";
			condition.put("trainingProject", "%" + condition.get("trainingProject") + "%" );
		}
		if(condition.containsKey("sponsor")){
			sql += " and t.SPONSOR like ? ";
			condition.put("sponsor", "%" + condition.get("sponsor") + "%" );
		}
		if(condition.containsKey("pxYear")){
			sql += " and t.PX_YEAR = ? ";
		}
		if(condition.containsKey("pxMonth")){
			sql += " and t.PX_MONTH = ? ";
		}
		sql += " order by t.create_time desc ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_TRAINING_PLAN t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_TRAINING_PLAN t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public TrainingPlan get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TrainingPlan entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(TrainingPlan entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public void addWithCompanyName(final TrainingPlan entity) {
		String sql = "INSERT INTO PX_TRAINING_PLAN (ID,CREATE_USER_ID,CREATE_USER_NAME,CREATE_TIME,UPDATE_TIME,PX_YEAR,PX_MONTH,PX_MODE,SPONSOR_TYPE,SPONSOR,PX_ADDRESS,PX_NUM,PX_CLASS,PX_MONEY,MONEY_TYPE,PX_EFFECT,REMARK,PROJECT_ID,TRAINING_TYPE,TRAINING_PROJECT,TRAINING_CONTENT,TRAINING_PERSON,PLAN_NAME,COMPANY_ID,COMPANY_NAME) SELECT ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,COMPANY_ID,COMPANY_NAME FROM V_SYS_USER_INFO where ID=? ";
		jdbcAssistant.update(sql, new PreparedStatementSetter(){

			@Override
			public void setValues(PreparedStatement ps) throws SQLException {
				ps.setString(1, TextUtil.getUUID());
				ps.setString(2, entity.getCreateUserId());
				ps.setString(3, entity.getCreateUserName());
				ps.setTimestamp(4, new Timestamp(entity.getCreateTime().getTime()));
				ps.setTimestamp(5, new Timestamp(entity.getCreateTime().getTime()));
				ps.setDouble(6, entity.getPxYear());
				ps.setDouble(7, entity.getPxMonth());
				ps.setString(8, entity.getPxMode());
				ps.setString(9, entity.getSponsorType());
				ps.setString(10, entity.getSponsor());
				ps.setString(11, entity.getPxAddress());
				ps.setDouble(12, entity.getPxNum());
				ps.setDouble(13, entity.getPxClass());
				ps.setDouble(14, entity.getPxMoney());
				ps.setString(15, entity.getMoneyType());
				ps.setString(16, entity.getPxEffect());
				ps.setString(17, entity.getRemark());
				ps.setString(18, entity.getProjectId());
				ps.setString(19, entity.getTrainingType());
				ps.setString(20, entity.getTrainingProject());
				ps.setString(21, entity.getTrainingContent());
				ps.setString(22, entity.getTrainingPerson());
				ps.setString(23, entity.getPlanName());
				
				ps.setString(24, entity.getCreateUserId());
			}});
	}

	@Override
	public boolean beforeInsertCheck(String id, String year, String month) {
		String sql = "SELECT COUNT(1) FROM PX_TRAINING_PLAN a WHERE a.px_year=? and a.px_month=? and a.company_id=(SELECT COMPANY_ID FROM V_SYS_USER_INFO WHERE ID=? AND ROWNUM=1)";
		int count = jdbcAssistant.queryAsInt(sql,new String[]{year,month,id});
		if(count > 0) return true;
		return false;
	}

	@Override
	public boolean beforeUpdAndDelCheck(String[] planIds) {
		String sql = "SELECT COUNT(1) FROM PX_TRAINING_ACCOUNT a WHERE a.PLAN_ID IN (";
		for (int i=0;i<planIds.length;i++) {
			sql += "?,";
		}
		sql = sql.substring(0, sql.length()-1);
		sql +=")";
		int count = jdbcAssistant.queryAsInt(sql,planIds);
		if(count > 0) return true;
		return false;
	}
	
}
