package com.insplatform.system.authz.repository.impl;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.map.Condition;
import com.insplatform.system.authz.model.Authz;
import com.insplatform.system.authz.repository.AuthzRepository;
import com.insplatform.system.role.repository.RoleRepository;

@Repository
public class AuthzRepositoryImpl extends BaseRepositoryImpl<Authz> implements AuthzRepository{	
	
	@Autowired
	private RoleRepository roleRepository;
	
	@Override
	public void addAuthzMenu(String menuId) {	
		Authz authz = new Authz();		
		authz.setType("MENU");
		String authzId = (String) super.save(authz);
		String sql = "insert into sys_authz_menu (authz_id, menu_id) values ('"+authzId+"', '"+menuId+"')";		
		jdbcAssistant.update(sql);		
	}

	@Override
	public void addAuthzOperate(String operateId) {
		Authz authz = new Authz();		
		authz.setType("OPERATE");
		String authzId = (String) super.save(authz);
		String sql = "insert into sys_authz_operate (authz_id, operate_id) values ('"+authzId+"', '"+operateId+"')";		
		jdbcAssistant.update(sql);		
	}
	
	@Override
	public List<String> loadUserAuthzIds(String userId) {
		String sql = "select authz_id from SYS_USER_AUTHZ_REL where user_id = '"+userId+"'";
		return jdbcAssistant.queryAsList(sql, String.class, null);
	}

	@Override
	public List<String> loadRoleAuthzIds(String roleId) {
		String sql = "select authz_id from SYS_ROLE_AUTHZ_REL where role_id = '"+roleId+"'";
		return jdbcAssistant.queryAsList(sql, String.class, null);
	}
	
	@Override
	public List<String> loadUserAllAuthzIds(String userId) {
		List<String> userRoleIds = roleRepository.loadUserRoleIds(userId);
		Set<String> authzIds = new HashSet<String>();
		authzIds.addAll(loadUserAuthzIds(userId));
		for(String roleId : userRoleIds){
			authzIds.addAll(loadRoleAuthzIds(roleId));
		}	
		List<String> authzIdsFinal = new ArrayList<String>();
		authzIdsFinal.addAll(authzIds);
		return authzIdsFinal;
	}
		
	
	@Override
	public List<Map<String, Object>> loadAllAuthzResource(Condition condition) {
		String sql = "select v.* from V_SYS_AUTHZ_RESOURCES v where 1=1 ";
		if(condition.containsKey("enabled")){
			sql += " and v.enabled = 'Y'";
		}
		return jdbcAssistant.query(sql);
	}
	
	@Override
	public List<Map<String, Object>> loadUserAllAuthzResource(String userId) {
		List<String> userAuthzIds = loadUserAllAuthzIds(userId);
		String sql = "select v.* from V_SYS_AUTHZ_RESOURCES v " +
						"where v.enabled='Y' and v.authz_id in "+TextUtil.tansferListtoSqlString(userAuthzIds)+"";
		return jdbcAssistant.query(sql);
	}
	
	@Override
	public void addRoleAuthz(String roleId, String... authzIds) {
		if(authzIds.length > 0){
			String [] sqls = new String[authzIds.length];
			for(int i=0; i<authzIds.length; i++){
				sqls[i] = "insert into SYS_ROLE_AUTHZ_REL values ('"+roleId+"', '"+authzIds[i]+"') ";
			}		
			jdbcAssistant.batchUpdate(sqls);	
		}
			
	}

	@Override
	public void deleteRoleAuthz(String roleId, String... authzIds) {
		String sql = "delete from SYS_ROLE_AUTHZ_REL where role_id = '"+roleId+"' ";
		//如果权限id存在，则删除相关权限
		if(authzIds.length > 0){
			String[] sqls = new String[authzIds.length];
			for(int i=0; i<authzIds.length; i++){
				sqls[i] = sql + " and authz_id = '"+authzIds[i]+"' ";				
			}
			jdbcAssistant.batchUpdate(sqls);
		}
		//如果权限id不存在，删除此角色的所有权限
		else{			
			jdbcAssistant.update(sql);
		}
	}

	@Override
	public void addUserAuthz(String userId, String... authzIds) {
		if(authzIds.length > 0){
			String [] sqls = new String[authzIds.length];
			for(int i=0; i<authzIds.length; i++){
				sqls[i] = "insert into SYS_USER_AUTHZ_REL values ('"+userId+"', '"+authzIds[i]+"') ";
			}
			jdbcAssistant.batchUpdate(sqls);		
		}		
	}

	@Override
	public void deleteUserAuthz(String userId, String... authzIds) {
		String sql = "delete from SYS_USER_AUTHZ_REL where user_id = '"+userId+"' ";
		//如果权限id存在，则删除相关权限
		if(authzIds.length > 0){
			String[] sqls = new String[authzIds.length];
			for(int i=0; i<authzIds.length; i++){
				sqls[i] = sql + " and authz_id = '"+authzIds[i]+"' ";				
			}
			jdbcAssistant.batchUpdate(sqls);
		}
		//如果权限id不存在，删除此用户的所有权限
		else{			
			jdbcAssistant.update(sql);
		}		
	}

	@Override
	public Map<String, Object> loadUserOperateMap(String userId) {
		List<Map<String, Object>> resources = loadUserAllAuthzResource(userId);
		return getOperateMapByResourceList(resources);
	}

	@Override
	public Map<String, Object> loadAllOperateMap(Condition condition) {
		List<Map<String, Object>> resources = loadAllAuthzResource(condition);
		return getOperateMapByResourceList(resources);
	}	
	
	private Map<String, Object> getOperateMapByResourceList(List<Map<String, Object>> resources){
		Map<String, Object> finalMap = new HashMap<String, Object>();
		for(Map<String, Object> resource : resources){
			String type = resource.get("type").toString();
			if("OPERATE".equalsIgnoreCase(type) 
					&& resource.get("code") != null){
				Map<String, String> map = new HashMap<String, String>();
				map.put("resourcePath", resource.get("resourcePath").toString());
				map.put("name", resource.get("name").toString());
				finalMap.put(resource.get("code").toString(), map);
			}
		}
		return finalMap;
	}

	@Override
	public void deleteAuthzByMenuId(String menuId) {
		String sql = "delete from SYS_AUTHZ where type='MENU' and id in (select authz_id from SYS_AUTHZ_MENU where menu_id = '"+menuId+"')";
		jdbcAssistant.update(sql);
	}

	@Override
	public void deleteAuthzByOperateId(String operateId) {
		String sql = "delete from SYS_AUTHZ where type='OPERATE' and id in (select authz_id from SYS_AUTHZ_OPERATE where operate_id = '"+operateId+"')";
		jdbcAssistant.update(sql);
	}

	

}
