package com.insplatform.system.user.service;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.common.spring.jdbc.JdbcAssistant;
import com.insframework.common.utils.TextUtil;
import com.insframework.system.curruser.CurrentUser;
import com.insplatform.system.organization.repository.OrganizationRepository;
import com.insplatform.system.user.UserBizLevelConstant;
import com.insplatform.system.user.repository.UserRepository;

/**
 * 用户业务数据权限
 * @author Administrator
 *
 */
@Service
public class UserBizDataAuthzService {
	
	@Autowired
	private OrganizationRepository organizationRepository;
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private JdbcAssistant jdbcAssistant;
	
	/**
	 * 拼接sql语句，加入用户权限过滤
	 * @param sql
	 * @param field
	 * @param user
	 * @return
	 */
	public String buildUserBizDataAuthzUserSql(String sql, String field, CurrentUser user){			
		return buildUserBizDataAuthzUserSql(sql, field, user, null);
	}
	
	public String buildUserBizDataAuthzUserSql(String sql, String field, CurrentUser user, String orSql){		
		int authzLevel = user.getBizDataLevel();
		if(!user.getIsAdmin() && authzLevel != UserBizLevelConstant.ALL.getValue()){
			Collection<String> userIds = loadUserBizDataAuthzUsers(user, authzLevel);
			sql += " and ( (" + field + " in " + TextUtil.tansferListtoSqlString(userIds) + ") or (" + field + " is null) " + (orSql==null?"":orSql) + " ) ";
		}
		return sql;
	}
	
	/**
	 * 拼接sql语句，加入机构权限过滤（一般不会用到）
	 * @param sql
	 * @param field
	 * @param user
	 * @return
	 */	
	public String buildUserBizDataAuthzOrgSql(String sql, String field, CurrentUser user){		
		int authzLevel = user.getBizDataLevel();
		if(!user.getIsAdmin() && authzLevel != UserBizLevelConstant.ALL.getValue()){
			Collection<String> orgIds = loadUserBizDataAuthzOrgs(user, authzLevel);
			sql += " and ( (" + field + " in " + TextUtil.tansferListtoSqlString(orgIds) + ") or (" + field + " is null) ) ";
		}
		return sql;
	}
	
	public boolean checkUserHasOrgAuthz(String orgId, CurrentUser user){
		
		if(user.getIsAdmin()){
			return true;
		}
		
		int authzLevel = loadUserBizLevel(user.getId());
		if(authzLevel == UserBizLevelConstant.ALL.getValue()){
			return true;
		}
		
		Collection<String> orgs = loadUserBizDataAuthzOrgs(user, authzLevel);
		if(orgs.contains(orgId)){
			return true;
		}
		
		return false;
		
	}
	
	/**
	 * 获取用户的数据权限级别
	 * @param userId
	 * @return
	 */	
	public int loadUserBizLevel(String userId){
		String sql = "select count(1) from SYS_USER_BIZ_DATA where user_id = '"+userId+"'";
		int count = jdbcAssistant.queryAsInt(sql);
		if(count == 0){
			sql = "insert into SYS_USER_BIZ_DATA values ('"+TextUtil.getUUID()+"', '"+userId+"', 1)";
			jdbcAssistant.update(sql);
		}
		sql = "select authz from SYS_USER_BIZ_DATA where user_id = '"+userId+"'";
		return jdbcAssistant.queryAsInt(sql);
	}
	
	
	
	/**
	 * 获取用户可访问其数据的用户ID集合
	 * @param userId
	 * @return
	 */
	public List<String> loadUserBizUsers(String userId) {
		String sql = "select allow_user_id from SYS_USER_BIZ_DATA_USERS where user_id = '"+userId+"'";
		List<String> userIds = jdbcAssistant.queryAsList(sql, String.class, null);		
		return userIds;
	}	
	
	/**
	 * 获取用户可访问其数据的机构ID集合（包含子机构）
	 * @param userId
	 * @return
	 */
	public List<String> loadUserBizOrgs(String userId, boolean includeChildren) {
		Set<String> set = new HashSet<String>();
		
		String sql = "select allow_org_id from SYS_USER_BIZ_DATA_ORGS where user_id = '"+userId+"'";
		List<String> orgIds = jdbcAssistant.queryAsList(sql, String.class, null);
		set.addAll(orgIds);
		
		if(includeChildren){			
			for(String orgId : orgIds){
				sql = "select id from SYS_ORGANIZATION start with id = '"+orgId+"' connect by prior id = parent_id";
				set.addAll(jdbcAssistant.queryAsList(sql, String.class, null));
			}
		}
		
		List<String> finalList = new ArrayList<String>();
		finalList.addAll(set);
		return finalList;
	}
	
	/**
	 * 获取用户真正有权限的用户id集合
	 * @param user
	 * @param authzLevel
	 * @return
	 */
	private Collection<String> loadUserBizDataAuthzUsers(CurrentUser user, int authzLevel){	
		
		Set<String> set = new HashSet<String>();
		
		//加入有权限的用户
		List<String> userBizUsers = loadUserBizUsers(user.getId());
		set.addAll(userBizUsers);
		
		//加入有权限的部门的用户
		List<String> userBizOrgs = loadUserBizOrgs(user.getId(), true);
		set.addAll(userRepository.loadUserByOrganizationIds(userBizOrgs));			
		
		if(authzLevel == UserBizLevelConstant.MYSELF.getValue()){
			//加入自己
			set.add(user.getId());
		}else if(authzLevel == UserBizLevelConstant.DEPTARTMENT.getValue()){
			//加入自己部门下的用户
			List<String> orgIds = new ArrayList<String>();
			orgIds.add(user.getOrganizationId());
			set.addAll(userRepository.loadUserByOrganizationIds(orgIds));		
		}else if(authzLevel == UserBizLevelConstant.COMPANY.getValue()){
			//加入自己公司下的用户
			Map<String, Object> company = organizationRepository.loadSuperCompany(user.getOrganizationId());
			List<String> orgIds = organizationRepository.loadChildrenIds(company.get("id").toString());
			List<String> userIds = userRepository.loadUserByOrganizationIds(orgIds);
			set.addAll(userIds);
		}else if(authzLevel == UserBizLevelConstant.ALL.getValue()){
			//不操作，如果权限为ALL 就不会进入此方法
		}
		return set;		
	}
	
	
	/**
	 * 获取用户真正有权限的机构id集合
	 * @param user
	 * @param authzLevel
	 * @return
	 */
	private Collection<String> loadUserBizDataAuthzOrgs(CurrentUser user, int authzLevel){	
		
		Set<String> set = new HashSet<String>();
		
		//加入有权限的机构
		List<String> userBizOrgs = loadUserBizOrgs(user.getId(), true);
		set.addAll(userBizOrgs);
		
		if(authzLevel == UserBizLevelConstant.MYSELF.getValue()){
			//不操作
		}else if(authzLevel == UserBizLevelConstant.DEPTARTMENT.getValue()){
			//加入自己的部门
			set.add(user.getOrganizationId());
		}else if(authzLevel == UserBizLevelConstant.COMPANY.getValue()){
			//加入自己公司下的所有部门
			Map<String, Object> company = organizationRepository.loadSuperCompany(user.getOrganizationId());
			List<String> orgIds = organizationRepository.loadChildrenIds(company.get("id").toString());			
			set.addAll(orgIds);
		}else if(authzLevel == UserBizLevelConstant.ALL.getValue()){
			//不操作，如果权限为ALL 就不会进入此方法
		}
		return set;		
	}
	
	/**
	 * 设置用户数据权限
	 * @param userId
	 * @param i
	 * @param authzUserIds
	 * @param authzOrgIds
	 */
	public void add(String userId, String level, String[] authzUserIds, String[] authzOrgIds) {
		//先设置级别
		if(TextUtil.isNotEmpty(level)){
			saveUserBizLevel(userId, Integer.parseInt(level));
		}		
		//清空用户可访问用户权限表
		String sql = "delete from SYS_USER_BIZ_DATA_USERS where user_id = ? ";
		jdbcAssistant.update(sql, new Object[]{userId});
		//清空用户可访问机构权限表
		sql = "delete from SYS_USER_BIZ_DATA_ORGS where user_id = ? ";
		jdbcAssistant.update(sql, new Object[]{userId});
		//向用户可访问用户权限表添加数据
		if(authzUserIds.length > 0){
			for(int i=0; i<authzUserIds.length; i++){
				if(TextUtil.isNotEmpty(authzUserIds[i])){
					sql = "insert into SYS_USER_BIZ_DATA_USERS values (?, ?, ?) ";
					jdbcAssistant.update(sql, new Object[]{TextUtil.getUUID(), userId, authzUserIds[i]});
				}
			}
		}
		//向用户可访问机构权限表添加数据
		if(authzOrgIds.length > 0){
			for(int i=0; i<authzOrgIds.length; i++){
				if(TextUtil.isNotEmpty(authzOrgIds[i])){
					sql = "insert into SYS_USER_BIZ_DATA_ORGS values (?, ?, ?) ";
					jdbcAssistant.update(sql, new Object[]{TextUtil.getUUID(), userId, authzOrgIds[i]});
				}
			}
		}
	}
	
	/**
	 * 设置用户的数据权限级别
	 * @param userId
	 * @param level
	 */
	public void saveUserBizLevel(String userId, int level){
		String sql = "select count(1) from SYS_USER_BIZ_DATA where user_id = '"+userId+"'";
		int count = jdbcAssistant.queryAsInt(sql);		
		if(count > 0){
			sql = "update SYS_USER_BIZ_DATA set AUTHZ = " + level + " where user_id = '"+userId+"'";
		}else{
			sql = "insert into SYS_USER_BIZ_DATA values ('"+TextUtil.getUUID()+"', '"+userId+"', "+level+") ";
		}
		jdbcAssistant.update(sql);
	}
}
