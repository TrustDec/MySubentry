package com.insplatform.module.yeardemand.repository.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;
import com.insplatform.module.yeardemand.model.YearDemandWrite;
import com.insplatform.module.yeardemand.repository.YearDemandWriteRepository;
import com.insplatform.system.user.service.UserBizDataAuthzService;


@Repository
public class YearDemandWriteRepositoryImpl extends BaseRepositoryImpl<YearDemandWrite> implements YearDemandWriteRepository{

	@Autowired
	private UserBizDataAuthzService userBizDataAuthzService;
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select pj.name project_name,pj.px_person_classify_name,yd.year year_demand_year,yd.title year_demand_title,t.id, " +
				" t.project_id, t.year_demand_id," +
				" t.month1, t.month2, t.month3, t.month4, t.month5, t.month6," +
				" t.month7, t.month8, t.month9, t.month10, t.month11, t.month12," +
				" t.create_user_id, t.create_user_name, t.create_time, t.update_time" +
				" from PX_YEAR_DEMAND_WRITE t" +
				" left join px_year_demand yd on yd.id = t.year_demand_id" +
				" left join px_project pj on pj.id = t.project_id " +
				" where 1=1";
//		Condition condition = this.getCondition(request,"year","yearDemandId","projectName",
//				"createUserName","startCreateTime","endCreateTime");
		
		if (condition.containsKey("year")) {
			sql += " and yd.year like ?";
			condition.put("year","%"+condition.get("year")+"%");
		}
		if (condition.containsKey("yearDemandId")) {
			sql += " and yd.id = ?";
		}
		if (condition.containsKey("projectName")) {
			sql += " and pj.name like ?";
			condition.put("projectName","%"+condition.get("projectName")+"%");
		}
		if (condition.containsKey("createUserName")) {
			sql += " and t.create_user_name like ?";
			condition.put("createUserName","%"+condition.get("createUserName")+"%");
		}
		if (condition.containsKey("startCreateTime")) {
			sql += " and t.create_time >= to_date( ?, 'yyyy-mm-dd hh24:mi:ss')";
		}
		if (condition.containsKey("endCreateTime")) {
			sql += " and t.create_time -1 < to_date( ?,'yyyy-mm-dd hh24:mi:ss')";
		}
		
		CurrentUser user = condition.getCurrentUser();
		sql = userBizDataAuthzService.buildUserBizDataAuthzUserSql(sql, "t.create_user_id", user);
		
		sql += " order by t.update_time desc";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_YEAR_DEMAND_WRITE t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_YEAR_DEMAND_WRITE t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public YearDemandWrite get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(YearDemandWrite entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(YearDemandWrite entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public List<Map<String, Object>> loadAllGridProject(Condition condition) {
		String sql = "select pjc.id class_id,pjc.name,pj.id,pj.name project_name,pj.px_person_classify_name," +
				" ydw.id choice,ydw.id demand_write_id," +
				" ydw.month1,ydw.month2,ydw.month3,ydw.month4,ydw.month5,ydw.month6," +
				" ydw.month7,ydw.month8,ydw.month9,ydw.month10,ydw.month11,ydw.month12" +
				" from px_project_classify pjc" +
				" left join px_project pj on pj.project_classify_id = pjc.id and pj.is_delete='N'" +
				" left join px_year_demand_write ydw on ydw.create_user_id = ? and ydw.year_demand_id = ? and ydw.project_id = pj.id" +
				" where pjc.is_delete = 'N'" +
				" order by pj.name";
		return jdbcAssistant.query(sql, new Object[]{condition.getCurrentUser().getId(),condition.get("yearDemandId")});
	}
	
	@Override
	public List<Map<String, Object>> loadAllGridProjectGroupStatistics(String userIds, Condition condition) {
		String sql = "select pjc.id class_id,pjc.name,pj.id,pj.name project_name,pj.px_person_classify_name," +
				" ydw.project_id choice," +
				" ydw.month1,ydw.month2,ydw.month3,ydw.month4,ydw.month5,ydw.month6," +
				" ydw.month7,ydw.month8,ydw.month9,ydw.month10,ydw.month11,ydw.month12" +
				" from px_project_classify pjc" +
				" left join px_project pj on pj.project_classify_id = pjc.id and pj.is_delete='N'" +
				" left join (" +
				" select project_id," +
				" sum(t.month1) month1, sum(t.month2) month2, sum(t.month3) month3, " +
				" sum(t.month4) month4, sum(t.month5) month5, sum(t.month6) month6," +
				" sum(t.month7) month7, sum(t.month8) month8, sum(t.month9) month9, " +
				" sum(t.month10) month10, sum(t.month11) month11, sum(t.month12) month12" +
				" from px_year_demand_write t" +
				" where t.create_user_id in ("+userIds+") and t.year_demand_id = ?" +
				" group by t.project_id" +
				" ) ydw on ydw.project_id = pj.id" +
				" where pjc.is_delete = 'N'" +
				" order by pj.name";
		return jdbcAssistant.query(sql, new Object[]{condition.get("yearDemandId")});
	}

	@Override
	public List<Map<String, Object>> getCompanyUserIdsAll(String companyId) {
		String sql = "select t.id from v_sys_user_info t where t.company_id = ?";
		return jdbcAssistant.query(sql, new Object[]{companyId});
	}

	@Override
	public int deleteByyearDemandIdAndUserId(String userId, String yearDemandId) {
		String sql = "delete px_year_demand_write where create_user_id = ? and year_demand_id = ?";
		return jdbcAssistant.update(sql, new Object[]{userId, yearDemandId});
	}
	
}
