package com.insplatform.module.teachingplan.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.stereotype.Repository;

import com.insframework.common.spring.jdbc.mapper.ValueMapper;
import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insplatform.module.teachingplan.model.TeachingPlan;
import com.insplatform.module.teachingplan.repository.TeachingPlanRepository;
import com.insframework.system.map.Condition;


@Repository
public class TeachingPlanRepositoryImpl extends BaseRepositoryImpl<TeachingPlan> implements TeachingPlanRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.id,t.is_full,tt.info,tt.title,tt.course_time,(case tt.difficulty  when '1' then   '初级' when '2' then   '中级' when '3' then   '高级' end) as difficulty from PX_TEACHING_PLAN t,PX_COURSE tt where tt.id=t.course_id ";
		if(condition.containsKey("pxClassReport"))
		{
			sql += " and t.px_class_report = ? ";
			condition.put("pxClassReport", condition.get("pxClassReport"));
		}
		if(condition.containsKey("title")){
			sql += " and tt.title like ? ";
			condition.put("title", "%" + condition.get("title") + "%" );
		}
		sql += " order by t.order_index asc ";
		/*return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());*/
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray(),new ValueMapper() {
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				String sql="select us.name from PX_TEACHING_TEACHER t,PX_TEACHER te,SYS_USER us where t.teacher=te.user_id and te.user_id=us.id and t.px_teaching_plan='"+record.get("id")+"'";
				List<Map<String, Object>> list=jdbcAssistant.query(sql);
				 String name="";
				 for(Map<String, Object> map : list){
					 name+=map.get("name").toString()+",";
				 }
				if(TextUtil.isNotEmpty(name))
				{
					name=name.substring(0,name.lastIndexOf(","));
				}
				record.put("teacherListName", name);
				
				return RETURN_CODE.NEXT;
			}
		});
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_TEACHING_PLAN t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_TEACHING_PLAN t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public TeachingPlan get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TeachingPlan entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(TeachingPlan entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public void move(String id, String rowIndex,
			String currentId, String type) {
		String sql = "";
		if("up".equals(type))
		{
			Map<String, Object> map=jdbcAssistant.queryOne("select * from PX_TEACHING_PLAN t where t.id='"+id+"'");
			int thisIndex=Integer.parseInt(map.get("orderIndex").toString());
			String Selectsql="select * from (select * from PX_TEACHING_PLAN t where t.order_index <"+thisIndex+" and t.px_class_report='"+currentId+"'  order by t.order_index desc ) where  rownum=1";
			Map<String, Object> bigmap=jdbcAssistant.queryOne(Selectsql);
			if(bigmap!=null)
			{
				sql = "update PX_TEACHING_PLAN set order_index = '" + bigmap.get("orderIndex") + "' where id = '" + id + "'";
				jdbcAssistant.update(sql);
				
				sql = "update PX_TEACHING_PLAN set order_index = '" +thisIndex+ "' where id = '" + bigmap.get("id") + "'";
				jdbcAssistant.update(sql);
			}
			
		}
		else
		{
			Map<String, Object> map=jdbcAssistant.queryOne("select * from PX_TEACHING_PLAN t where t.id='"+id+"'");
			int thisIndex=Integer.parseInt(map.get("orderIndex").toString());
			String Selectsql="select * from (select * from PX_TEACHING_PLAN t where t.order_index >"+thisIndex+" and t.px_class_report='"+currentId+"' order by t.order_index asc ) where  rownum=1";
			Map<String, Object> bigmap=jdbcAssistant.queryOne(Selectsql);
			if(bigmap!=null)
			{
				sql = "update PX_TEACHING_PLAN set order_index = '" + bigmap.get("orderIndex") + "' where id = '" + id + "'";
				jdbcAssistant.update(sql);
				
				sql = "update PX_TEACHING_PLAN set order_index = '" + thisIndex + "' where id = '" + bigmap.get("id") + "'";
				jdbcAssistant.update(sql);
			}
		}
		
		
	}

	@Override
	public void addPlan(Condition condition, String classReportId,
			String projectId) {
		List<Map<String, Object>> listSize=jdbcAssistant.query("select * from PX_TEACHING_PLAN t where t.px_class_report='"+classReportId+"'");
		if(listSize.size()==0)
		{
			String sql="select t.COURSE_ID,( select c.COURSE_time from PX_COURSE c where c.id=t.COURSE_ID) as COURSE_time  from PX_PROJECT_ITEM_COURSE t, " +
					"PX_PROJECT_ITEM tt  where t.ITEM_ID=tt.id and tt.project_id='"+projectId+"' order by tt.order_index,t.order_index asc";
			List<Map<String, Object>> list=jdbcAssistant.query(sql);
			if(list.size()!=0)
			{
				 String[] sqlInsert = new String[list.size()];
				 int j=0;
				 for(Map<String, Object> map : list){
					 String courseId=map.get("courseId").toString();
					 String courseTime=map.get("courseTime").toString();
					 sqlInsert[j] = "insert into px_teaching_plan (id, px_class_report, course_id, course_hour,  is_full, create_user_id, create_user_name, " +
					 		"create_time, update_time, order_index) values ('"+TextUtil.getUUID()+"', '"+classReportId+"', '"+courseId+"', "+courseTime+",  '否', " +
					 		"'"+condition.getCurrentUser().getId()+"','"+condition.getCurrentUser().getId()+"', sysdate, sysdate, "+j+")";
					 j++;
				}
				jdbcAssistant.batchUpdate(sqlInsert);
			}
		}
	}

	@Override
	public void teachingplanAdd(Condition condition,String id, String[] ids) {
		
		Map<String, Object> map=jdbcAssistant.queryOne("select * from (select * from PX_TEACHING_PLAN t where t.px_class_report='"+id+"'  order by t.order_index desc ) where rownum=1");
		int orderIndex=1;
		if(map!=null)
		{
			orderIndex=Integer.parseInt(map.get("orderIndex").toString())+1;
		}
		if(!"".equals(ids[0].trim()))
		{
			for(int i = 0 ; i < ids.length ; i++)
			{
				
				List<Map<String, Object>> list=jdbcAssistant.query("select * from PX_TEACHING_PLAN t where t.px_class_report='"+id+"' and t.course_id='"+ids[i]+"'");
				if(list.size()==0)
				{
					Map<String, Object> courseMap=jdbcAssistant.queryOne("select t.course_time from PX_COURSE t where t.id='"+ids[i]+"'");
					String courseTime=courseMap.get("courseTime").toString();
					String sqlInsert= "insert into px_teaching_plan (id, px_class_report, course_id, course_hour, is_full, create_user_id, create_user_name, create_time, update_time, order_index) " +
							       "values ('"+TextUtil.getUUID()+"', '"+id+"', '"+ids[i]+"', "+courseTime+", '否', '"+condition.getCurrentUser().getId()+"', '"+condition.getCurrentUser().getName()+"', sysdate, sysdate, "+orderIndex+")";
					jdbcAssistant.execute(sqlInsert);
					orderIndex++;
				}
			
			}
			
		}
		
		
	}

	@Override
	public Map<String, Object> loadChooseGrid(Condition condition) {
		String sql = "select t.id,t.course_id,t.is_full,tt.info,tt.title,tt.course_time,(case tt.difficulty  when '1' then   '初级' when '2' then   '中级' when '3' then   '高级' end) as difficulty from PX_TEACHING_PLAN t,PX_COURSE tt where tt.id=t.course_id ";
		if(condition.containsKey("pxClassReport"))
		{
			sql += " and t.px_class_report = ? ";
			condition.put("pxClassReport", condition.get("pxClassReport"));
		}
		if(condition.containsKey("title")){
			sql += " and tt.title like ? ";
			condition.put("title", "%" + condition.get("title") + "%" );
		}
		sql += " order by t.order_index asc ";
		/*return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());*/
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray(),new ValueMapper() {
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				String sql="select us.name from PX_TEACHING_TEACHER t,PX_TEACHER te,SYS_USER us where t.teacher=te.user_id and te.user_id=us.id and t.px_teaching_plan='"+record.get("id")+"'";
				List<Map<String, Object>> list=jdbcAssistant.query(sql);
				 String name="";
				 for(Map<String, Object> map : list){
					 name+=map.get("name").toString()+",";
				 }
				if(TextUtil.isNotEmpty(name))
				{
					name=name.substring(0,name.lastIndexOf(","));
				}
				record.put("teacherListName", name);
				
				return RETURN_CODE.NEXT;
			}
		});
	}
	
	
}
