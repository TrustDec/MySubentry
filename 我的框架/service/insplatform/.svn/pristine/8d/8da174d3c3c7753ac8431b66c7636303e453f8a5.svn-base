package com.insplatform.module.examiner.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.stereotype.Repository;

import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insplatform.module.examiner.model.Examiner;
import com.insplatform.module.examiner.repository.ExaminerRepository;

import com.insframework.system.map.Condition;


@Repository
public class ExaminerRepositoryImpl extends BaseRepositoryImpl<Examiner> implements ExaminerRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.id,t.user_id,t.name,t.id_card,t.sex,t.phone,t.company_id,t.company_name," +
				"(select name from SYS_DICT where id = t.edu) as edu," +
				"(select to_char(birthday,'yyyy-mm-dd') from sys_user where id=t.user_id) as birthday," +
				"t.create_user_id,t.create_user_name,t.create_time,t.update_time " +
				"from PX_EXAMINER t where 1=1 ";
		
		if(condition.containsKey("name")){
			sql += " and t.name like  ? ";
			condition.put("name", "%" + condition.get("name") + "%");
		}
		
		if(condition.containsKey("companyName")){
			sql += " and t.COMPANY_NAME like  ? ";
			condition.put("companyName", "%" + condition.get("companyName") + "%");
		}
		sql += "order by t.update_time desc ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_EXAMINER t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_EXAMINER t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public Examiner get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(Examiner entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(Examiner entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public Map<String, Object> loadEarlyWarningInfo(Condition condition) {
		String sql = "SELECT * FROM (select  e.name,e.id_card,e.sex,e.edu,e.phone,e.company_name," +
				"(select name from SYS_DICT where id = t.work_level) as work_level," +
				"t.technics_title,t.certificate_num,t.work_type_name,to_char(t.get_time, 'yyyy-mm-dd') as get_time," +
				"to_char(t.start_time, 'yyyy-mm-dd') as start_time,to_char(t.end_time, 'yyyy-mm-dd') as end_time," +
				"t.remark,ROUND(sysdate - t.end_time) over_time  " +
				" from px_examiner_worktype t left join px_examiner e on t.examiner_id = e.id  ) m " +
				" where 1=1 " ;
		
		if(condition.containsKey("name")){
			sql += " and m.name like  ? ";
			condition.put("name", "%" + condition.get("name") + "%");
		}
		
		if(condition.containsKey("overType")){
			String overType = (String) condition.get("overType");
			if("1".equals(overType)){//已过期
				sql += " and m.over_time >0";
			}else if("2".equals(overType)){//半年内过期
				sql += " and m.over_time <0 and m.over_time >-183 ";
			}else if("3".equals(overType)){//未过期(不含半年内)
				sql += " and m.over_time <-183";
			}
			
			condition.remove("overType");
		}
		
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}

	@Override
	public boolean hasAddUser(String userId) {
		String sql = "SELECT COUNT(1) FROM PX_EXAMINER WHERE USER_ID=? ";
		int count = jdbcAssistant.queryAsInt(sql,new String[]{userId});
		if(count > 0) return true;
		return false;
	}

	@Override
	public boolean hasEditUser(String id, String userId) {
		String sql = "SELECT COUNT(1) FROM PX_EXAMINER WHERE USER_ID=? AND ID NOT IN(?) ";
		int count = jdbcAssistant.queryAsInt(sql,new String[]{userId,id});
		if(count > 0) return true;
		return false;
	}
	
}
