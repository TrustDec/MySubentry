package com.insplatform.module.teacher.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.stereotype.Repository;

import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insplatform.module.teacher.model.Teacher;
import com.insplatform.module.teacher.repository.TeacherRepository;

import com.insframework.system.map.Condition;


@Repository
public class TeacherRepositoryImpl extends BaseRepositoryImpl<Teacher> implements TeacherRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {
		String sql = " select  a.id,b.name,b.sex,b.edu,b.id_card,b.phone,a.tsource,a.direction,a.ttype,a.positionlevel,a.lesson,a.remark, " +
				" a.approval  from px_teacher a ,  V_SYS_USER_INFO b  where a.user_id = b.id  ";
		if (condition.containsKey("name")) {
			sql += " and b.name like ? ";
			condition.put("name", "%" + condition.get("name") + "%");
		}
		if (condition.containsKey("lesson")) {
			sql += " and a.lesson like ? ";
			condition.put("lesson", "%" + condition.get("lesson") + "%");
		}
		if (condition.containsKey("tsource")) {
			sql += " and a.tsource like ? ";
			condition.put("tsource", "%" + condition.get("tsource") + "%");
		}
		if (condition.containsKey("ttype")) {
			sql += " and a.ttype like ? ";
			condition.put("ttype", "%" + condition.get("ttype") + "%");
		}
		if (condition.containsKey("approval")) {
			sql += " and a.approval like ? ";
			condition.put("approval", "%" + condition.get("approval") + "%");
		}
		sql += " order by update_time desc ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_TEACHER t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_TEACHER t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public Teacher get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(Teacher entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(Teacher entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {
		super.deleteByIds(ids);
	}

	@Override
	public List<String> loadTeacherUserIds() {
		String sql = "select user_id from PX_TEACHER t ";
		return jdbcAssistant.queryAsList(sql, String.class, null);
	}
	
	
	@Override
	public Map<String, Object> loadAgreeTeacherGrid(Condition condition) {
		String sql = " select  a.id,a.user_id,b.name,b.sex,b.edu,a.direction,a.lesson,a.remark " +
				"  from px_teacher a ,  V_SYS_USER_INFO b  where a.user_id = b.id and a.approval = '1' ";
				if (condition.containsKey("name")) {
					sql += " and b.name like ? ";
					condition.put("name", "%" + condition.get("name") + "%");
				}
				if (condition.containsKey("lesson")) {
					sql += " and a.lesson like ? ";
					condition.put("lesson", "%" + condition.get("lesson") + "%");
				}
		      sql +=  " order by update_time desc ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> loadTeacherCheckIds(String id) {	
		String sql = " select t.* from PX_TEACHER t where 1=1 and t.approval='0' and t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
}
