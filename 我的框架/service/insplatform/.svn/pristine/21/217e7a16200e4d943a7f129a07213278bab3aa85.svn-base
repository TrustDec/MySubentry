package com.insplatform.module.attachment.controller;

import java.io.UnsupportedEncodingException;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.insframework.system.base.controller.BaseController;
import com.insframework.system.map.Condition;
import com.insplatform.module.attachment.model.AttachmentsFile;
import com.insplatform.module.attachment.service.AttachmentsFileService;

@Controller
@RequestMapping("/px/file")
public class AttachmentsFileRepositoryController extends BaseController{
	
	@Autowired
	private AttachmentsFileService attachmentsFileService;
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGrid")
	public @ResponseBody Map<String, Object> loadAllGrid(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return attachmentsFileService.loadAllGrid(condition);
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllListByPid")
	public @ResponseBody Map<String, Object> loadAllListByPid(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"pid","type");
		return this.getMessager().success().data(attachmentsFileService.loadAllListByPid(condition));
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllList")
	public @ResponseBody Map<String, Object> loadAllList(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return this.getMessager().success().data(attachmentsFileService.loadAllList(condition));
	}	
	
	
	/**
	 * 加载单条数据
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody Map<String, Object> load(@RequestParam("id") String id){		
		return this.getMessager().success().data(attachmentsFileService.load(id));		
	}
	
	/**
	 * 新增
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")	
	public @ResponseBody Map<String, Object> add(AttachmentsFile attachment, HttpServletRequest request){
		attachmentsFileService.save(attachment);
		return this.getMessager().success();
	}
	
	/**
	 * 编辑
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")	
	public @ResponseBody Map<String, Object> update(
		   @RequestParam("id") String id,
		   HttpServletRequest request){		
		AttachmentsFile attachment = attachmentsFileService.get(id);
		this.bindObject(request, attachment);
		attachmentsFileService.update(attachment);
		return this.getMessager().success();
	}
	
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")	
	public @ResponseBody Map<String, Object> delete(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		attachmentsFileService.deleteByIds(ids);
		return this.getMessager().success();
	}
	
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/deleteOne")	
	public @ResponseBody Map<String, Object> deleteOne(HttpServletRequest request){
		String id = request.getParameter("id");
		attachmentsFileService.deleteById(id);
		return this.getMessager().success();
	}
	
	
	/**
	 * 下载文件
	 * @param url
	 * @param fileName js encodeURI(encodeURI(val))
	 * @param response
	 */
	@RequestMapping("/downloadFile")	
	public void downloadFile(@RequestParam("url") String url,
							@RequestParam("fileName") String fileName,
							HttpServletResponse response){
		
			try {
				fileName=java.net.URLDecoder.decode(fileName, "UTF-8");
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		
		downloadService.downloadFile(url, fileName, response);
	}

	
}
