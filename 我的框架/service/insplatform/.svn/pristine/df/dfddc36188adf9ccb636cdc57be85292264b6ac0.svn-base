package com.insplatform.module.osta.register.notice.controller;

import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.controller.BaseController;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;
import com.insplatform.module.osta.register.notice.model.OstaRegNotice;
import com.insplatform.module.osta.register.notice.service.OstaRegNoticeService;

@Controller
@RequestMapping("/px/ostaregnotice")
public class OstaRegNoticeController extends BaseController{
	
	@Autowired
	private OstaRegNoticeService ostaRegNoticeService;
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGridWrite")
	public @ResponseBody Map<String, Object> loadAllGridWrite(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"title","state",
				"createUserName","startCreateTime","endCreateTime");
		return ostaRegNoticeService.loadAllGridWrite(condition);
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGrid")
	public @ResponseBody Map<String, Object> loadAllGrid(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"title","state",
				"createUserName","startCreateTime","endCreateTime");
		return ostaRegNoticeService.loadAllGrid(condition);
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllList")
	public @ResponseBody Map<String, Object> loadAllList(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return this.getMessager().success().data(ostaRegNoticeService.loadAllList(condition));
	}	
	
	
	/**
	 * 加载单条数据
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody Map<String, Object> load(@RequestParam("id") String id){		
		return this.getMessager().success().data(ostaRegNoticeService.load(id));		
	}
	
	/**
	 * 新增
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")	
	public @ResponseBody Map<String, Object> add(OstaRegNotice ostaregnotice, HttpServletRequest request){
		String ostaRegNoticeId = ostaregnotice.getId();
		if (TextUtil.isEmpty(ostaRegNoticeId)) {
			CurrentUser user = this.getCurrentUser(request);
			ostaregnotice.setCreateUserId(user.getId());
			ostaregnotice.setCreateUserName(user.getName());
			Date date = new Date();
			ostaregnotice.setCreateTime(date);
			ostaregnotice.setUpdateTime(date);
			ostaregnotice.setState("A");
			ostaRegNoticeId = ostaRegNoticeService.saveAndFiles(ostaregnotice,request);
		}else {
			ostaregnotice = ostaRegNoticeService.get(ostaRegNoticeId);
			this.bindObject(request, ostaregnotice);
			ostaregnotice.setUpdateTime(new Date());
			ostaRegNoticeService.updateAndFiles(ostaregnotice,request);
		}
		
		return this.getMessager().success().put("ostaRegNoticeId", ostaRegNoticeId);
	}
	
	/**
	 * 编辑
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")	
	public @ResponseBody Map<String, Object> update(
		   @RequestParam("id") String id,
		   HttpServletRequest request){		
		OstaRegNotice ostaregnotice = ostaRegNoticeService.get(id);
		this.bindObject(request, ostaregnotice);
		ostaregnotice.setUpdateTime(new Date());
		ostaRegNoticeService.updateAndFiles(ostaregnotice,request);
		return this.getMessager().success();
	}
	
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")
	public @ResponseBody Map<String, Object> delete(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		Map<String, Object> map = ostaRegNoticeService.deleteByIdsx(ids);
		return this.getMessager().success().putAllMap(map);
	}

	/**
	 * 改变流程节点
	 * @param dict
	 * @return
	 */
	@RequestMapping("/updateState")	
	public @ResponseBody Map<String, Object> updateState(@RequestParam("id") String id,
			HttpServletRequest request){
		Condition condition = this.getCondition(request,"id","state");
		String result = ostaRegNoticeService.updateState(condition);
		
		return this.getMessager().success().put("msg", result);
	}
	
}
