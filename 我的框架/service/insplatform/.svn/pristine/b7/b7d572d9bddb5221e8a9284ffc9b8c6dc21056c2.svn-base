package com.insplatform.module.examination.service.impl;

import java.io.Serializable;
import java.util.*;




import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.common.utils.TextUtil;
import com.insframework.common.utils.pager.Pager;
import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.map.Condition;

import com.insplatform.module.examination.model.Examination;
import com.insplatform.module.examination.repository.ExaminationRepository;
import com.insplatform.module.examination.service.ExaminationService;

@Service
public class ExaminationServiceImpl extends BaseServiceImpl<Examination> implements ExaminationService{
	
	@Autowired
	private ExaminationRepository examinationRepository;

	@Override
	public BaseRepository<Examination> getRepository() {		
		return examinationRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return examinationRepository.loadAllGrid(condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return examinationRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return examinationRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public Examination get(Serializable id) {		
		return examinationRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(Examination entity) {	
		return examinationRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(Examination entity) {		
		examinationRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		examinationRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		examinationRepository.deleteByIds(ids);
	}

	@Override
	public Map<String, Object> loadClassReportList(Condition condition) {
		// TODO Auto-generated method stub
		return examinationRepository.loadClassReportList(condition);
	}

	@Override
	public Map<String, Object> loadTestPaperList(Condition condition) {
		// TODO Auto-generated method stub
		return examinationRepository.loadTestPaperList(condition);
	}

	@Override
	public Map<String, Object> loadMyExamList(Condition condition) {
		int page=1;
		String pageString = condition.get("page")+"";
		if(TextUtil.isNotEmpty(pageString))
		{
			page=Integer.parseInt(pageString);
		}
		Pager<Map<String, Object>> pager = new Pager<Map<String, Object>>(0, page, 5);		
		pager = examinationRepository.loadMyExamList(condition,pager);
		Map<String, Object> dataMap = pager.toMap();
		
		//设置上一页/下一页/首页/尾页url地址
		String url = "#exam/";
		if(pager.isHasNextPage()){
			dataMap.put("nextPageUrl", url+(page+1));
		}else{
			dataMap.put("nextPageUrl", "javascript:;");
		}		
		if(pager.isHasPreviousPage()){
			dataMap.put("previousPageUrl", url + (page-1));
		}else{
			dataMap.put("previousPageUrl", "javascript:;");
		}		
		if(pager.isFirstPage()){
			dataMap.put("firstPageUrl", "javascript:;");
		}else{
			dataMap.put("firstPageUrl", url +"1");
		}		
		if(pager.isLastPage()){
			dataMap.put("lastPageUrl", "javascript:;");
		}else{
			dataMap.put("lastPageUrl", url+pager.getPageCount());
		}
		
		//设置导航页
		int [] navigatePageNumbers = pager.getNavigatePageNumbers();
		List<Map<String, Object>> navigatePage = new ArrayList<Map<String,Object>>();
		for(int i : navigatePageNumbers){
			Map<String, Object> navigatePageItem = new HashMap<String, Object>();
			navigatePageItem.put("text", i);
			navigatePageItem.put("url", url+i);
			if(i == page){
				navigatePageItem.put("active", "Y");
			}else{
				navigatePageItem.put("active", "N");
			}
			navigatePage.add(navigatePageItem);
		}
		dataMap.put("navigatePage", navigatePage);
		
		return dataMap;
	}

	@Override
	public int getExamTime(Condition condition) {
		return examinationRepository.getExamTime(condition);
	}


	@Override
	public Map<String, Object> getExamDetail(Condition condition) {
		// TODO Auto-generated method stub
		return examinationRepository.getExamDetail(condition);
	}

	@Override
	public Map<String, Object> loadMyExamScoreList(Condition condition) {
		int page=1;
		String pageString = condition.get("page")+"";
		if(TextUtil.isNotEmpty(pageString))
		{
			page=Integer.parseInt(pageString);
		}
		Pager<Map<String, Object>> pager = new Pager<Map<String, Object>>(0, page, 5);		
		pager = examinationRepository.loadMyExamScoreList(condition,pager);
		Map<String, Object> dataMap = pager.toMap();
		
		//设置上一页/下一页/首页/尾页url地址
		String url = "#examscore/";
		if(pager.isHasNextPage()){
			dataMap.put("nextPageUrl", url+(page+1));
		}else{
			dataMap.put("nextPageUrl", "javascript:;");
		}		
		if(pager.isHasPreviousPage()){
			dataMap.put("previousPageUrl", url + (page-1));
		}else{
			dataMap.put("previousPageUrl", "javascript:;");
		}		
		if(pager.isFirstPage()){
			dataMap.put("firstPageUrl", "javascript:;");
		}else{
			dataMap.put("firstPageUrl", url +"1");
		}		
		if(pager.isLastPage()){
			dataMap.put("lastPageUrl", "javascript:;");
		}else{
			dataMap.put("lastPageUrl", url+pager.getPageCount());
		}
		
		//设置导航页
		int [] navigatePageNumbers = pager.getNavigatePageNumbers();
		List<Map<String, Object>> navigatePage = new ArrayList<Map<String,Object>>();
		for(int i : navigatePageNumbers){
			Map<String, Object> navigatePageItem = new HashMap<String, Object>();
			navigatePageItem.put("text", i);
			navigatePageItem.put("url", url+i);
			if(i == page){
				navigatePageItem.put("active", "Y");
			}else{
				navigatePageItem.put("active", "N");
			}
			navigatePage.add(navigatePageItem);
		}
		dataMap.put("navigatePage", navigatePage);
		
		return dataMap;
	}

	@Override
	public Map<String, Object> saveTemp(Condition condition) {
		Map<String, Object> dataMap=new HashMap<String, Object>();
		examinationRepository.saveTemp(condition);
		return dataMap;
	}

	@Override
	public Map<String, Object> saveEaxm(Condition condition) {
		return examinationRepository.saveEaxm(condition);
	}

	@Override
	public Map<String, Object> getExamResultInfo(Condition condition) {
		// TODO Auto-generated method stub
		return examinationRepository.getExamResultInfo(condition);
	}

	@Override
	public Map<String, Object> updateExamInfoEffective(Condition condition) {
		return examinationRepository.updateExamInfoEffective(condition);
	}

	@Override
	public Map<String, Object> loadMarkeAllGrid(Condition condition) {
		return examinationRepository.loadMarkeAllGrid(condition);
	}

	@Override
	public Map<String, Object> getMarkeInfo(Condition condition) {
		return examinationRepository.getMarkeInfo(condition);
	}

	@Override
	public void saveMarkeInfo(Condition condition) {
		examinationRepository.saveMarkeInfo(condition);
	}

	@Override
	public Map<String, Object> getExamAnalysisInfo(Condition condition) {
		return examinationRepository.getExamAnalysisInfo(condition);
	}

	
	



}
