package com.insplatform.module.trainingimplement.repository.impl;

import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.trainingimplement.model.TrainingUserRoster;
import com.insplatform.module.trainingimplement.repository.TrainingUserRosterRepository;


@Repository
public class TrainingUserRosterRepositoryImpl extends BaseRepositoryImpl<TrainingUserRoster> implements TrainingUserRosterRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.* from PX_TRAINING_USER_ROSTER t ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select q.name,q.account,q.id_card,q.sex,q.company_name, t.id,q.birthday ,t.phone from V_SYS_USER_INFO q left join px_training_user_roster t on q.id=t.employee_id where t.training_scheme_id='"+condition.get("id")+"'  and q.is_delete = 'N'";
		return jdbcAssistant.query(sql);
	}
	
	@Override
	public List<Map<String, Object>> load(String id) {	
//		String sql = "select (select p.company_name from V_SYS_USER_INFO p where id in" +
//				"(select t.employee_Id from PX_TRAINING_USER_ROSTER t where t.training_scheme_id = '" + id +"'))  as company," +
//				" (select p.name from V_SYS_USER_INFO p where id in(select t.employee_Id from PX_TRAINING_USER_ROSTER t where" +
//				" t.training_scheme_id = '" + id +"')) as name1, t.* from PX_TRAINING_USER_ROSTER t where" +
//				" t.training_scheme_id = '" + id +"'";
		String sql = "select q.name as name1 ,q.account,q.id_card,q.sex, t.id,q.birthday, q.company_name as company ," +
				"t.phone, t.is_checking from V_SYS_USER_INFO q left join px_training_user_roster t on q.id=t.employee_id " +
				"where t.training_scheme_id='" + id + "'  and q.is_delete = 'N'";
		List<Map<String, Object>> list = jdbcAssistant.query(sql);
		return list;
	}
	
	@Override
	public Map<String, Object> loadEdit(String id, String trainingSchemeId) {	
		String sql = "select (select p.phone from px_training_user_roster p where id ='" + id + "' and p.training_scheme_id = '" + trainingSchemeId + "') phone1,q.* from V_SYS_USER_INFO q where 1=1 and is_delete = 'N' and  id = (select employee_id from px_training_user_roster where id = '" + id + "')";
		Map<String, Object> map = jdbcAssistant.queryOne(sql);
		if("1".equals(map.get("sex")))
		{
			map.put("sex", "男");
		}else
		{
			map.put("sex", "女");
		}
		return map;
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public TrainingUserRoster get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TrainingUserRoster entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(TrainingUserRoster entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {
		super.deleteByIds(ids);
		String id = "";
		for(int i = 0 ; i < ids.length ; i++)
		{
			id += ids[i] + ",";
		}
		id=id.substring(0, id.length());
		String sql = "select * from px_training_user_roster where id in (" + id + ")";
		List<Map<String, Object>> list = jdbcAssistant.query(sql);
		String[] sql1 = new String[ids.length]; 
		for(int i = 0 ; i < list.size() ; i++)
		{
			sql1[i] = "delete px_training_roster_checking where training_scheme_id = '" + list.get(i).get("trainingSchemeId") + "' and training_roster = '" + list.get(i).get("employeeId") + "'";
		}
		jdbcAssistant.batchUpdate(sql1);
	}

	@Override
	public void add(String id, String[] ids) {
		String str = "";
		for(int i = 0 ; i < ids.length ; i++)
		{
			str = str + "'" + ids[i] + "',";
		}
		str = str.substring(0, str.length() - 1);
		String sql = "select t.* from v_sys_user_info t where id in(" + str + ")";
		List<Map<String, Object>> list = jdbcAssistant.query(sql);
		String phone = "";
		String idsSql[] = new String[ids.length];
		for(int i = 0 ; i < ids.length ; i++)
		{
			if(list.get(i).get("phone") == null)
			{
				phone = "";
			}
			else
			{
				phone = list.get(i).get("phone") + "";
			}
			idsSql[i] = "insert into PX_TRAINING_USER_ROSTER values((select sys_guid() from dual),'" + phone + "','" + id + "','" + list.get(i).get("id") + "','N','','')";
		}
		jdbcAssistant.batchUpdate(idsSql);
	}

	@Override
	public void isChecking(String id, String[] ids, String statu) {
		if(ids.length == 0)
		{
			String sql = "update PX_TRAINING_USER_ROSTER set is_checking = '" + statu + "' where id = '" + id + "'";
			jdbcAssistant.update(sql);
		}
		else
		{
			String [] arrstr = new String[ids.length];
			for(int i = 0 ; i < arrstr.length ; i++)
			{
				arrstr[i] = "update PX_TRAINING_USER_ROSTER set is_checking = '" + statu + "' where id = '" + ids[i] + "'";
			}
			jdbcAssistant.batchUpdate(arrstr);
		}
	}

	@Override
	public void addOrUpadteUser(String id, String courseId) {
		String sqlRoster = "select t.employee_id from px_training_user_roster t where t.training_scheme_id = '" + id + "' and t.is_checking = 'Y'";
		List<Map<String, Object>> mapRoster = jdbcAssistant.query(sqlRoster);

		String sqlTemp = "";
		
		Map<String,Object> map = new HashMap<String, Object>();
		
		for(int k = 0 ; k < mapRoster.size() ; k++)
		{
			sqlTemp = "select count(*) as num from px_training_roster_checking where course_id = '" + courseId + "' and training_roster = '" + mapRoster.get(k).get("employeeId") + "'";
			map = jdbcAssistant.queryOne(sqlTemp);
			if("0".equals(map.get("num") + ""))
			{
				sqlTemp = "insert into px_training_roster_checking values((select sys_guid() from dual),'" + id + "','" + courseId + "','" + mapRoster.get(k).get("employeeId") + "','0','0','')";
				jdbcAssistant.update(sqlTemp);
			}
		}
	}

	@Override
	public List<Map<String, Object>> loadAllQueryClockGrid(Condition condition) {
		String sql = "select t.id as user_id, t.statu,t.result,t.remark,t.course_id, u.* from px_training_roster_checking " +
				"t left join v_sys_user_info u on u.id = t.training_roster left join px_training_user_roster " +
				"r on r.employee_id = t.training_roster where t.training_scheme_id = '" + condition.get("id") + "' " +
				"and r.is_checking = 'Y' and r.training_scheme_id = '" + condition.get("id") + "'  and " +
				"t.course_id = '" + condition.get("courseId") + "'";
		if(condition.containsKey("name"))
		{
			sql += " and u.name like '%" + condition.get("name") + "%'";
		}
		return jdbcAssistant.query(sql);
	}

	@Override
	public void isCheckingChecked(String id, String schemeId, String statu, String[] idSer, String courseId) {
		if(idSer.length == 0)
		{
			String sql = "update px_training_roster_checking set statu = '" + statu + "' where training_roster = '" + id + "' and training_scheme_id = '" + schemeId + "' and course_id = '" + courseId + "'";
			jdbcAssistant.update(sql);
		}
		else
		{
			String arr[] = new String[idSer.length];
			for(int i = 0 ; i < arr.length ; i++)
			{
				arr[i] = "update px_training_roster_checking set statu = '" + statu + "' where training_roster = '" + idSer[i] + "' and training_scheme_id = '" + schemeId + "' and course_id = '" + courseId + "'";
			}
			jdbcAssistant.batchUpdate(arr);
		}
	}

	@Override
	public Map<String, Object> updateResult(String id, String result, String remark) {
		String sql = "update px_training_roster_checking set result = '" + result + "', remark = '" + remark + "' where id = '" + id + "'";
		jdbcAssistant.update(sql);
		sql = "select * from px_training_roster_checking where id = '" + id + "'";
		return jdbcAssistant.queryOne(sql);
	}

	@Override
	public Map<String, Object> loadData(String id) {
		String sql = "select * from px_training_roster_checking where id = '" + id + "'";
		return jdbcAssistant.queryOne(sql);
	}

	@Override
	public List<Map<String, Object>> loadAllListIsChecking(Condition condition) {
		String sql = "";
		sql = "select count(user_group) as num from PX_TRAINING_USER_ROSTER where training_scheme_id = '" + condition.get("id") + "'";
		if("0".equals(jdbcAssistant.queryOne(sql).get("num").toString()))
		{
			sql = "select q.name ,q.account,q.id_card,q.sex,t.remark, t.id,q.birthday, q.company_name," +
					"t.phone, t.user_group from V_SYS_USER_INFO q left join px_training_user_roster t on " +
					"q.id=t.employee_id where t.training_scheme_id='" + condition.get("id") + "' and is_checking = 'Y' " +
					"and q.is_delete = 'N'";
		}else
		{
			sql = "select q.name ,q.account,q.id_card,q.sex,t.remark, t.id,q.birthday, " +
					"q.company_name ,t.phone, t.user_group, (select m.name " +
					"from sys_dict m where t.user_group = m.id) as user_group_name from V_SYS_USER_INFO " +
					"q left join px_training_user_roster t on q.id=t.employee_id where " +
					"t.training_scheme_id='" + condition.get("id") + "' and is_checking = 'Y' and q.is_delete = 'N'";
		}
		return jdbcAssistant.query(sql);
	}

	@Override
	public void userGroup(Condition condition, String[] ids, String userGroup, String trainingSchemeId) {
		String sql[] = new String[ids.length];
		for(int i = 0 ; i < sql.length ; i++)
		{
			sql[i] = "update PX_TRAINING_USER_ROSTER set user_group = '" + userGroup + "' where training_scheme_id = '" + trainingSchemeId + "' and id = '" + ids[i] + "'";
		}
		jdbcAssistant.batchUpdate(sql);
	}

	@Override
	public void update(String phone, String id) {
		String sql = "update px_training_user_roster set phone='"+phone+"' where employee_id = (select employee_id from px_training_user_roster where id = '" + id + "')";
		jdbcAssistant.update(sql);
	}

	@Override
	public void remark(String id, String remark) {
		String sql = "update px_training_user_roster set remark = '"+remark+"' where id = '"+id+"'";
		jdbcAssistant.update(sql);
	}

	@Override
	public Map<String, Object> loadRemark(String id) {
		String sql = "select t.* from px_training_user_roster t where id = '" + id + "'";
		return jdbcAssistant.queryOne(sql);
	}
}
