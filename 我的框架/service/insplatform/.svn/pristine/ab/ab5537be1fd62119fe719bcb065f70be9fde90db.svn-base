package com.insplatform.module.course.coursekpointrel.controller;

import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.controller.BaseController;
import com.insframework.system.map.Condition;
import com.insplatform.module.course.coursekpointrel.model.CourseKpointRel;
import com.insplatform.module.course.coursekpointrel.service.CourseKpointRelService;

@Controller
@RequestMapping("/px/course/coursekpointrel")
public class CourseKpointRelController extends BaseController{
	
	@Autowired
	private CourseKpointRelService courseKpointRelService;
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGrid")
	public @ResponseBody Map<String, Object> loadAllGrid(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return courseKpointRelService.loadAllGrid(condition);
	}
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllTreeGridBySelectKpoint")
	public @ResponseBody Map<String, Object> loadAllTreeGridBySelectKpoint(HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"courseId");
		if (!condition.containsKey("courseId")) {
			condition.put("courseId", "noCourseId");
		}
		return courseKpointRelService.loadAllTreeGridBySelectKpoint(condition);
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllTreeGrid")
	public @ResponseBody Map<String, Object> loadAllTreeGrid(HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"courseId");
		String courseId = request.getParameter("courseId");
		if (TextUtil.isEmpty(courseId)) {
			condition.put("courseId", "noCourseId");
		}
		return courseKpointRelService.loadAllTreeGrid(condition);
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllList")
	public @ResponseBody Map<String, Object> loadAllList(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return this.getMessager().success().data(courseKpointRelService.loadAllList(condition));
	}	
	
	
	/**
	 * 加载单条数据
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody Map<String, Object> load(@RequestParam("id") String id){		
		return this.getMessager().success().data(courseKpointRelService.load(id));		
	}
	
	/**
	 * 新增
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")	
	public @ResponseBody Map<String, Object> add(@RequestParam("courseId") String courseId, HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		String [] kpointCatalogues = this.getSelectedItems(request,"kpointCatalogues");
		courseKpointRelService.saveBatch(courseId, ids, kpointCatalogues);
		return this.getMessager().success();
	}
	/**
	 * 批量保存知识点排序号
	 * @param dict
	 * @return
	 */
	@RequestMapping("/saveKpointSortNumber")
	public @ResponseBody Map<String, Object> saveKpointSortNumber(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		courseKpointRelService.saveKpointSortNumber(ids);
		return this.getMessager().success();
	}
	
	/**
	 * 编辑
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")	
	public @ResponseBody Map<String, Object> update(
		   @RequestParam("id") String id,
		   HttpServletRequest request){		
		CourseKpointRel coursekpointrel = courseKpointRelService.get(id);
		this.bindObject(request, coursekpointrel);
		courseKpointRelService.update(coursekpointrel);
		return this.getMessager().success();
	}
	
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")	
	public @ResponseBody Map<String, Object> delete(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		String id = request.getParameter("id");
		System.out.println(id);
		courseKpointRelService.deleteByIds(ids);
		return this.getMessager().success();
	}
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/deleteOne")	
	public @ResponseBody Map<String, Object> deleteOne(HttpServletRequest request){
		String id = request.getParameter("id");
		courseKpointRelService.deleteById(id);
		return this.getMessager().success();
	}
	/**
	 * 上移或者下移
	 * @param request
	 * @return
	 */
	@RequestMapping("/kpointUpOrDown")	
	public @ResponseBody Map<String, Object> kpointUpOrDown(@RequestParam("id") String id,@RequestParam("type") String type,HttpServletRequest request){
		courseKpointRelService.updateKpointUpOrDown(id,type);
		return this.getMessager().success();
	}

	
}
