package com.insplatform.module.osta.question.service.impl;

import java.io.Serializable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.common.utils.JsonUtil;
import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.osta.question.model.OstaQuestion;
import com.insplatform.module.osta.question.model.OstaQuestionAnswer;
import com.insplatform.module.osta.question.repository.OstaQuestionAnswerRepository;
import com.insplatform.module.osta.question.repository.OstaQuestionRepository;
import com.insplatform.module.osta.question.service.OstaQuestionService;
import com.insplatform.module.resource.service.ResourceService;

@Service
public class OstaQuestionServiceImpl extends BaseServiceImpl<OstaQuestion> implements OstaQuestionService{
	
	@Autowired
	private OstaQuestionRepository ostaQuestionRepository;
	
	@Autowired
	private OstaQuestionAnswerRepository ostaQuestionAnswerRepository;
	
	@Autowired
	private ResourceService resourceService;

	@Override
	public BaseRepository<OstaQuestion> getRepository() {		
		return ostaQuestionRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return ostaQuestionRepository.loadAllGrid(condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return ostaQuestionRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return ostaQuestionRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public OstaQuestion get(Serializable id) {		
		return ostaQuestionRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(OstaQuestion entity, String answer) {	
		String id = (String) ostaQuestionRepository.save(entity);
		//设置答案
		saveAnswer(id, entity.getType(), answer);	
		
		return id;
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(OstaQuestion entity, String answer) {		
		ostaQuestionRepository.update(entity);
		//设置答案
		saveAnswer(entity.getId(), entity.getType(), answer);	
	}
	
	/**
	 * 设置答案
	 * @param id    	试题id
	 * @param type		试题类型
	 * @param answer	答案
	 */
	@SuppressWarnings("rawtypes")
	private void saveAnswer(String id, String type, String answer){
		//删除答案
		ostaQuestionAnswerRepository.deleteByQueIds(new String[]{id});		
		
		if("1".equals(type) || "2".equals(type)){
			//重新添加答案			
			Map answerObj = JsonUtil.toObject(answer, Map.class);
			List answers = (List) answerObj.get("answers");
			Iterator iter = answers.iterator();
			while(iter.hasNext()){
				Map map = (Map) iter.next();			
				String ans = map.get("answer") == null ? null : map.get("answer")+"" ;
				String img = map.get("img") == null ? null : map.get("img")+"" ;
				String isRight = map.get("isRight") == null ? null : map.get("isRight")+"" ;
				String no = map.get("no") == null ? null : map.get("no")+"" ;
				OstaQuestionAnswer qa = new OstaQuestionAnswer();
				qa.setAnswer(ans);
				qa.setQueId(id);
				qa.setImg(img);
				qa.setIsRight(isRight);
				qa.setNo(Integer.parseInt(no));
				ostaQuestionAnswerRepository.save(qa);
			}
		}else if("3".equals(type) || "4".equals(type)){
			OstaQuestionAnswer qa = new OstaQuestionAnswer();
			qa.setAnswer(answer);
			qa.setQueId(id);
			qa.setIsRight("Y");
			ostaQuestionAnswerRepository.save(qa);
		}
		
		
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		ostaQuestionRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		ostaQuestionRepository.deleteByIds(ids);
		
		//删除关联信息
		resourceService.removeOthersByIds("QUESTION", ids);
	}

}
