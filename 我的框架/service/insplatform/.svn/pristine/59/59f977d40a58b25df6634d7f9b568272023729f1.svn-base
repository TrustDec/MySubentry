package com.insplatform.module.trainbasedormitory.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.stereotype.Repository;

import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insplatform.module.trainbasedormitory.model.TrainbaseDormitory;
import com.insplatform.module.trainbasedormitory.repository.TrainbaseDormitoryRepository;

import com.insframework.system.map.Condition;


@Repository
public class TrainbaseDormitoryRepositoryImpl extends BaseRepositoryImpl<TrainbaseDormitory> implements TrainbaseDormitoryRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.* from PX_TRAINBASE_DORMITORY t where 1=1";
		
		if(condition.containsKey("name")){
			sql += " and t.name like ? ";
			condition.put("name", "%" + condition.get("name") + "%" );
		}
		
		if(condition.containsKey("type")){
			sql += " and t.type like ? ";
			condition.put("type", condition.get("type"));
		}
		
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_TRAINBASE_DORMITORY t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_TRAINBASE_DORMITORY t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public TrainbaseDormitory get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TrainbaseDormitory entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(TrainbaseDormitory entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}
	
}
