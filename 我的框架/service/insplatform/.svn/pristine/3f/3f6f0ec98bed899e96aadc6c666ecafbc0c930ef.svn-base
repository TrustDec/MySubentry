package com.insplatform.module.bbs.questionanswer.repository.impl;

import java.io.Serializable;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

import org.springframework.stereotype.Repository;

import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insplatform.module.bbs.questionanswer.model.BbsQuestionAnswer;
import com.insplatform.module.bbs.questionanswer.repository.BbsQuestionAnswerRepository;

import com.insframework.system.map.Condition;


@Repository
public class BbsQuestionAnswerRepositoryImpl extends BaseRepositoryImpl<BbsQuestionAnswer> implements BbsQuestionAnswerRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.* from PX_BBS_QUESTION_ANSWER t ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_BBS_QUESTION_ANSWER t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_BBS_QUESTION_ANSWER t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public BbsQuestionAnswer get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(BbsQuestionAnswer entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(BbsQuestionAnswer entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public List<Map<String, Object>> loadAcceptApply(String pid) {
		String sql = "select t.* from px_bbs_question_answer t " +
				" where t.pid = ? and t.isnot_accept = 'Y'";
		return jdbcAssistant.query(sql,new Object[]{pid});
	}

	@Override
	public List<Map<String, Object>> loadAllByApplyNum() {
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Calendar c =Calendar.getInstance();
		String currentTime = format.format(c.getTime());
		c.add(Calendar.WEEK_OF_MONTH, -1);
		String prevWeekCurrentTime = format.format(c.getTime());
		
		String sql = "select h.* from " +
				" (select t.answer_person_id,t.answer_person_name,count(t.answer_person_id) answernum" +
				" from (select * from PX_BBS_QUESTION_ANSWER bq " +
				" where bq.create_time <= to_date('"+currentTime+"','yyyy-mm-dd hh24:mi:ss') " +
				" and bq.create_time >= to_date('"+prevWeekCurrentTime+"','yyyy-mm-dd hh24:mi:ss')  ) t" +
				" group by t.answer_person_id,t.answer_person_name ) h" +
				" where rownum<10" +
				" order by answernum desc";
		return jdbcAssistant.query(sql);
	}

	@Override
	public List<Map<String, Object>> loadAllByPid(String pid) {
		String sql = "select t.* from px_bbs_question_answer t where t.pid = ? order by t.isnot_accept,t.create_time desc";
		List<Map<String, Object>> list = jdbcAssistant.query(sql,new Object[]{pid});
		for (Map<String, Object> map : list) {
			sql = "select t.id, t.question_answer_id, t.content, t.create_person_id, t.create_person_name," +
					" t.create_time, t.receiver_person_id, t.receiver_person_name" +
					" from px_bbs_question_answer_hf t" +
					" where t.question_answer_id = '"+map.get("id")+"'" +
					" order by t.create_time";
			map.put("answerChild", jdbcAssistant.query(sql));
		}
		return list;
	}

	@Override
	public int accept(String id) {
		String sql = "update px_bbs_question_answer set isnot_accept = 'Y' where id = ?";
		return jdbcAssistant.update(sql,new Object[]{id});
	}
	
}
