package com.insplatform.module.examiner.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.stereotype.Repository;

import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insplatform.module.examiner.model.Examiner;
import com.insplatform.module.examiner.repository.ExaminerRepository;

import com.insframework.system.map.Condition;


@Repository
public class ExaminerRepositoryImpl extends BaseRepositoryImpl<Examiner> implements ExaminerRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.id,t.user_id,t.name,t.id_card,t.sex,t.phone,t.company_id,t.company_name," +
				"(select name from SYS_DICT where id = t.edu) as edu," +
				"t.create_user_id,t.create_user_name,t.create_time,t.update_time " +
				"from PX_EXAMINER t where 1=1 ";
		
		if(condition.containsKey("name")){
			sql += " and t.name like  ? ";
			condition.put("name", "%" + condition.get("name") + "%");
		}
		
		if(condition.containsKey("companyName")){
			sql += " and t.COMPANY_NAME like  ? ";
			condition.put("companyName", "%" + condition.get("companyName") + "%");
		}
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_EXAMINER t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_EXAMINER t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public Examiner get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(Examiner entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(Examiner entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}
	
}
