package com.insplatform.module.training.curriculum.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.stereotype.Repository;

import com.insframework.common.spring.jdbc.mapper.ValueMapper;
import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insplatform.module.training.curriculum.model.TrainingCurriculum;
import com.insplatform.module.training.curriculum.repository.TrainingCurriculumRepository;

import com.insframework.system.map.Condition;


@Repository
public class TrainingCurriculumRepositoryImpl extends BaseRepositoryImpl<TrainingCurriculum> implements TrainingCurriculumRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.id,t.course,t.address,to_char(t.stat_time,'yyyy-mm-dd hh24:mi') as stat_time, to_char(t.stop_time,'yyyy-mm-dd hh24:mi') as stop_time, (case when t.course is null then   t.coursename  else (select tt.title  from PX_COURSE tt where tt.id=t.course) end) " +
				"as coursename  from PX_TRAINING_CURRICULUM t where 1=1";
		if(condition.containsKey("pxTrainingScheme"))
		{
			sql += " and t.px_training_scheme = ? ";
			condition.put("pxTrainingScheme", condition.get("pxTrainingScheme"));
		}
		sql += " order by t.stat_time";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray(),new ValueMapper() {
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				String sql="select us.name from PX_TRAINING_CURRICULUM_TEACHER t,PX_TEACHER te,SYS_USER us where t.teacher_id=te.user_id and te.user_id=us.id and t.px_training_curriculum='"+record.get("id")+"'";
				List<Map<String, Object>> list=jdbcAssistant.query(sql);
				 String name="";
				 for(Map<String, Object> map : list){
					 name+=map.get("name").toString()+",";
				 }
				if(TextUtil.isNotEmpty(name))
				{
					name=name.substring(0,name.lastIndexOf(","));
				}
				record.put("teacherListName", name);
				return RETURN_CODE.NEXT;
			}
		});
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_TRAINING_CURRICULUM t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_TRAINING_CURRICULUM t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public TrainingCurriculum get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TrainingCurriculum entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(TrainingCurriculum entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}


	@Override
	public void addCurrculum(String[] ids, Condition condition) {
		String pxTrainingScheme=condition.get("pxTrainingScheme").toString();
		for (int i = 0; i < ids.length; i++) {
			
			String sql="select * from PX_TRAINING_CURRICULUM t  where t.px_training_scheme='"+pxTrainingScheme+"' and t.course='"+ids[i]+"'";
			List<Map<String, Object>> list=jdbcAssistant.query(sql);
			if(list.size()==0)
			{
				String insertSql ="insert into PX_TRAINING_CURRICULUM  (id, course, coursename, stat_time, stop_time, px_training_scheme, create_user_id, create_user_name, create_time, update_time) " +
						"values ('"+TextUtil.getUUID()+"', '"+ids[i]+"', '', '', '', '"+pxTrainingScheme+"', '"+condition.getCurrentUser().getId()+"', '"+condition.getCurrentUser().getName()+"', sysdate, sysdate)";
				jdbcAssistant.execute(insertSql);
			}
		}
		
		
	}
	
}
