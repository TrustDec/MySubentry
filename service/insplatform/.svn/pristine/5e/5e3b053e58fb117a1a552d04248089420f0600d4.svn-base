package com.insplatform.module.training.meeting.controller;

import java.io.Serializable;
import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import com.insframework.system.base.controller.BaseController;
import com.insframework.system.map.Condition;
import com.insplatform.module.attachment.service.AttachmentsFileService;
import com.insplatform.module.training.meeting.model.TrainingStartMeeting;
import com.insplatform.module.training.meeting.service.TrainingStartMeetingService;

@Controller
@RequestMapping("/px/trainingstartmeeting")
public class TrainingStartMeetingController extends BaseController{
	
	@Autowired
	private TrainingStartMeetingService trainingStartMeetingService;
	
	
	@Autowired
	private AttachmentsFileService attachmentsFileService;
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGrid")
	public @ResponseBody Map<String, Object> loadAllGrid(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"pxTrainingScheme");
		return trainingStartMeetingService.loadAllGrid(condition);
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllList")
	public @ResponseBody Map<String, Object> loadAllList(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return this.getMessager().success().data(trainingStartMeetingService.loadAllList(condition));
	}	
	
	
	/**
	 * 加载单条数据
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody Map<String, Object> load(@RequestParam("id") String id){		
		return this.getMessager().success().data(trainingStartMeetingService.load(id));		
	}
	
	/**
	 * 新增
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")	
	public @ResponseBody Map<String, Object> add(TrainingStartMeeting trainingstartmeeting, HttpServletRequest request){
		trainingstartmeeting.setUpdateTime(new Date());
		trainingstartmeeting.setCreateTime(new Date());
		trainingstartmeeting.setCreateUserId(this.getCurrentUser(request).getId());
		trainingstartmeeting.setCreateUserName(this.getCurrentUser(request).getName());
		Serializable saveid=trainingStartMeetingService.save(trainingstartmeeting);
		attachmentsFileService.batchSaveFiles(saveid.toString(), "开班议程", request);
		return this.getMessager().success();
	}
	
	/**
	 * 编辑
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")	
	public @ResponseBody Map<String, Object> update(
		   @RequestParam("id") String id,
		   HttpServletRequest request){		
		TrainingStartMeeting trainingstartmeeting = trainingStartMeetingService.get(id);
		this.bindObject(request, trainingstartmeeting);
		trainingstartmeeting.setUpdateTime(new Date());
		trainingStartMeetingService.update(trainingstartmeeting);
		attachmentsFileService.batchSaveFiles(trainingstartmeeting.getId(), "开班议程", request);
		return this.getMessager().success();
	}
	
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")	
	public @ResponseBody Map<String, Object> delete(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		trainingStartMeetingService.deleteByIds(ids);
		attachmentsFileService.deleteByIds(ids);
		return this.getMessager().success();
	}

	
}
