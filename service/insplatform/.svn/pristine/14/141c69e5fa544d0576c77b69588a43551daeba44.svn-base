package com.insplatform.module.course.course.repository.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field.Store;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.springframework.stereotype.Repository;

import com.insframework.common.spring.jdbc.mapper.ValueMapper;
import com.insframework.common.utils.DateUtil;
import com.insframework.common.utils.LuceneUtil;
import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.constant.LuceneIndex;
import com.insplatform.module.course.course.model.Course;
import com.insplatform.module.course.course.repository.CourseRepository;


@Repository
public class CourseRepositoryImpl extends BaseRepositoryImpl<Course> implements CourseRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {
		//"title","difficulty","release","createUser"
		List<Object> queryParams = new ArrayList<Object>();
		String sql = "select t.id, t.title, t.info, t.info2, t.difficulty, t.img, t.release, t.course_time, t.tag," +
				" t.create_user_id, t.create_user_name, t.create_time, t.update_time," +
				" t.course_type, t.is_delete, sd.name course_classify" +
				" from px_course t" +
				" left join sys_dict sd on sd.id = t.course_classify" +
				" where 1=1 and t.is_delete = 'N'";
		String title = condition.get("title")+"";
		if (TextUtil.isNotEmpty(title)) {
			sql += " and t.title like ?";
			queryParams.add("%"+title+"%");
		}
		String difficulty = condition.get("difficulty")+"";
		if (TextUtil.isNotEmpty(difficulty)) {
			sql += " and t.difficulty = ?";
			queryParams.add(difficulty);
		}
		String release = condition.get("release")+"";
		if (TextUtil.isNotEmpty(release)) {
			sql += " and t.release = ?";
			queryParams.add(release);
		}
		String createUserName = condition.get("createUserName")+"";
		if (TextUtil.isNotEmpty(createUserName)) {
			sql += " and t.create_user_name like ?";
			queryParams.add("%"+createUserName+"%");
		}
		sql += "order by t.update_time desc";
		return gridService.loadData(condition.getGridTransModel(), sql, queryParams.toArray(),new ValueMapper() {

			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				if ("Y".equals(record.get("release"))) {
					record.put("release", "已发布");
				}else {
					record.put("release", "未发布");
				}
				mapperDifficulty(record);
				//课程类型映射
				mapperCourseType(record);
				return RETURN_CODE.NEXT;
			}
		});
	}
	
	@Override
	public Map<String, Object> loadAllChooser(Condition condition) {
		List<Object> queryParams = new ArrayList<Object>();
		String sql = "select t.* from PX_COURSE t where t.release = 'Y' and t.is_delete = 'N'";
		String title = condition.get("title")+"";
		if (TextUtil.isNotEmpty(title)) {
			sql += " and t.title like ?";
			queryParams.add("%"+title+"%");
		}
		String difficulty = condition.get("difficulty")+"";
		if (TextUtil.isNotEmpty(difficulty)) {
			sql += " and t.difficulty = ?";
			queryParams.add(difficulty);
		}
		String courseType = condition.get("courseType")+"";
		if (TextUtil.isNotEmpty(courseType)) {
			sql += " and t.course_type = ?";
			queryParams.add(courseType);
		}
		String createUserName = condition.get("createUserName")+"";
		if (TextUtil.isNotEmpty(createUserName)) {
			sql += " and t.create_user_name like ?";
			queryParams.add("%"+createUserName+"%");
		}
		sql += "order by update_time desc";
		return gridService.loadData(condition.getGridTransModel(), sql, queryParams.toArray(),new ValueMapper() {
			
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				mapperDifficulty(record);
				//课程类型映射
				mapperCourseType(record);

				return RETURN_CODE.NEXT;
			}
		});
	}

	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_COURSE t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.id, t.title, t.info, t.info2, t.difficulty, t.img, t.release, t.course_time, t.tag," +
				" t.create_user_id, t.create_user_name, t.create_time, t.update_time," +
				" t.course_type, t.is_delete, sd.name course_classify" +
				" from px_course t" +
				" left join sys_dict sd on sd.id = t.course_classify" +
				" where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	

	@Override
	public Map<String, Object> loadByDetails(String id) {
		String sql = "select t.id,t.title,t.info,t.tag,t.course_time,t.info2,t.difficulty,update_time,release,create_user_name," +
				" to_char(t.update_time, 'yyyy-MM-dd HH24:mi') as update_time_template " +
			 " from PX_COURSE t where t.id =  '"+id+"' ";
		return jdbcAssistant.queryOne(sql, null, new ValueMapper(){
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				mapperDifficulty(record);
				
				//获取课程标签
				String tagIds = "";
				if(record.get("tag")!=null){
					tagIds = record.get("tag").toString();
				}				
				String tagNames = "";				
				for(int i=0; i<tagIds.split(",").length; i++ ){
					String tagId = tagIds.split(",")[i];
					String sql = "select name from SYS_DICT where id = '"+tagId+"'";
					String tagName = jdbcAssistant.queryAsString(sql);
					if(i == tagIds.split(",").length - 1){
						tagNames += tagName;
					}else{
						tagNames += tagName + "、";
					}					
				}
				
				record.put("tagName", tagNames);
				
				return RETURN_CODE.NEXT;
			}
		});		
	}
	
	/**
	 * 移动端获取课程详情
	 */
	@Override
	public Map<String, Object> loadCourseDetailFromMobile(String courseId) {
		String sql = "select t.id,t.title,t.info,t.tag,t.course_time,t.info2,t.difficulty,update_time,release,create_user_name," +
				" to_char(t.update_time, 'yyyy-MM-dd HH24:mi') as update_time_template " +
			 " from PX_COURSE t where t.id =  '"+courseId+"' ";
		Map<String,Object> map = jdbcAssistant.queryOne(sql);
		
		String tagIds = "";
		if(map.get("tag") !=null){
			tagIds = map.get("tag").toString();
		}
		
		String tagNames = "";				
		for(int i=0; i<tagIds.split(",").length; i++ ){
			String tagId = tagIds.split(",")[i];
			String sqls = "select name from SYS_DICT where id = '"+tagId+"'";
			String tagName = jdbcAssistant.queryAsString(sqls);
			if(i == tagIds.split(",").length - 1){
				tagNames += tagName;
			}else{
				tagNames += tagName + "、";
			}					
		}
		
		map.put("tagName", tagNames);
		return map;
	}
	
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public Course get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(Course entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(Course entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
		this.deleteLuceneIndex(id+"");
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {
		if(ids!=null &&ids.length > 0){
			String[] sqls = new String[ids.length];
			String tmpl = "update px_course set is_delete = 'Y' where release = 'N' and id = '";
			for (int i = 0; i < ids.length; i++) {
				sqls[i] = tmpl+ids[i]+"'";
			}
			jdbcAssistant.batchUpdate(sqls);
		}
		this.deleteLuceneIndex(ids);
	}

	@Override
	public int releaseCourse(String courseId, String yOrN) {
		if (!"Y".equals(yOrN)&&!"N".equals(yOrN)) {
			return -1;
		}
		String sql = "update px_course set release = ? where id = ?";
		int result = jdbcAssistant.update(sql,new Object[]{yOrN, courseId});
		Course entity = super.get(courseId);
		if (entity!=null) {
			this.createLuceneIndex(entity);
		}
		return result;
	}
	
	
	public void createLuceneIndex(Course entity) {
		if ("Y".equals(entity.getRelease())) {
			//建全文检索的索引
			Document doc = new Document();
			doc.add(new StringField("id", entity.getId(), Store.YES));
			doc.add(new TextField("title", entity.getTitle(), Store.YES));
			doc.add(new TextField("info", TextUtil.delHTMLTag(entity.getInfo()), Store.YES));
			doc.add(new StringField("updateTime", DateUtil.dateToString(entity.getUpdateTime(), "yyyy-MM-dd HH:mm:ss"), Store.YES));
			LuceneUtil.saveOrUpdateIndex(LuceneIndex.COURSE_INDEX.getValue(), doc);
		}else {
			this.deleteLuceneIndex(entity.getId());
		}
	}

	/**
	 * 删除索引
	 * @param ids
	 */
	private void deleteLuceneIndex(String... ids){
		LuceneUtil.deleteIndex(LuceneIndex.COURSE_INDEX.getValue(), ids);
	};
	

	@Override
	public boolean thisCourseCanRelease(String courseId) {
		String sql = "select count(course_id) amount from px_course_worktype cw where cw.course_id  = ?";
		Map<String, Object> workTypeNum = jdbcAssistant.queryOne(sql,new Object[]{courseId});
		sql = "select count(ck.id) amount from px_course_kpoint_resource ckr" +
				" left join px_course_kpoint_rel ck on ckr.course_kpoint_id = ck.id" +
				" where ck.course_id  = ?";
		Map<String, Object> kpointNum = jdbcAssistant.queryOne(sql,new Object[]{courseId});
		return Integer.parseInt(workTypeNum.get("amount")+"")>0&&Integer.parseInt(kpointNum.get("amount")+"")>0;
	}

	@Override
	public List<Map<String, Object>> loadHomeCourseList() {
		String sql = " select * from " +
				"(select id,title,info,course_time,difficulty,img,to_char(update_time,'yyyy-MM-dd HH24:mi') as update_time" +
				" from PX_COURSE where release='Y' and is_delete='N'　order by update_time desc) " +
				" where rownum<=8 ";		
		return jdbcAssistant.query(sql, null,new ValueMapper(){
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				mapperDifficulty(record);
				return RETURN_CODE.NEXT;
			}
		} );
	}
	
	
	private void mapperDifficulty(Map<String, Object> record){
		if ("1".equals(record.get("difficulty"))) {
			record.put("difficulty", "初级");
		} else if ("2".equals(record.get("difficulty"))) {
			record.put("difficulty", "中级");
		} else if ("3".equals(record.get("difficulty"))) {
			record.put("difficulty", "高级");
		} 
	}
	
	private void mapperCourseType(Map<String, Object> record){
		if ("1".equals(record.get("courseType"))) {
			record.put("courseType", "课程");
		} else if ("2".equals(record.get("courseType"))) {
			record.put("difficulty", "教案");
		}  
	}

	@Override
	public boolean hasStudyedCourse(String id, String courseId) {
		String sql = "select count(1) from PX_COURSE_USER_STUDYED where user_id = '"+id+"' and course_id = '"+courseId+"'";
		int count = jdbcAssistant.queryAsInt(sql);
		if(count > 0){
			return true;
		}
		return false;
	}

	@Override
	public boolean hasFocusCourse(String id, String courseId) {
		String sql = "select count(1) from PX_COURSE_USER_FOCUS where user_id = '"+id+"' and course_id = '"+courseId+"'";
		int count = jdbcAssistant.queryAsInt(sql);
		if(count > 0){
			return true;
		}
		return false;
	}

	@Override
	public Map<String, Object> loadAllWorkType(Condition condition) {
		String sql = "select * from V_PX_WORKTYPE t where 1=1 ";
				
		if(condition.containsKey("worktypeId")){
			sql += " and worktype_id = ? ";
		}
		if(condition.containsKey("worktypeClassifyId")){
			sql += " and worktype_classify_id = ? ";
		}
		if(condition.containsKey("fullName")){
			sql += " and full_name like ? ";
			condition.put("fullName", "%" + condition.get("fullName") + "%");
		}
		if(condition.containsKey("courseId")){
			sql += " and t.id not in (select cw.worktype_id from px_course_worktype cw where cw.course_id = ?)";
		}
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}

	/**
	 * 移动端首页加载课程
	 */
	@Override
	public List<Map<String, Object>> loadHomeCourseFromMobile() {
		String sql = " select * from " +
				"(select id,title,info,course_time,difficulty,img,to_char(update_time,'yyyy-MM-dd HH24:mi') as update_time" +
				" from PX_COURSE where release='Y' order by update_time desc) " +
				" where rownum<=8 ";
		return jdbcAssistant.query(sql);
	}

	
}
