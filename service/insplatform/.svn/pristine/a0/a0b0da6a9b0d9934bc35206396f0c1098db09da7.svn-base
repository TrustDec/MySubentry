package com.insplatform.module.trainingimplement.service.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.trainingimplement.model.TrainingGuide;
import com.insplatform.module.trainingimplement.repository.TrainingGuideRepository;
import com.insplatform.module.trainingimplement.service.TrainingGuideService;

@Service
public class TrainingGuideServiceImpl extends BaseServiceImpl<TrainingGuide> implements TrainingGuideService{
	
	@Autowired
	private TrainingGuideRepository trainingGuideRepository;

	@Override
	public BaseRepository<TrainingGuide> getRepository() {		
		return trainingGuideRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return trainingGuideRepository.loadAllGrid(condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return trainingGuideRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return trainingGuideRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public TrainingGuide get(Serializable id) {		
		return trainingGuideRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TrainingGuide entity) {	
		return trainingGuideRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(TrainingGuide entity) {		
		trainingGuideRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		trainingGuideRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		trainingGuideRepository.deleteByIds(ids);
	}

	@Override
	public Map<String, Object> loadPositon(Condition condition) {
		return trainingGuideRepository.loadPositon(condition);
	}

	@Override
	public Serializable save(TrainingGuide trainingguide,
			HttpServletRequest request) {
		return trainingGuideRepository.save(trainingguide, request);
	}

	@Override
	public void addEat(String trainGuideId, String trainSchemeId, String name, String trainBaseEatId,
			String address, String dateStart, String dateEnd) {
		trainingGuideRepository.addEat(trainGuideId,trainSchemeId,name, trainBaseEatId, address,dateStart,dateEnd);
	}

	@Override
	public Map<String, Object> loadAllGridEat(Condition condition) {
		return trainingGuideRepository.loadAllGridEat(condition);
	}

	@Override
	public Map<String, Object> loadEat(String id) {
		return trainingGuideRepository.loadEat(id);
	}

	@Override
	public void updateEat(String id, String trainGuideId, String trainSchemeId,
			String name, String trainBaseEatId, String address, String dateStart, String dateEnd) {
		trainingGuideRepository.updateEat(id,trainGuideId,trainSchemeId,name,trainBaseEatId,address,dateStart,dateEnd);
	}

	@Override
	public void deleteEat(String[] ids) {
		trainingGuideRepository.deleteEat(ids);
	}

	@Override
	public Map<String, Object> loadWeater(String id) {
		return trainingGuideRepository.loadWeater(id);
	}

	@Override
	public void deleteWeater(String[] ids) {
		trainingGuideRepository.deleteWeater(ids);
	}

	@Override
	public void addWeater(String trainGuideId, String trainSchemeId,
			String date, String type, String lowTemperature,
			String highTemperature) {
		trainingGuideRepository.addWeater(trainGuideId,trainSchemeId,date,type,lowTemperature,highTemperature);
	}

	@Override
	public void updateWeater(String id, String trainGuideId,
			String trainSchemeId, String date, String type,
			String lowTemperature, String highTemperature) {
		trainingGuideRepository.updateWeater(id,trainGuideId,trainSchemeId,date,type,lowTemperature,highTemperature);
	}

	@Override
	public Map<String, Object> loadAllGridWeater(Condition condition) {
		return trainingGuideRepository.loadAllGridWeater(condition);
	}

}
