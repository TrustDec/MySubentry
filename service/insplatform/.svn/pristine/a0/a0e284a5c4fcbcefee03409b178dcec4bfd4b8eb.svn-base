package com.insplatform.module.trainingimplement.service.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;
import com.insplatform.module.trainingimplement.model.TrainingUserRoster;
import com.insplatform.module.trainingimplement.repository.TrainingUserRosterRepository;
import com.insplatform.module.trainingimplement.service.TrainingUserRosterService;

@Service
public class TrainingUserRosterServiceImpl extends
		BaseServiceImpl<TrainingUserRoster> implements
		TrainingUserRosterService {

	@Autowired
	private TrainingUserRosterRepository trainingUserRosterRepository;

	@Override
	public BaseRepository<TrainingUserRoster> getRepository() {
		return trainingUserRosterRepository;
	}

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {
		return trainingUserRosterRepository.loadAllGrid(condition);
	}

	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {
		return trainingUserRosterRepository.loadAllList(condition);
	}

	@Override
	public List<Map<String, Object>> load(String id) {
		return trainingUserRosterRepository.load(id);
	}

	/**
	 * 重写父类get方法
	 */
	@Override
	public TrainingUserRoster get(Serializable id) {
		return trainingUserRosterRepository.get(id);
	}

	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TrainingUserRoster entity) {
		return trainingUserRosterRepository.save(entity);
	}

	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(TrainingUserRoster entity) {
		trainingUserRosterRepository.update(entity);
	}

	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {
		trainingUserRosterRepository.deleteById(id);
	}

	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {
		trainingUserRosterRepository.deleteByIds(ids);
	}

	@Override
	public void add(String id, String[] ids, CurrentUser user) {
		trainingUserRosterRepository.add(id, ids, user);
	}

	@Override
	public void isChecking(String id, String[] ids, String statu) {
		trainingUserRosterRepository.isChecking(id, ids, statu);
	}

	@Override
	public void addOrUpadteUser(String id,String courseId) {
		trainingUserRosterRepository.addOrUpadteUser(id, courseId);
	}

	@Override
	public List<Map<String, Object>> loadAllQueryClockGrid(Condition condition) {
		return trainingUserRosterRepository.loadAllQueryClockGrid(condition);
	}

	@Override
	public void isCheckingChecked(String id, String schemeId, String statu, String [] idSer, String courseId) {
		trainingUserRosterRepository.isCheckingChecked(id, schemeId, statu, idSer, courseId);
	}

	@Override
	public Map<String, Object> updateResult(String id, String result, String remark) {
		return trainingUserRosterRepository.updateResult(id, result, remark);
	}

	@Override
	public Map<String, Object> loadData(String id) {
		return trainingUserRosterRepository.loadData(id);
	}

	@Override
	public List<Map<String, Object>> loadAllListIsChecking(Condition condition) {
		return trainingUserRosterRepository.loadAllListIsChecking(condition);
	}

	@Override
	public void userGroup(Condition condition, String[] ids, String userGroup, String trainingSchemeId) {
		trainingUserRosterRepository.userGroup(condition, ids, userGroup, trainingSchemeId);
	}

	@Override
	public Map<String, Object> loadEdit(String id,String trainingSchemeId) {
		return trainingUserRosterRepository.loadEdit(id, trainingSchemeId);
	}

	@Override
	public void update(String phone, String id) {
		trainingUserRosterRepository.update(phone, id);
	}

	@Override
	public void remark(String id, String remark) {
		trainingUserRosterRepository.remark(id, remark);
	}

	@Override
	public Map<String, Object> loadRemark(String id) {
		return trainingUserRosterRepository.loadRemark(id);
	}

	@Override
	public Map<String, Object> addorupdateremark(String id, String remark) {
		return trainingUserRosterRepository.addorupdateremark(id, remark);
	}

	@Override
	public Map<String, Object> loadDataCheckResult(String id) {
		return trainingUserRosterRepository.loadDataCheckResult(id);
	}

	@Override
	public Map<String, Object> checkGroup(String id) {
		return trainingUserRosterRepository.checkGroup(id);
	}

}
