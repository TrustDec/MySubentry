package com.insplatform.module.trainingimplement.repository.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.web.multipart.MultipartFile;

import com.insframework.component.service.file.UploadService;
import com.insframework.component.service.file.bean.FileBean;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.trainingimplement.model.TrainingLeave;
import com.insplatform.module.trainingimplement.repository.TrainingLeaveRepository;


@Repository
public class TrainingLeaveRepositoryImpl extends BaseRepositoryImpl<TrainingLeave> implements TrainingLeaveRepository{

	@Autowired
	private UploadService uploadService;
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.* from PX_TRAINING_LEAVE t where 1=1";
		if(condition.containsKey("id"))
		{
			sql += "and training_scheme_id = ?";
			condition.put("id", condition.get("id"));
		}
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_TRAINING_LEAVE t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_TRAINING_LEAVE t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public TrainingLeave get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TrainingLeave entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(TrainingLeave entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public Serializable save(TrainingLeave entity,
			HttpServletRequest request) {
		upLoad(entity,request);
		return super.save(entity);
	}

	@Override
	public void update(TrainingLeave trainingLeave, HttpServletRequest request) {
		upLoad(trainingLeave,request);
		super.update(trainingLeave);
	}
	
	public void upLoad(TrainingLeave entity,
			HttpServletRequest request){
		MultipartFile file = uploadService.getMultipartFile(request, "file");
		entity.setOriginalName(file.getOriginalFilename());
		FileBean fileBean = null;
		try {
			fileBean = uploadService.uploadFile(file);			
		} catch (Exception e) {		
			e.printStackTrace();
		}
		entity.setLeaveUrl(fileBean.getUrl());
		entity.setLeavePath(fileBean.getPath());
	}
}
