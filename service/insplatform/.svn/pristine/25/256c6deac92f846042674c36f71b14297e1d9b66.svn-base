package com.insplatform.module.osta.register.notice.service.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.map.Condition;
import com.insframework.system.map.Messager;
import com.insplatform.module.attachment.service.AttachmentsService;
import com.insplatform.module.osta.register.notice.model.OstaRegNotice;
import com.insplatform.module.osta.register.notice.repository.OstaRegNoticeRepository;
import com.insplatform.module.osta.register.notice.service.OstaRegNoticeService;

@Service
public class OstaRegNoticeServiceImpl extends BaseServiceImpl<OstaRegNotice> implements OstaRegNoticeService{
	
	@Autowired
	private OstaRegNoticeRepository ostaRegNoticeRepository;
	
	/**
	 * 上传附件服务
	 */
	@Autowired
	private AttachmentsService attachmentsService;

	@Override
	public BaseRepository<OstaRegNotice> getRepository() {		
		return ostaRegNoticeRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return ostaRegNoticeRepository.loadAllGrid(condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return ostaRegNoticeRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return ostaRegNoticeRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public OstaRegNotice get(Serializable id) {		
		return ostaRegNoticeRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(OstaRegNotice entity) {
		return ostaRegNoticeRepository.save(entity);
	}
	
	@Override
	public String saveAndFiles(OstaRegNotice obj,
			HttpServletRequest request){
		String id = ostaRegNoticeRepository.save(obj).toString();
		attachmentsService.batchSaveFiles(id,request);
		return id;
	}

	@Override
	public void updateAndFiles(OstaRegNotice ostaregnotice,
			HttpServletRequest request) {
		ostaRegNoticeRepository.update(ostaregnotice);
		attachmentsService.batchSaveFiles(ostaregnotice.getId(),request);
	}

	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(OstaRegNotice entity) {		
		ostaRegNoticeRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		ostaRegNoticeRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		ostaRegNoticeRepository.deleteByIds(ids);
	}

	@Override
	public String updateState(Condition condition) {
		if (condition.containsKey("id")&&condition.containsKey("state")) {
			String state = condition.get("state").toString();
			String id = condition.get("id").toString();
			if ("A".equals(state)||"B".equals(state)||"C".equals(state)) {
				String msg = ostaRegNoticeRepository.beforeUpdateStateCheck(id,state);
				if (msg!=null) {
					return msg;
				}
				return ostaRegNoticeRepository.updateState(id,state);
			}
		}
		return "noParm";
	}

	@Override
	public Map<String, Object> deleteByIdsx(String[] ids) {
		if (ids == null || ids.length==0) {
			return null;
		}
		int delNum = 0;
		int hasChild = 0;
		boolean flag = false;
		for (int i = 0; i < ids.length; i++) {
			flag = ostaRegNoticeRepository.beforeDeleteCheck(ids[i]);
			if (flag) {
				try {
					delNum += ostaRegNoticeRepository.deleteByIdx(ids[i]);
				} catch (Exception e) {
					hasChild++;
					continue;
				}
			}
		}
		return new Messager().put("delNum", delNum)
				.put("noDelNum", ids.length-delNum)
				.put("hasChild", hasChild);
	}

	@Override
	public Map<String, Object> loadAllGridWrite(Condition condition) {
		return ostaRegNoticeRepository.loadAllGridWrite(condition);
	}

}
