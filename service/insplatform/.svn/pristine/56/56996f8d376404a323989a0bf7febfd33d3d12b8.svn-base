package com.insplatform.module.budget.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.stereotype.Repository;

import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insplatform.module.budget.model.Budget;
import com.insplatform.module.budget.repository.BudgetRepository;

import com.insframework.system.map.Condition;


@Repository
public class BudgetRepositoryImpl extends BaseRepositoryImpl<Budget> implements BudgetRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		List<Object> queryParams = new ArrayList<Object>();
		String sql = "select t.* from PX_BUDGET t where 1=1";
		String projectClassifyId = condition.get("budgetClassifyId") + "";
		if (TextUtil.isNotEmpty(projectClassifyId)) {
			sql += " and t.BUDGET_CLASSIFY_ID = ? ";
			queryParams.add(projectClassifyId);
		}
		String name = condition.get("name") + "";
		if (TextUtil.isNotEmpty(name)) {
			sql += " and t.name like ? ";
			queryParams.add("%"+name+"%");
		}
		return gridService.loadData(condition.getGridTransModel(), sql, queryParams.toArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_BUDGET t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_BUDGET t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public Budget get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(Budget entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(Budget entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public Object loadTree(Condition condition) {
		String sql = "(select t.id,t.name as text, bc.id as pid from px_budget t join px_budget_classify bc on(t.budget_classify_id = bc.id)) union (select t.id,t.name as text, null as pid from px_budget_classify t )";
		return treeService.loadData(sql);	
	}
	
}
