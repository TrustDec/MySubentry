package com.insplatform.module.trainingevaluate.service.impl;

import java.io.Serializable;
import java.util.*;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.map.Condition;

import com.insplatform.module.trainingevaluate.model.TrainingEvaluate;
import com.insplatform.module.trainingevaluate.repository.TrainingEvaluateRepository;
import com.insplatform.module.trainingevaluate.service.TrainingEvaluateService;

@Service
public class TrainingEvaluateServiceImpl extends BaseServiceImpl<TrainingEvaluate> implements TrainingEvaluateService{
	
	@Autowired
	private TrainingEvaluateRepository trainingEvaluateRepository;

	@Override
	public BaseRepository<TrainingEvaluate> getRepository() {		
		return trainingEvaluateRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return trainingEvaluateRepository.loadAllGrid(condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return trainingEvaluateRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return trainingEvaluateRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public TrainingEvaluate get(Serializable id) {		
		return trainingEvaluateRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TrainingEvaluate entity) {	
		return trainingEvaluateRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(TrainingEvaluate entity) {		
		trainingEvaluateRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		trainingEvaluateRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		trainingEvaluateRepository.deleteByIds(ids);
	}

	@Override
	public Map<String, Object> getCurriculum(Condition condition) {
		return trainingEvaluateRepository.getCurriculum(condition);
	}

	@Override
	public boolean hasSubEvaluate(String shcemeId) {
		return trainingEvaluateRepository.hasSubEvaluate(shcemeId);
	}

	@Override
	public Map<String, Object> loadAllSchemeInfo(Condition condition,String currentUserId) {
		return trainingEvaluateRepository.loadAllSchemeInfo(condition,currentUserId);
	}

	@Override
	public Map<String, Object> isSubmit(String evaluateId,String currentUserId) {
		return trainingEvaluateRepository.isSubmit(evaluateId,currentUserId);
	}

	@Override
	public Map<String, Object> hasEvaluateOfCurUser(String currentUserId, String schemeId) {
		return trainingEvaluateRepository.hasEvaluateOfCurUser(currentUserId,schemeId);
	}

}
