package com.insplatform.module.userqualification.controller;

import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.controller.BaseController;
import com.insframework.system.map.Condition;
import com.insplatform.module.userqualification.model.UserQualification;
import com.insplatform.module.userqualification.service.UserQualificationService;

@Controller
@RequestMapping("/px/userqualification")
public class UserQualificationController extends BaseController{
	
	@Autowired
	private UserQualificationService userQualificationService;
	
	/**
	 * 根据用户id加载当前用户的资质列表(user_Id)
	 * 
	 * @param user_id 
	 * @return
	 */
	@RequestMapping("/loadAllGrid")
	public @ResponseBody Map<String, Object> loadAllGrid(
			HttpServletRequest request, HttpServletResponse response){
		return userQualificationService.loadAllGrid(this.getCondition(request, "id"));
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllList")
	public @ResponseBody Map<String, Object> loadAllList(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return this.getMessager().success().data(userQualificationService.loadAllList(condition));
	}	
	
	
	/**
	 * 加载单条数据
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody Map<String, Object> load(@RequestParam("id") String id){		
		return this.getMessager().success().data(userQualificationService.load(id));		
	}
	
	/**
	 * 新增
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")	
	public @ResponseBody Map<String, Object> add(UserQualification userqualification){
		userQualificationService.save(userqualification);
		return this.getMessager().success();
	}
	
	/**
	 * 编辑
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")	
	public @ResponseBody Map<String, Object> update(
		   @RequestParam("id") String id,
		   HttpServletRequest request){		
		UserQualification userqualification = userQualificationService.get(id);
		this.bindObject(request, userqualification);
		userQualificationService.update(userqualification);
		return this.getMessager().success();
	}
	
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")	
	public @ResponseBody Map<String, Object> delete(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		userQualificationService.deleteByIds(ids);
		return this.getMessager().success();
	}
	
	
	
	/**
	 * 新增资质证书
	 * 
	 * @param dict
	 * @return
	 */
	@RequestMapping("/addUserQualification")
	public @ResponseBody
	Map<String, Object> addUserQualification(UserQualification userqualification, HttpServletRequest request) {
		Date date = new Date();
		if(TextUtil.isNotEmpty(userqualification.getId())){
			userqualification.setUpdateTime(date);
			userQualificationService.update(userqualification);
		}else{
			userqualification.setCreateTime(date);
			userqualification.setUpdateTime(new Date());
			userQualificationService.save(userqualification);
		}		
		return this.getMessager().success();
	}
	
	/**
	 * 根据加载资质证书列表
	 * 
	 * 
	 * @return
	 */
	@RequestMapping("/loadNameList")
	public @ResponseBody Map<String, Object> loadNameList(
			HttpServletRequest request, HttpServletResponse response){
		return this.getMessager().success().data(userQualificationService.loadNameList(this.getCondition(request)));
	}

	
}
