package com.insplatform.module.course.course.service.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.common.spring.jdbc.mapper.ValueMapper;
import com.insframework.common.utils.TextUtil;
import com.insframework.common.utils.pager.Pager;
import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.curruser.UserSession;
import com.insframework.system.map.Condition;
import com.insplatform.module.course.course.model.Course;
import com.insplatform.module.course.course.repository.CourseRepository;
import com.insplatform.module.course.course.service.CourseService;
import com.insplatform.system.dict.DictConstant;

@Service
public class CourseServiceImpl extends BaseServiceImpl<Course> implements CourseService{
	
	@Autowired
	private CourseRepository courseRepository;

	@Override
	public BaseRepository<Course> getRepository() {		
		return courseRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return courseRepository.loadAllGrid(condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return courseRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return courseRepository.load(id);
	}
	
	@Override
	public Map<String, Object> loadByDetails(String courseId) {		
		return courseRepository.loadByDetails(courseId);
	}

	
	/**
	 * 重写父类get方法
	 */
	@Override
	public Course get(Serializable id) {		
		return courseRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(Course entity) {	
		return courseRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(Course entity) {		
		courseRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		courseRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {
		courseRepository.deleteByIds(ids);
	}

	@Override
	public int updateReleaseCourse(String courseId, String yOrN) {
		boolean result = true;
		if (!"N".equals(yOrN)) {
			result = courseRepository.thisCourseCanRelease(courseId);
		}
		if (result||"N".equals(yOrN)) {
			return courseRepository.releaseCourse(courseId, yOrN);
		}
		return -2;
	}

	@Override
	public Map<String, Object> loadAllChooser(Condition condition) {
		return courseRepository.loadAllChooser(condition);
	}

	@Override
	public List<Map<String, Object>> loadHomeCourseList() {		
		return courseRepository.loadHomeCourseList();
	}

	@Override
	public boolean hasStudyedCourse(String id, String courseId) {		
		return courseRepository.hasStudyedCourse(id, courseId);
	}

	@Override
	public boolean hasFocusCourse(String id, String courseId) {
		return courseRepository.hasFocusCourse(id, courseId);
	}

	@Override
	public void updateFocuseCourse(String userId, String courseId, String type) {
		String sql = "";
		if("fllowed".equals(type)){
			sql = "insert into PX_COURSE_USER_FOCUS values ('"+userId+"', '"+courseId+"')";			
		}else if("fllow".equals(type)){
			sql = "delete from PX_COURSE_USER_FOCUS where user_id = '"+userId+"' and course_id = '"+courseId+"'";		
		}
		jdbcAssistant.update(sql);
	}

	@Override
	public void updateStudyedCourse(String userId, String courseId) {
		if(!this.hasStudyedCourse(userId, courseId)){
			String sql = "insert into PX_COURSE_USER_STUDYED values ('"+userId+"', '"+courseId+"')";
			jdbcAssistant.update(sql);
		}		
	}
	
	@Override
	public List<Map<String, Object>> loadCourseOtherUserStudyed(
			String courseId, String userId) {
		String sql = " select * from ( "+
				 " select t.course_id, nvl(t.count,0) as count,c.title from "+
				 " (select count(1) as count,course_id from "+
				 " (select course_id from PX_COURSE_USER_STUDYED "+
				 " where user_id in "+
				 " (select user_id from PX_COURSE_USER_STUDYED where course_id = '"+courseId+"' ) "+ //and user_id != '"+userId+"'
				 " and course_id != '"+courseId+"') group by course_id) t "+
				 " left join PX_COURSE c on t.course_id = c.id " +
				 " where c.is_delete='N' " +
				 " order by t.count desc "+
		   		 " ) where rownum <= 10";
		return jdbcAssistant.query(sql);
	}
	
	
	@Override
	public Map<String, Object> loadAllListTemplate(HttpServletRequest request) {
		
		final String userId = UserSession.getCurrentUser(request).getId();
		
		String sql = " select t.id,t.title,t.course_time,t.difficulty,t.img, "+
			         " to_char(t.update_time, 'yyyy-MM-dd HH24:mi') as update_time, "+
			         " nvl(studyed.count,0) as studyed  from px_course t "+
			         " left join (select count(1) as count,course_id from PX_COURSE_USER_STUDYED group by course_id) studyed " +
			         " on t.id = studyed.course_id " +			        
			         " where t.release = 'Y' and t.is_delete = 'N' ";		
		
		String my = request.getParameter("my");		
		if(!TextUtil.isEmpty(my) && !"0".equals(my)){
			if(("focus").equals(my)){
				sql += " and t.id in (select course_id from PX_COURSE_USER_FOCUS where user_id = '"+userId+"') ";
			}else if("studyed".equals(my)){
				sql += " and t.id in (select course_id from PX_COURSE_USER_STUDYED where user_id = '"+userId+"') ";
			}
		}else{
			my = "0";
		}
		
		String tag = request.getParameter("tag");
		if(!TextUtil.isEmpty(tag) && !"0".equals(tag)){
			sql += " and t.tag like '%"+tag+"%' ";
		}else{
			tag = "0";
		}
		
		String difficulty = request.getParameter("difficulty");
		if(!TextUtil.isEmpty(difficulty) && !"0".equals(difficulty)){
			sql += " and t.difficulty = '"+difficulty+"' ";
		}else{
			difficulty = "0";
		}
		
		String workTypeClassify = request.getParameter("worktypeClassify");
		if(!TextUtil.isEmpty(workTypeClassify) && !"0".equals(workTypeClassify)){
			sql += " and t.id in " +
					"(select course_id from PX_COURSE_WORKTYPE where worktype_id in " +
					"(select id from PX_WORKTYPE_LEVEL where worktype_id in (select id from PX_WORKTYPE where classify_id = '"+workTypeClassify+"') )"+
					" )";
		}else{
			workTypeClassify = "0";
		}
		
		String workType = request.getParameter("worktype");		
		if(!TextUtil.isEmpty(workType) && !"0".equals(workType)){			
			sql += " and t.id in " +
					"(select course_id from PX_COURSE_WORKTYPE where worktype_id in " +
					"(select id from PX_WORKTYPE_LEVEL where worktype_id = '"+workType+"')"+
					" )";
		}else{
			workType = "0";			
		}
		
		String workTypeLevel = request.getParameter("worktypeLevel");		
		if(!TextUtil.isEmpty(workTypeLevel) && !"0".equals(workTypeLevel)){	
			sql += " and t.id in " +
					"(select course_id from PX_COURSE_WORKTYPE where worktype_id = '"+workTypeLevel+"' " +					
					" )";
		}else{
			workTypeLevel = "0";			
		}
		
		String sort = request.getParameter("sort");		
		if(TextUtil.isEmpty(sort)){
			sort = "last";
		}
		if("last".equals(sort) ){
			sql += " order by t.update_time desc ";
		}else if("hot".equals(sort)){
			sql += " order by studyed desc ";
		}
		
		String pageString = request.getParameter("page");
		if(TextUtil.isEmpty(pageString)){
			pageString = "1";
		}		
		int page = Integer.parseInt(pageString);	
		
		Pager<Map<String, Object>> pager = new Pager<Map<String, Object>>(0, page, 20);		
		
		pager = jdbcAssistant.queryAsPager(sql, null, new ValueMapper() {			
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				String difficulty = record.get("difficulty")+"";
				if("1".equals(difficulty)){
					record.put("difficulty", "初级");
				}else if("2".equals(difficulty)){
					record.put("difficulty", "中级");
				}else if("3".equals(difficulty)){
					record.put("difficulty", "高级");
				}
				
				String studyedSql = "select count(1) from PX_COURSE_USER_STUDYED where course_id = '"+record.get("id")+"' and user_id='"+userId+"'";
				int studyedCount = jdbcAssistant.queryAsInt(studyedSql);
				if(studyedCount > 0){
					record.put("studyed", 'Y');
				}else{
					record.put("studyed", 'N');
				}				
				return RETURN_CODE.NEXT;
			}
		}, pager);
		
		Map<String, Object> dataMap = pager.toMap();
		
		//设置上一页/下一页/首页/尾页url地址
		if(pager.isHasNextPage()){
			dataMap.put("nextPageUrl", "#course/query/"+my+"/"+tag+"/"+difficulty+"/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/"+(page+1)+"/"+sort);
		}else{
			dataMap.put("nextPageUrl", "javascript:;");
		}		
		if(pager.isHasPreviousPage()){
			dataMap.put("previousPageUrl", "#course/query/"+my+"/"+tag+"/"+difficulty+"/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/"+(page-1)+"/"+sort);
		}else{
			dataMap.put("previousPageUrl", "javascript:;");
		}		
		if(pager.isFirstPage()){
			dataMap.put("firstPageUrl", "javascript:;");
		}else{
			dataMap.put("firstPageUrl", "#course/query/"+my+"/"+tag+"/"+difficulty+"/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/1/"+sort);
		}		
		if(pager.isLastPage()){
			dataMap.put("lastPageUrl", "javascript:;");
		}else{
			dataMap.put("lastPageUrl", "#course/query/"+my+"/"+tag+"/"+difficulty+"/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/"+pager.getPageCount()+"/"+sort);
		}
		
		//设置导航页
		int [] navigatePageNumbers = pager.getNavigatePageNumbers();
		List<Map<String, Object>> navigatePage = new ArrayList<Map<String,Object>>();
		for(int i : navigatePageNumbers){
			Map<String, Object> navigatePageItem = new HashMap<String, Object>();
			navigatePageItem.put("text", i);
			navigatePageItem.put("url", "#course/query/"+my+"/"+tag+"/"+difficulty+"/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/"+i+"/"+sort);
			if(i == page){
				navigatePageItem.put("active", "Y");
			}else{
				navigatePageItem.put("active", "N");
			}
			navigatePage.add(navigatePageItem);
		}
		dataMap.put("navigatePage", navigatePage);
		
		
		//设置最新/最热 排序查询条件
		List<Map<String, Object>> querySort = new ArrayList<Map<String,Object>>();
		
		Map<String, Object> querySortLast = new HashMap<String, Object>();	
		querySortLast.put("text", "最新");
		querySortLast.put("url", "#course/query/"+my+"/"+tag+"/"+difficulty+"/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/1/last");
		if("last".equals(sort)){
			querySortLast.put("active", "Y");
		}else{
			querySortLast.put("active", "N");
		}
		querySort.add(querySortLast);
		
		Map<String, Object> querySortHot = new HashMap<String, Object>();	
		querySortHot.put("text", "最热");
		querySortHot.put("url", "#course/query/"+my+"/"+tag+"/"+difficulty+"/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/1/hot");
		if("hot".equals(sort)){
			querySortHot.put("active", "Y");
		}else{
			querySortHot.put("active", "N");
		}
		querySort.add(querySortHot);
		
		dataMap.put("querySort", querySort);
		
		
		//设置我的课程查询条件
		List<Map<String, Object>> queryMy = new ArrayList<Map<String,Object>>();
		
		Map<String, Object> queryMyMap0 = new HashMap<String, Object>();	
		queryMyMap0.put("text", "全部");
		queryMyMap0.put("url", "#course/query/0/"+tag+"/"+difficulty+"/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/1/last");
		if("0".equals(my)){
			queryMyMap0.put("active", "Y");
		}else{
			queryMyMap0.put("active", "N");
		}
		queryMy.add(queryMyMap0);
		
		Map<String, Object> queryMyMap1 = new HashMap<String, Object>();	
		queryMyMap1.put("text", "已关注");
		queryMyMap1.put("url", "#course/query/focus/"+tag+"/"+difficulty+"/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/1/last");
		if("focus".equals(my)){
			queryMyMap1.put("active", "Y");
		}else{
			queryMyMap1.put("active", "N");
		}
		queryMy.add(queryMyMap1);	
		
		Map<String, Object> queryMyMap2 = new HashMap<String, Object>();	
		queryMyMap2.put("text", "已学习");
		queryMyMap2.put("url", "#course/query/studyed/"+tag+"/"+difficulty+"/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/1/last");
		if("studyed".equals(my)){
			queryMyMap2.put("active", "Y");
		}else{
			queryMyMap2.put("active", "N");
		}
		queryMy.add(queryMyMap2);	
		
		dataMap.put("queryMy", queryMy);
		
		
		
		//课程标签
		String tagSql = "select name,id from SYS_DICT t " +
				" where t.is_delete = 'N' and t.classify_id = " +
				" (select id from SYS_DICT_CLASSIFY where code = '"+DictConstant.PX_COURSE_TAG.getValue()+"') " +
				" order by t.order_index";			
		List<Map<String, Object>>tagList = jdbcAssistant.query(tagSql);
		
		List<Map<String, Object>> queryTag = new ArrayList<Map<String,Object>>();
		
		Map<String, Object> queryTagFirstItem = new HashMap<String, Object>(); 
		queryTagFirstItem.put("text", "全部");
		queryTagFirstItem.put("url", "#course/query/"+my+"/0/"+difficulty+"/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/1/last");
		if("0".equals(tag)){
			queryTagFirstItem.put("active", "Y");
		}else{
			queryTagFirstItem.put("active", "N");
		}
		queryTag.add(queryTagFirstItem);
		for(Map<String, Object> map : tagList){
			Map<String, Object> queryTagItem = new HashMap<String, Object>();
			queryTagItem.put("text", map.get("name"));			
			queryTagItem.put("url", "#course/query/"+my+"/"+map.get("id")+"/"+difficulty+"/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/1/last");
			if(map.get("id").toString().equals(tag)){
				queryTagItem.put("active", "Y");
			}else{
				queryTagItem.put("active", "N");
			}
			
			queryTag.add(queryTagItem);			
		}
		dataMap.put("queryTag", queryTag);
		
		
		
		//设置难度查询
		List<Map<String, Object>> queryDiddiculty = new ArrayList<Map<String,Object>>();
		
		Map<String, Object> queryDifficultyMap0 = new HashMap<String, Object>();		
		queryDifficultyMap0.put("text", "全部");
		queryDifficultyMap0.put("url", "#course/query/"+my+"/"+tag+"/0/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/1/last");
		if("0".equals(difficulty)){
			queryDifficultyMap0.put("active", "Y");
		}else{
			queryDifficultyMap0.put("active", "N");
		}
		queryDiddiculty.add(queryDifficultyMap0);	
		
		Map<String, Object> queryDifficultyMap1 = new HashMap<String, Object>();		
		queryDifficultyMap1.put("text", "初级");
		queryDifficultyMap1.put("url", "#course/query/"+my+"/"+tag+"/1/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/1/last");
		if("1".equals(difficulty)){
			queryDifficultyMap1.put("active", "Y");
		}else{
			queryDifficultyMap1.put("active", "N");
		}
		queryDiddiculty.add(queryDifficultyMap1);		
		
		Map<String, Object> queryDifficultyMap2 = new HashMap<String, Object>();		
		queryDifficultyMap2.put("text", "中级");
		queryDifficultyMap2.put("url", "#course/query/"+my+"/"+tag+"/2/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/1/last");
		if("2".equals(difficulty)){
			queryDifficultyMap2.put("active", "Y");
		}else{
			queryDifficultyMap2.put("active", "N");
		}
		queryDiddiculty.add(queryDifficultyMap2);
		
		Map<String, Object> queryDifficultyMap3 = new HashMap<String, Object>();		
		queryDifficultyMap3.put("text", "高级");
		queryDifficultyMap3.put("url", "#course/query/"+my+"/"+tag+"/3/"+workTypeClassify+"/"+workType+"/"+workTypeLevel+"/1/last");
		if("3".equals(difficulty)){
			queryDifficultyMap3.put("active", "Y");
		}else{
			queryDifficultyMap3.put("active", "N");
		}
		queryDiddiculty.add(queryDifficultyMap3);
		
		dataMap.put("queryDiddiculty", queryDiddiculty);
		
		
		//设置工种分类
		String workTypeClassifySql = "select id,name from PX_WORKTYPE_CLASSIFY order by name";
		List<Map<String, Object>> workTypeClassifyList = jdbcAssistant.query(workTypeClassifySql);
		List<Map<String, Object>> queryWorkTypeClassify = new ArrayList<Map<String,Object>>();
		
		Map<String, Object> queryWorkTypeClassifyFirstItem = new HashMap<String, Object>();
		queryWorkTypeClassifyFirstItem.put("text", "全部");
		queryWorkTypeClassifyFirstItem.put("url", "#course/query/"+my+"/"+tag+"/"+difficulty+"/0/0/0/1/last");
		if("0".equals(workTypeClassify)){
			queryWorkTypeClassifyFirstItem.put("active", "Y");
		}else{
			queryWorkTypeClassifyFirstItem.put("active", "N");
		}
		queryWorkTypeClassify.add(queryWorkTypeClassifyFirstItem);
		
		for(Map<String, Object> map : workTypeClassifyList){
			Map<String, Object> queryWorkTypClassifyItem = new HashMap<String, Object>();
			queryWorkTypClassifyItem.put("text", map.get("name"));		
			queryWorkTypClassifyItem.put("url", "#course/query/"+my+"/"+tag+"/"+difficulty+"/"+map.get("id")+"/0/0/1/last");
			if(map.get("id").toString().equals(workTypeClassify)){
				queryWorkTypClassifyItem.put("active", "Y");
			}else{
				queryWorkTypClassifyItem.put("active", "N");
			}			
			queryWorkTypeClassify.add(queryWorkTypClassifyItem);			
		}
		dataMap.put("queryWorkTypeClassify", queryWorkTypeClassify);
		
		
		//设置工种名称查询
		
		if("0".equals(workTypeClassify)){
			dataMap.put("queryWorkType", null);
		}else{
			String workTypeSql = "select id,name from PX_WORKTYPE where classify_id = '"+workTypeClassify+"' order by name ";
			List<Map<String, Object>> workTypeList = jdbcAssistant.query(workTypeSql);
			
			List<Map<String, Object>> queryWorkType = new ArrayList<Map<String,Object>>();
			
			Map<String, Object> queryWorkTypeFirstItem = new HashMap<String, Object>();
			queryWorkTypeFirstItem.put("text", "全部");
			queryWorkTypeFirstItem.put("url", "#course/query/"+my+"/"+tag+"/"+difficulty+"/"+workTypeClassify+"/0/0/1/last");
			if("0".equals(workType)){
				queryWorkTypeFirstItem.put("active", "Y");
			}else{
				queryWorkTypeFirstItem.put("active", "N");
			}
			queryWorkType.add(queryWorkTypeFirstItem);
			
			for(Map<String, Object> map : workTypeList){
				Map<String, Object> queryWorkTypeItem = new HashMap<String, Object>();
				queryWorkTypeItem.put("text", map.get("name"));		
				queryWorkTypeItem.put("url", "#course/query/"+my+"/"+tag+"/"+difficulty+"/"+workTypeClassify+"/"+map.get("id")+"/0/1/last");
				if(map.get("id").toString().equals(workType)){
					queryWorkTypeItem.put("active", "Y");
				}else{
					queryWorkTypeItem.put("active", "N");
				}
				
				queryWorkType.add(queryWorkTypeItem);			
			}
			dataMap.put("queryWorkType", queryWorkType);
		}
		
		
		//设置工种级别查询
		if("0".equals(workType)){
			dataMap.put("queryWorkTypeLevel", null);
		}/*else{
			String workTypeLevelSql = "select name,id from PX_WORKTYPE_LEVEL where worktype_id = '"+workType+"' order by order_index";
			List<Map<String, Object>> workTypeLevelList = jdbcAssistant.query(workTypeLevelSql);
			
			List<Map<String, Object>> queryWorkTypeLevel = new ArrayList<Map<String,Object>>(); 
			
			Map<String, Object> queryWorkTypeLevelFirstItem = new HashMap<String, Object>();
			queryWorkTypeLevelFirstItem.put("text", "全部");
			queryWorkTypeLevelFirstItem.put("url", "#course/query/"+my+"/"+tag+"/"+difficulty+"/"+workTypeClassify+"/"+workType+"/0/1/last");
			if("0".equals(workTypeLevel)){
				queryWorkTypeLevelFirstItem.put("active", "Y");
			}else{
				queryWorkTypeLevelFirstItem.put("active", "N");
			}
			queryWorkTypeLevel.add(queryWorkTypeLevelFirstItem);
			
			for(Map<String, Object> map : workTypeLevelList){
				Map<String, Object> queryWorkTypeLevelItem = new HashMap<String, Object>();
				queryWorkTypeLevelItem.put("text", map.get("name"));				
				queryWorkTypeLevelItem.put("url", "#course/query/"+my+"/"+tag+"/"+difficulty+"/"+workTypeClassify+"/"+workType+"/"+map.get("id")+"/1/last");
				if(map.get("id").toString().equals(workTypeLevel)){
					queryWorkTypeLevelItem.put("active", "Y");
				}else{
					queryWorkTypeLevelItem.put("active", "N");
				}
				
				queryWorkTypeLevel.add(queryWorkTypeLevelItem);			
			}
			dataMap.put("queryWorkTypeLevel", queryWorkTypeLevel);
		}*/
		
		
		return dataMap;
	}

	/**
	 * 移动端加载全部课程列表
	 */
	@Override
	public Map<String, Object> loadAllListFromMobile(HttpServletRequest request,String userId) {
		
		String sql = " select t.id,t.title,t.course_time,t.difficulty,t.img, "+
			         " to_char(t.update_time, 'yyyy-MM-dd HH24:mi') as update_time, "+
			         " nvl(studyed.count,0) as studyed  from px_course t "+
			         " left join (select count(1) as count,course_id from PX_COURSE_USER_STUDYED group by course_id) studyed " +
			         " on t.id = studyed.course_id " +			        
			         " where t.release = 'Y' ";		
		
		String search = request.getParameter("search");		
		if(!TextUtil.isEmpty(search) && !"0".equals(search)){
			sql += " and t.title like '%"+ search +"%' ";
		}else{
			search = "0";
		}
		
		
		String my = request.getParameter("my");		
		if(!TextUtil.isEmpty(my) && !"0".equals(my)){
			if(("focus").equals(my)){
				sql += " and t.id in (select course_id from PX_COURSE_USER_FOCUS where user_id = '"+userId+"') ";
			}else if("studyed".equals(my)){
				sql += " and t.id in (select course_id from PX_COURSE_USER_STUDYED where user_id = '"+userId+"') ";
			}
		}else{
			my = "0";
		}
		
		
		String tag = request.getParameter("tag");
		if(!TextUtil.isEmpty(tag) && !"0".equals(tag)){
			sql += " and t.tag like '%"+tag+"%' ";
		}else{
			tag = "0";
		}
		
		String difficulty = request.getParameter("difficulty");
		if(!TextUtil.isEmpty(difficulty) && !"0".equals(difficulty)){
			sql += " and t.difficulty = '"+difficulty+"' ";
		}else{
			difficulty = "0";
		}
		
		String workTypeClassify = request.getParameter("worktypeClassify");
		if(!TextUtil.isEmpty(workTypeClassify) && !"0".equals(workTypeClassify)){
			sql += " and t.id in " +
					"(select course_id from PX_COURSE_WORKTYPE where worktype_id in " +
					"(select id from PX_WORKTYPE_LEVEL where worktype_id in (select id from PX_WORKTYPE where classify_id = '"+workTypeClassify+"') )"+
					" )";
		}else{
			workTypeClassify = "0";
		}
		
		String workType = request.getParameter("worktype");		
		if(!TextUtil.isEmpty(workType) && !"0".equals(workType)){			
			sql += " and t.id in " +
					"(select course_id from PX_COURSE_WORKTYPE where worktype_id in " +
					"(select id from PX_WORKTYPE_LEVEL where worktype_id = '"+workType+"')"+
					" )";
		}else{
			workType = "0";			
		}
		
		sql += " order by t.update_time desc ";
		
		String pageString = request.getParameter("page");
		int page = Integer.parseInt(pageString);	
		Pager<Map<String, Object>> pager = new Pager<Map<String, Object>>(0, page, 10);	
		
		pager = jdbcAssistant.queryAsPager(sql, pager);			
		
		Map<String, Object> dataMap = pager.toMap();
		
		return dataMap;
	}
	
	
	@Override
	public Map<String, Object> loadAllWorkType(Condition condition) {
		return courseRepository.loadAllWorkType(condition);
	}

	
	/**
	 * 移动端首页加载课程
	 */
	@Override
	public List<Map<String, Object>> loadHomeCourseFromMobile() {
		return courseRepository.loadHomeCourseFromMobile();
	}

	/**
	 * 移动端加载课程详情
	 */
	@Override
	public Map<String, Object> loadCourseDetailFromMobile(String courseId) {
		
		return courseRepository.loadCourseDetailFromMobile(courseId);
	}

	/**
	 * 移动端加载课程列表查询条件
	 */
	@Override
	public Map<String, Object> loadListConditionFromMobile(String id,String tip) {

		Map<String, Object> menuMap = new HashMap<String,Object>();
		
		if(TextUtil.isEmpty(tip)){
			//课程标签
			String tagSql = "select name,id from SYS_DICT t " +
					" where t.is_delete = 'N' and t.classify_id = " +
					" (select id from SYS_DICT_CLASSIFY where code = '"+DictConstant.PX_COURSE_TAG.getValue()+"') " +
					" order by t.order_index";			
			List<Map<String, Object>>tagList = jdbcAssistant.query(tagSql);
			menuMap.put("tagList", tagList);
			
			//设置工种分类
			String workTypeClassifySql = "select id,name from PX_WORKTYPE_CLASSIFY order by name";
			List<Map<String, Object>> workTypeClassifyList = jdbcAssistant.query(workTypeClassifySql);
			menuMap.put("workClassify", workTypeClassifyList);
		}else{
			//设置工种名称查询
			if(TextUtil.isNotEmpty(id)){
				String workTypeSql = "select id,name from PX_WORKTYPE where classify_id = '"+id+"' order by name ";
				List<Map<String, Object>> workTypeList = jdbcAssistant.query(workTypeSql);
				menuMap.put("workName", workTypeList);
			}
		}
		
		return menuMap;
	}

	
}
