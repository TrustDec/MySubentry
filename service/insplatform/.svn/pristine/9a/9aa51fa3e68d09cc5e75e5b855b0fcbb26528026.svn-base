package com.insplatform.module.bbs.article.controller;

import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import com.insframework.common.utils.TextUtil;
import com.insframework.component.service.file.bean.FileBean;
import com.insframework.system.base.controller.BaseController;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;
import com.insplatform.module.bbs.article.model.BbsArticle;
import com.insplatform.module.bbs.article.service.BbsArticleService;
import com.insplatform.system.dict.DictConstant;
import com.insplatform.system.dict.service.DictService;

@Controller
@RequestMapping("/px/bbs/article")
public class BbsArticleController extends BaseController{
	
	@Autowired
	private BbsArticleService bbsArticleService;
	
	@Autowired
	private DictService dictService;
	
	
	/**
	 * 加载模板数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllTemplate")
	public @ResponseBody Map<String, Object> loadAllTemplate(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"page","myArticleQuery","articleClassify","sort");
		return bbsArticleService.loadAllTemplate(condition);
	}

	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGrid")
	public @ResponseBody Map<String, Object> loadAllGrid(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return bbsArticleService.loadAllGrid(condition);
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllList")
	public @ResponseBody Map<String, Object> loadAllList(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return this.getMessager().success().data(bbsArticleService.loadAllList(condition));
	}	
	
	
	/**
	 * 加载单条数据
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody Map<String, Object> load(@RequestParam("id") String id,HttpServletRequest request){
		Condition condition = this.getCondition(request,"id");
		String myArticleQuery = request.getParameter("myArticleQuery");
		Map<String, Object> article = bbsArticleService.getOneArticleAndLookNumUp(condition);
		return this.getMessager().success().data(article).put("myArticleQuery", myArticleQuery);		
	}
	/**
	 * 加载单条数据
	 * @param id
	 * @return
	 */
	@RequestMapping("/beforeAdd")
	public @ResponseBody Map<String, Object> beforeAdd(){
		List<Map<String, Object>> articleClassify = dictService
				.loadDictByClassify(DictConstant.PX_ARTICLE_CLASSIFY.getValue());
		return this.getMessager().success().put("articleClassify", articleClassify);		
	}
	
	/**
	 * 文章封面上传
	 * @param id
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping("/articleImageUpload")
	public void articleImageUpload(HttpServletRequest request,HttpServletResponse response) throws Exception{
		FileBean fileBean = uploadService.uploadFile(uploadService.getMultipartFile(request, "articleimage"));
		response.getWriter().write("<script type='text/javascript'>parent.App.getClass('App.bbs.article.Add').setArticleImage('"+fileBean.getUrl()+"');</script>");
	}

	
	/**
	 * 新增
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")	
	public @ResponseBody Map<String, Object> add(BbsArticle bbsarticle, HttpServletRequest request){
		String id = request.getParameter("id");
		if (TextUtil.isNotEmpty(id)) {
			BbsArticle obj = bbsArticleService.get(id);
			this.bindObject(request, obj);
			bbsArticleService.update(obj);
		}else {
			CurrentUser user = getCurrentUser(request);
			bbsarticle.setCreatePersonId(user.getId());
			bbsarticle.setCreatePersonName(user.getName());
			bbsarticle.setCreateTime(new Date());
			bbsarticle.setLookNum(new Long(0));
			bbsArticleService.save(bbsarticle);
		}
		return this.getMessager().success();
	}

	/**
	 * 加载单条数据
	 * @param id
	 * @return
	 */
	@RequestMapping("/beforeEdit")
	public @ResponseBody Map<String, Object> beforeEdit(@RequestParam("id") String id){
		return this.getMessager().success().data(bbsArticleService.get(id));		
	}

	/**
	 * 编辑
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")	
	public @ResponseBody Map<String, Object> update(
		   @RequestParam("id") String id,
		   HttpServletRequest request){		
		BbsArticle bbsarticle = bbsArticleService.get(id);
		this.bindObject(request, bbsarticle);
		bbsArticleService.update(bbsarticle);
		return this.getMessager().success();
	}
	
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")	
	public @ResponseBody Map<String, Object> delete(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		bbsArticleService.deleteByIds(ids);
		return this.getMessager().success();
	}
	
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/deleteOne")
	public @ResponseBody Map<String, Object> deleteOne(HttpServletRequest request){
		String id = request.getParameter("articleId");
		bbsArticleService.deleteById(id);
		return this.getMessager().success();
	}
	/**
	 * 发布文章
	 * @param request
	 * @return
	 */
	@RequestMapping("/updateIspublish")
	public @ResponseBody Map<String, Object> updateIspublish(HttpServletRequest request){
		String ispublish = request.getParameter("ispublish");
		String articleId = request.getParameter("articleId");
		bbsArticleService.updateIspublish(ispublish,articleId);
		return this.getMessager().success();
	}


	
}
