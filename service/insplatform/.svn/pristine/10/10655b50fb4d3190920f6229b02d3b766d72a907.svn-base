package com.insplatform.module.yeardemand.service.impl;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;
import com.insplatform.module.yeardemand.model.YearDemandWrite;
import com.insplatform.module.yeardemand.repository.YearDemandWriteRepository;
import com.insplatform.module.yeardemand.service.YearDemandWriteService;

@Service
public class YearDemandWriteServiceImpl extends BaseServiceImpl<YearDemandWrite> implements YearDemandWriteService{
	
	@Autowired
	private YearDemandWriteRepository yearDemandWriteRepository;

	@Override
	public BaseRepository<YearDemandWrite> getRepository() {		
		return yearDemandWriteRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return yearDemandWriteRepository.loadAllGrid(condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return yearDemandWriteRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return yearDemandWriteRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public YearDemandWrite get(Serializable id) {		
		return yearDemandWriteRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(YearDemandWrite entity) {	
		return yearDemandWriteRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(YearDemandWrite entity) {		
		yearDemandWriteRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		yearDemandWriteRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		yearDemandWriteRepository.deleteByIds(ids);
	}

	@Override
	public List<Map<String, Object>> loadAllGridProject(Condition condition) {
		return yearDemandWriteRepository.loadAllGridProject(condition);
	}

	@Override
	public void saveUpdateDelete(Condition condition) {
		if (condition.containsKey("addData")&&condition.containsKey("yearDemandId")) {
			CurrentUser user = condition.getCurrentUser();
			String userId = user.getId();
			String userName = user.getName();
			String yearDemandId = condition.get("yearDemandId")+"";
			yearDemandWriteRepository.deleteByyearDemandIdAndUserId(userId,yearDemandId);
			List<YearDemandWrite> listObj = yearDemandWriteRepository(condition.get("addData")+"");
			if (listObj!=null) {
				for (YearDemandWrite obj : listObj) {
					if (obj!=null) {
						obj.setCreateUserId(userId);
						obj.setCreateUserName(userName);
						Date date = new Date();
						obj.setCreateTime(date);
						obj.setUpdateTime(date);
						yearDemandWriteRepository.save(obj);
					}
				}
			}
		}
	}

	private List<YearDemandWrite> yearDemandWriteRepository(String addData) {
		ObjectMapper mapper = new ObjectMapper();
		try {
			return mapper.readValue(addData, new TypeReference<List<YearDemandWrite>>() {});
		} catch (JsonParseException e) {
		} catch (JsonMappingException e) {
		} catch (IOException e) {
		}
		return null;
	}

	@Override
	public List<Map<String, Object>> loadAllGridProjectGroupStatistics(
			Condition condition) {
		CurrentUser user = condition.getCurrentUser();
		List<Map<String, Object>> userIds = yearDemandWriteRepository.getCompanyUserIdsAll(user.getCompanyId());
		List<Object> list = new ArrayList<Object>(userIds.size());
		for (Map<String, Object> map : userIds) {
			list.add(map.get("id"));
		}
		String ids = list.toString().replaceAll("\\[|\\]", "'").replace(", ", "','");
		return yearDemandWriteRepository.loadAllGridProjectGroupStatistics(ids,condition);
	}

}
