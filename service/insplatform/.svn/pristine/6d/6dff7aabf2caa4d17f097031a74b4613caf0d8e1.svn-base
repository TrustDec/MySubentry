package com.insplatform.module.classreport.controller;

import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import com.insframework.system.base.controller.BaseController;
import com.insframework.system.map.Condition;
import com.insplatform.module.classreport.model.ClassReportUser;
import com.insplatform.module.classreport.service.ClassReportUserService;

@Controller
@RequestMapping("/px/classreportuser")
public class ClassReportUserController extends BaseController{
	
	@Autowired
	private ClassReportUserService classReportUserService;
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGrid")
	public @ResponseBody Map<String, Object> loadAllGrid(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"pxClassReport","name");
		return classReportUserService.loadAllGrid(condition);
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllList")
	public @ResponseBody Map<String, Object> loadAllList(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return this.getMessager().success().data(classReportUserService.loadAllList(condition));
	}	
	
	
	/**
	 * 加载单条数据
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody Map<String, Object> load(@RequestParam("id") String id){		
		return this.getMessager().success().data(classReportUserService.load(id));		
	}
	
	/**
	 * 新增
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")	
	public @ResponseBody Map<String, Object> add( HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		String id=request.getParameter("id");
		Condition condition = this.getCondition(request);
		classReportUserService.add(id, ids,condition);
		return this.getMessager().success();
	}
	
	/**
	 * 编辑
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")	
	public @ResponseBody Map<String, Object> update(
		   @RequestParam("id") String id,
		   HttpServletRequest request){		
		ClassReportUser classreportuser = classReportUserService.get(id);
		this.bindObject(request, classreportuser);
		classReportUserService.update(classreportuser);
		return this.getMessager().success();
	}
	
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")	
	public @ResponseBody Map<String, Object> delete(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		classReportUserService.delete(ids);
		return this.getMessager().success();
	}
	
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadClassReportAllGrid")
	public @ResponseBody Map<String, Object> loadClassReportAllGrid(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"name","pxYear","pxMonth","startTime","stopTime","SelectPxProject");
		return classReportUserService.loadClassReportAllGrid(condition);
	}
	
	
	/**
	 * 学员自主报名管理
	 * @param request
	 * @return
	 */
	@RequestMapping("/updateApply")	
	public @ResponseBody Map<String, Object> updateApply(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		String type=request.getParameter("type");
		Condition condition = this.getCondition(request);
		classReportUserService.updateApply(type, ids,condition);
		return this.getMessager().success();
	}
	
	
	/**
	 * 处理审批
	 * @param request
	 * @return
	 */
	@RequestMapping("/updateCpuState")	
	public @ResponseBody Map<String, Object> updateCpuState(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		String type=request.getParameter("type");
		classReportUserService.updateCpuState(type, ids);
		return this.getMessager().success();
	}

	/**
	 * 处理审批
	 * @param request
	 * @return
	 */
	@RequestMapping("/updateSecondApproveUse")	
	public @ResponseBody Map<String, Object> updateSecondApproveUse(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		String type=request.getParameter("type");
		classReportUserService.updateSecondApproveUse(type, ids);
		return this.getMessager().success();
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadSecondApproveUserAllGrid")
	public @ResponseBody Map<String, Object> loadSecondApproveUserAllGrid(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"pxClassReport","name");
		return classReportUserService.loadSecondApproveUserAllGrid(condition);
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/updateUserGroup")
	public @ResponseBody Map<String, Object> updateUserGroup(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"pxClassReport","userGroup");
		String [] ids = this.getSelectedItems(request,"id");
		classReportUserService.updateUserGroup(ids, condition);
		return this.getMessager().success();
	}
	
}
