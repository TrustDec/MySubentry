package com.insplatform.module.bbs.article.repository.impl;

import java.io.Serializable;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.insframework.common.utils.TextUtil;
import com.insframework.common.utils.pager.Pager;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;
import com.insplatform.module.bbs.article.model.BbsArticle;
import com.insplatform.module.bbs.article.repository.BbsArticleRepository;

@Repository
public class BbsArticleRepositoryImpl extends BaseRepositoryImpl<BbsArticle>
		implements BbsArticleRepository {

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {
		String sql = "select t.* from PX_BBS_ARTICLE t ";
		return gridService.loadData(condition.getGridTransModel(), sql,
				condition.valueArray());
	}

	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {
		String sql = "select t.* from PX_BBS_ARTICLE t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}

	@Override
	public Map<String, Object> load(String id) {
		String sql = "select t.* from PX_BBS_ARTICLE t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[] { id });
	}

	/**
	 * 重写父类get方法
	 */
	@Override
	public BbsArticle get(Serializable id) {
		return super.get(id);
	}

	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(BbsArticle entity) {
		return super.save(entity);
	}

	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(BbsArticle entity) {
		super.update(entity);
	}

	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {
		super.deleteById(id);
	}

	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {
		super.deleteByIds(ids);
	}

	@Override
	public Pager<Map<String, Object>> loadAllTemplate(Condition condition,
			Pager<Map<String, Object>> pager) {
		CurrentUser user = condition.getCurrentUser();
		String sql = "select t.*,ac.name classify_name from PX_BBS_ARTICLE t"
				+ " left join SYS_DICT ac on ac.id = t.article_classify"
				+ " where 1=1 ";

		/* 收集参数 */

		String myArticleQuery = condition.get("myArticleQuery") + "";
		if ("myArticle".equals(myArticleQuery)) {
			sql += " and t.create_person_id = '" + user.getId() + "'";
		} else if ("myCollect".equals(myArticleQuery)) {
			sql += " and ((t.ispublish = 'Y' or t.create_person_id = '"
					+ user.getId()
					+ "') and t.id in (select am.article_id from px_bbs_article_mycollect am where am.user_id = '"
					+ user.getId() + "'))";
		} else {
			sql += "  and (t.ispublish = 'Y' or t.create_person_id = '"
					+ user.getId() + "')";
		}

		String articleClassify = condition.get("articleClassify") + "";
		if (TextUtil.isNotEmpty(articleClassify)) {
			sql += " and t.article_classify = '" + articleClassify + "'";
		}

		String sort = condition.get("sort") + "";
		if ("hot".equals(sort)) {
			sql += " order by nvl(t.look_num,0) desc";
		} else {
			sql += " order by t.create_time desc";
		}
		return jdbcAssistant.queryAsPager(sql, pager);
	}

	@Override
	public List<Map<String, Object>> getLastMonthLookNumHighArticle() {
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Calendar c = Calendar.getInstance();
		String now = format.format(c.getTime());
		c.add(Calendar.MONTH, -1);
		String prevMonthNowDay = format.format(c.getTime());
		String sql = "select t.*,ac.name classify_name from PX_BBS_ARTICLE t"
				+ " left join SYS_DICT ac on ac.id = t.article_classify"
				+ " where t.create_time <= to_date('" + now
				+ "','yyyy-mm-dd hh24:mi:ss') "
				+ " and t.create_time >=to_date('" + prevMonthNowDay
				+ "','yyyy-mm-dd hh24:mi:ss') " + " and t.ispublish = 'Y'"
				+ " and rownum<10" + " order by nvl(t.look_num,0) desc";
		return jdbcAssistant.query(sql);
	}

	public Object getMonthWriteMuchArticleList() {
		String sql = "select h.*,u.name person_name from "
				+ " (select t.create_person_id,count(t.create_person_id) article_num "
				+ " from px_bbs_article t " + " where t.ispublish = 'Y'"
				+ " group by t.create_person_id) h"
				+ " left join sys_user u on u.id = h.create_person_id"
				+ " where rownum < 5" + " order by h.article_num desc";
		return jdbcAssistant.query(sql);
	}

	@Override
	public void updateIspublish(String ispublish, String articleId) {
		String sql = "update px_bbs_article set ispublish = ?"
				+ " where id = ?";
		jdbcAssistant.update(sql, new Object[] { ispublish, articleId });
	}

	@Override
	public Map<String, Object> getOneArticleAndLookNumUp(String id,
			String userId) {
		String sql = "update px_bbs_article set look_num = look_num+1 where id = ?";
		jdbcAssistant.update(sql, new Object[] { id });
		sql = "select d.name article_classify_name,o.name deptname,t.id, t.article_title, t.create_person_id, t.create_person_name,"
				+ " t.create_time, t.article_classify, t.look_num, t.ispublish,"
				+ " t.article_content, t.acticle_photo,"
				+ " (select 'Y' soucang from px_bbs_article_mycollect am"
				+ " where am.article_id = ? and am.user_id = ?"
				+ " ) mycollect"
				+ " from px_bbs_article t "
				+ " left join sys_user_org_rel ou on ou.user_id = t.create_person_id"
				+ " left join sys_organization o on ou.organization_id = o.id"
				+ " left join sys_dict d on d.id = t.article_classify"
				+ " where t.id = ?";
		return jdbcAssistant.queryOne(sql, new Object[] { id, userId, id });
	}

	@Override
	public List<Map<String, Object>> loadSomeArticleByAuthor(
			String createPersonId, String currArticleId) {
		String sql = "select t.* from PX_BBS_ARTICLE t"
				+ " where t.create_person_id = ? and t.id != ? and t.ispublish = 'Y' and rownum <10 "
				+ " order by nvl(t.look_num,0) desc";
		return jdbcAssistant.query(sql, new Object[] { createPersonId,
				currArticleId });
	}

	@Override
	public List<Map<String, Object>> loadArticleTitleMobile(Condition condition) {
		String sql = "select p.* from sys_dict_classify t ,sys_dict p  where t.code = 'PX_ARTICLE_CLASSIFY' "
				+ "and t.id = p.classify_id and p.is_delete = 'N'order by order_index";
		return jdbcAssistant.query(sql);
	}

	@Override
	public Map<String, Object> loadAllListMobile(String type ,String idx) {
		Pager<Map<String ,Object>> pager = new Pager<Map<String,Object>>(0, Integer.parseInt(idx), 10);
		String sql = "select q.* ,a.name, a.order_index from px_bbs_article q,"
				+ "(select p.* from sys_dict_classify t ,sys_dict p  where "
				+ "t.code = 'PX_ARTICLE_CLASSIFY' and t.id = p.classify_id and p.is_delete = 'N' "
				+ "order by order_index) a " + "where 1=1 "
				+ "and q.article_classify = a.id and q.ispublish = 'Y' ";

			if (Integer.parseInt(type) > 0) {
				sql += " and a.order_index = '" + type + "'";
			}
		sql += " order by q.create_time desc";
		return jdbcAssistant.queryAsPager(sql, pager).toMap();
	}

	@Override
	public List<Map<String, Object>> loadAllListInfoMobile(String id,String userId) {
		String sql = "";
			sql = "select count(*) as num from px_bbs_article_comment where pid = '" + id + "'";
		Map<String, Object> map = jdbcAssistant.queryOne(sql);
		if (Integer.parseInt(map.get("num") + "") == 0) {
			sql = "select q.* ,a.name, a.order_index from px_bbs_article q,"
					+ "(select p.* from sys_dict_classify t ,sys_dict p  where t.code = 'PX_ARTICLE_CLASSIFY' and t.id = p.classify_id and p.is_delete = 'N'order by order_index) a "
					+ "where 1=1 and q.article_classify = a.id and q.ispublish = 'Y'  "
					+ "and q.id = '" + id + "'";
		} else {
			sql = "select q.* ,a.name, a.order_index, z.id as zid, z.comment_content ,z.create_time as zcreate_time, "
					+ "z.create_person_name as zcreate_person_name , z.create_person_id as zcreate_person_id from px_bbs_article q,"
					+ "(select p.* from sys_dict_classify t ,sys_dict p  "
					+ "where t.code = 'PX_ARTICLE_CLASSIFY' and t.id = p.classify_id and p.is_delete = 'N'order by order_index) a ,"
					+ "(select * from px_bbs_article_comment) z "
					+ "where 1=1 and q.article_classify = a.id and q.ispublish = 'Y' and q.id = '" + id + "' and z.pid = '" + id + "' order by z.create_time desc";
		}
//		Pager<Map<String, Object>> pager = new Pager<Map<String, Object>>(0, 1,10);
//		Map<String, Object> mapAllTemp = jdbcAssistant.queryAsPager(sql, pager).toMap();
		List<Map<String, Object>> mapAllTemp = jdbcAssistant.query(sql);
//		List<Map<String, Object>> mapAll = (List<Map<String, Object>>) mapAllTemp.get("data");
		String redHeart = "select count(*) as num from px_bbs_article_mycollect where article_id = '" + id + "' and user_id = '" + userId + "'";
		Map<String, Object> mapNum = jdbcAssistant.queryOne(redHeart);
		if (Integer.parseInt(mapNum.get("num") + "") == 0) {
			mapAllTemp.get(0).put("hasHeart", false);
		} else if (Integer.parseInt(mapNum.get("num") + "") == 1) {
			mapAllTemp.get(0).put("hasHeart", true);
		}
		return mapAllTemp;
	}

	@Override
	public List<Map<String, Object>> loadAllCommentInfoMobile(
			String id) {
		String sql = "";
		sql = "select count(*) as num from px_bbs_article_comment_hf  where article_comment_id = '"
				+ id + "'";
		Map<String, Object> map = jdbcAssistant.queryOne(sql);
		if (Integer.parseInt(map.get("num") + "") == 0) {
			sql = "select t.id as article_comment_id from px_bbs_article_comment t where id = '"
					+ id + "'";
		} else {
			sql = "select t.* from px_bbs_article_comment_hf t,px_bbs_article_comment p "
					+ "where p.id = t.article_comment_id and p.id = '"
					+ id + "'";
		}
		sql += "order by t.create_time desc";
		return jdbcAssistant.query(sql);
	}

	@Override
	public void addCommentMobile(String userId, String id, String comment) {
		String sql = "insert into px_bbs_article_comment values((select sys_guid() from dual),'" + comment + "'," +
				"'" + id + "',(select account from sys_user where id = '" + userId + "')," +
				"(to_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss'))," +
				"(select name from sys_user where id = '" + userId + "'))";
		jdbcAssistant.update(sql);
	}

	@Override
	public void addCommentHFMobile(String userId, String id, String comment) {
		String sql = "insert into px_bbs_article_comment_hf values((select sys_guid() from dual)," +
				"'" + id + "','" + comment + "',(select account from sys_user where id = '" + userId + "')," +
				"(to_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss')),''," +
				"(select name from sys_user where id = '" + userId + "'),'')";
		jdbcAssistant.update(sql);
	}

	@Override
	public void changeHeartMobile(String userId, String type, String id) {
		String sql = "";
		if ("true".equals(type)) {
			sql = "delete from px_bbs_article_mycollect where article_id = '"+ id
					+ "' and user_id = (select account from sys_user where id = '"
					+ userId + "')";
		} else if ("false".equals(type)) {
			sql = "insert into px_bbs_article_mycollect values('"
					+ id+ "',(select account from sys_user where id = '"
					+ userId+ "'),(select sys_guid() from dual))";
		}
		jdbcAssistant.update(sql);
	}

	@Override
	public Map<String, Object> loadArticleAsIMobile(String userId, String type, String idx) {
		Pager<Map<String, Object>> pager = new Pager<Map<String,Object>>(0, Integer.parseInt(idx), 10);
		String sql = "";
		if("myArticle".equals(type))
		{
			sql = "select m.*,p.name from (select t.* from px_bbs_article t where t.ispublish = 'Y' and t.create_person_id = '" + userId + "') m " +
					"left join (select b.* from sys_dict b where b.classify_id = " +
					"(select q.id from sys_dict_classify q where q.code = 'PX_ARTICLE_CLASSIFY' and q.is_delete = 'N')) p " +
					"on p.id = m.article_classify order by m.create_time desc";
		}else{
			sql = "select m.*,p.name from (select t.* from px_bbs_article t where t.ispublish = 'Y' and t.id in" +
					"(select article_id from px_bbs_article_mycollect where user_id = '" + userId + "')) m " +
					"left join (select b.* from sys_dict b where b.classify_id = " +
					"(select q.id from sys_dict_classify q where q.code = 'PX_ARTICLE_CLASSIFY' and q.is_delete = 'N')) " +
					"p on p.id = m.article_classify order by m.create_time desc";
		}
		return jdbcAssistant.queryAsPager(sql, pager).toMap();
	}
}
