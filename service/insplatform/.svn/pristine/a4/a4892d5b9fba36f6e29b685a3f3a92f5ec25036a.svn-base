package com.insplatform.module.osta.register.notice.service.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.osta.register.notice.model.OstaRegWorktypeLevel;
import com.insplatform.module.osta.register.notice.repository.OstaRegWorktypeCostRepository;
import com.insplatform.module.osta.register.notice.repository.OstaRegWorktypeLevelRepository;
import com.insplatform.module.osta.register.notice.service.OstaRegWorktypeLevelService;
import com.insplatform.module.worktype.model.WorktypeLevel;
import com.insplatform.module.worktype.repository.WorktypeLevelRepository;

@Service
public class OstaRegWorktypeLevelServiceImpl extends BaseServiceImpl<OstaRegWorktypeLevel> implements OstaRegWorktypeLevelService{
	
	@Autowired
	private OstaRegWorktypeLevelRepository ostaRegWorktypeLevelRepository;
	
	@Autowired
	private WorktypeLevelRepository worktypeLevelRepository;
	
	@Autowired
	private OstaRegWorktypeCostRepository ostaRegWorktypeCostRepository;

	@Override
	public BaseRepository<OstaRegWorktypeLevel> getRepository() {		
		return ostaRegWorktypeLevelRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(String ostaRegNoticeId, Condition condition) {			
		return ostaRegWorktypeLevelRepository.loadAllGrid(ostaRegNoticeId,condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return ostaRegWorktypeLevelRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return ostaRegWorktypeLevelRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public OstaRegWorktypeLevel get(Serializable id) {		
		return ostaRegWorktypeLevelRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(OstaRegWorktypeLevel entity) {	
		return ostaRegWorktypeLevelRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(OstaRegWorktypeLevel entity) {		
		ostaRegWorktypeLevelRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		ostaRegWorktypeLevelRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		ostaRegWorktypeLevelRepository.deleteByIds(ids);
	}

	@Override
	public Map<String, Object> loadWorktypeLevel(Condition condition) {
		return ostaRegWorktypeLevelRepository.loadWorktypeLevel(condition);
	}

	@Override
	public String saveBatch(OstaRegWorktypeLevel obj) {
		String idsStr = obj.getWorktypeLevelId();
		Map<String, Object> map = null;
		String levelId = "";
		if (TextUtil.isNotEmpty(idsStr)) {
			String[] ids = idsStr.split(",");
			for (int i = 0; i < ids.length; i++) {
				obj.setWorktypeLevelId(ids[i]);
				map = ostaRegWorktypeLevelRepository.getOneByTreeId(obj.getNoticeId(),obj.getWorktypeId(),obj.getWorktypeLevelId());
				if (map==null) {
					WorktypeLevel wtl = worktypeLevelRepository.get(ids[i]);
					obj.setWorktypeLevelName(wtl.getName());
					if (wtl!=null) {
						obj.setWorktypeLevelName(wtl.getName());
						levelId = ostaRegWorktypeLevelRepository.save(obj).toString();
						ostaRegWorktypeCostRepository.saveBach(levelId);
					}
				}
			}
		}
		return null;
	}

	@Override
	public Map<String, Object> loadWorktypeByNoticeId(Condition condition) {
		String noticeId = "nohasNoticeId";
		if (condition.containsKey("noticeId")) {
			noticeId = condition.get("noticeId").toString();
			condition.remove("noticeId");
		}
		return ostaRegWorktypeLevelRepository.loadWorktypeByNoticeId(noticeId,condition);
	}

	@Override
	public List<Map<String, Object>> loadWorktypeLevelByNoticeId(Condition condition) {
		String noticeId = "noNoticeId";
		String worktypeId = "noWorktypeId";
		if (condition.containsKey("noticeId")) {
			noticeId = condition.get("noticeId").toString();
			condition.remove("noticeId");
		}
		if (condition.containsKey("worktypeId")) {
			worktypeId = condition.get("worktypeId").toString();
			condition.remove("worktypeId");
		}

		return ostaRegWorktypeLevelRepository.loadWorktypeLevelByNoticeId(noticeId,worktypeId);
	}

}
