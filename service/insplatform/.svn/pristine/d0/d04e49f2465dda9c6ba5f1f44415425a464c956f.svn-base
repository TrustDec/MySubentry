package com.insplatform.module.project.service.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.project.model.ProjectItem;
import com.insplatform.module.project.repository.ProjectItemRepository;
import com.insplatform.module.project.service.ProjectItemService;

@Service
public class ProjectItemServiceImpl extends BaseServiceImpl<ProjectItem> implements ProjectItemService{
	
	@Autowired
	private ProjectItemRepository projectItemRepository;

	@Override
	public BaseRepository<ProjectItem> getRepository() {		
		return projectItemRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return projectItemRepository.loadAllGrid(condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return projectItemRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return projectItemRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public ProjectItem get(Serializable id) {		
		return projectItemRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(ProjectItem entity) {	
		return projectItemRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(ProjectItem entity) {		
		projectItemRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		projectItemRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		projectItemRepository.deleteByIds(ids);
	}

	@Override
	public void addItemCourse(String id, String[] ids) {
		projectItemRepository.addItemCourse(id ,ids);
	}

	@Override
	public Map<String, Object> loadAllCourse(Condition condition) {
		return projectItemRepository.loadAllCourse(condition);
	}

	@Override
	public void deleteCourse(String id, String[] ids) {
		projectItemRepository.deleteCourse(id ,ids);
	}

	@Override
	public void updateItemCourseIndex(String id, String rowIndex,
			String currentId, String type) {
		projectItemRepository.updateItemCourseIndex(id ,rowIndex ,currentId ,type);
	}

}
