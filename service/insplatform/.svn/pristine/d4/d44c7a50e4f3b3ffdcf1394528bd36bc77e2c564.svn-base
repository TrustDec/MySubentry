package com.insplatform.module.training.approve.repository.impl;

import java.io.Serializable;
import java.util.*;


import org.springframework.stereotype.Repository;

import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insplatform.module.training.approve.model.TrainingApprove;
import com.insplatform.module.training.approve.repository.TrainingApproveRepository;

import com.insframework.system.map.Condition;


@Repository
public class TrainingApproveRepositoryImpl extends BaseRepositoryImpl<TrainingApprove> implements TrainingApproveRepository{

	
	
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select * from PX_TRAINING_APPROVE t where 1=1";
		if(condition.containsKey("pxTrainingScheme"))
		{
			sql= sql +" and t.px_training_scheme= ?";
			condition.put("pxTrainingScheme", condition.get("pxTrainingScheme"));
		}
		if(condition.containsKey("fileName"))
		{
			sql= sql +" and t.file_name like ?";
			condition.put("fileName", "%" + condition.get("fileName") + "%" );
		}
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_TRAINING_APPROVE t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_TRAINING_APPROVE t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public TrainingApprove get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TrainingApprove entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(TrainingApprove entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	

	
}
