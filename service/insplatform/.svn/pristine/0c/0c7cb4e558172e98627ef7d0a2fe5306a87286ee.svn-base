package com.insplatform.module.job;

import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.insframework.common.spring.jdbc.JdbcAssistant;
import com.insframework.component.service.file.doc.DocTanferService;
import com.insframework.component.service.file.doc.bean.DocBean;

/**
 * 文档转换任务
 * @author Administrator
 *
 */
@Component
public class DocTransferJob {
	
	@Autowired
	private JdbcAssistant jdbcAssistant;
	
	@Autowired
	private DocTanferService docTanferService;
	
	private final int MAX_TRANFER_COUNT = 3;
	
	Logger logger = Logger.getLogger(DocTransferJob.class);
	
	
	public void run(){
		
		logger.info("文档转换任务开始..");
		
		String sql = "select * from PX_DOC_TRANSFER_JOB";
		List<Map<String, Object>> list = jdbcAssistant.query(sql);
		
		if(list.size() == 0){
			logger.info("不存在需要转换的文档..任务结束..");		
			return;
		}
		
		for(Map<String, Object> map : list){
			String docId = map.get("docId")+"";
			String path = map.get("path")+"";
			String url = map.get("url")+"";
			
			int count = MAX_TRANFER_COUNT;
			DocBean docBean = null;			
			
			//循环转转，如果失败MAX_TRANFER_COUNT次，则不处理，等待下一次执行任务时处理
			while(count > 0 && docBean == null){				
				try{
					docBean = docTanferService.tranfer(path, url);		
				}catch(Exception ex){
					ex.printStackTrace();					
				}finally{
					count--;
				}						
			}
			
			if(docBean != null){
				update(docBean, docId);
			}else{
				continue;
			}
		}
		
		logger.info("文档转换完成，任务结束..");
	}
	
	@Transactional
	private void update(DocBean docBean, String docId){
		String sql = "update PX_DOC " +
				" set doc_pdf='"+docBean.getPdfUrl()+"',doc_swf='"+docBean.getSwfUrl()+"'" +
						" where id = '"+docId+"' ";
		jdbcAssistant.update(sql);
		
		sql = "delete from PX_DOC_TRANSFER_JOB where doc_id = '"+docId+"'";
		jdbcAssistant.update(sql);
	} 
	

}
