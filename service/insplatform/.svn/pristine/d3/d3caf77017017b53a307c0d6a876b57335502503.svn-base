package com.insplatform.module.trainbase.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.stereotype.Repository;

import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insplatform.module.trainbase.model.Trainbase;
import com.insplatform.module.trainbase.repository.TrainbaseRepository;

import com.insframework.system.map.Condition;


@Repository
public class TrainbaseRepositoryImpl extends BaseRepositoryImpl<Trainbase> implements TrainbaseRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.* from PX_TRAINBASE t where 1=1 ";
		if(condition.containsKey("name")){
			sql += " and t.name like ? ";
			condition.put("name", "%" + condition.get("name") + "%" );
		}
		if(condition.containsKey("address")){
			sql += " and t.address like ? ";
			condition.put("address", "%" + condition.get("address") + "%" );
		}
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_TRAINBASE t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_TRAINBASE t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public Trainbase get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(Trainbase entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(Trainbase entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public boolean beforeDeleteCheck(String[] ids) {
		String sql = "select (select count(1)  from px_trainbase_canteen c where c.trainbase_id IN "+getInSql(ids)+") as ccount," +
				"(select count(1) from px_trainbase_dormitory d where d.trainbase_id IN "+getInSql(ids)+") as dcount," +
				"(select count(1) from px_trainbase_exam_place e where e.trainbase_id IN "+getInSql(ids)+") as ecount," +
				"(select count(1) from px_classroom r where  r.is_delete='N' and r.trainbase_id IN "+getInSql(ids)+") as rcount " +
				" from  PX_TRAINBASE t where rownum = 1";
		String [] newIds = new String[ids.length * 4];
		for(int i=0;i<4;i++){
			System.arraycopy(ids, 0, newIds, i*ids.length, ids.length);	
		}

		Map<String, Object> result = jdbcAssistant.queryOne(sql,newIds);
		int cCount = Integer.parseInt(result.get("ccount").toString());
		int dCount = Integer.parseInt(result.get("dcount").toString());
		int eCount = Integer.parseInt(result.get("ecount").toString());
		int rCount = Integer.parseInt(result.get("rcount").toString());
		if(cCount > 0 || dCount > 0 || eCount>0 || rCount>0){
			return true;
		}
		return false;
	}
	
	private String getInSql(String[] ids){
		String sql="(";
		for (int i=0;i<ids.length;i++) {
			sql += "?,";
		}
		sql = sql.substring(0, sql.length()-1);
		return sql +")";
	}

	@Override
	public Map<String, Object> loadAllGridEat(Condition condition) {
		String sql = "select t.* from px_trainbase_canteen t where 1=1";
		if(condition.containsKey("name")){
			sql += " and t.name like ? ";
			condition.put("name", "%" + condition.get("name") + "%" );
		}
		if(condition.containsKey("trainbaseName")){
			sql += " and t.trainbase_name like ? ";
			condition.put("trainbaseName", "%" + condition.get("trainbaseName") + "%" );
		}
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
}
