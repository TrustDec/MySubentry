package com.insplatform.module.trainingevaluate.controller;

import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import com.insframework.system.base.controller.BaseController;
import com.insframework.system.map.Condition;
import com.insplatform.module.trainingevaluate.model.TrainingEvaluate;
import com.insplatform.module.trainingevaluate.model.TrainingEvaluateResult;
import com.insplatform.module.trainingevaluate.service.TrainingEvaluateResultService;

@Controller
@RequestMapping("/px/trainingevaluateresult")
public class TrainingEvaluateResultController extends BaseController{
	
	@Autowired
	private TrainingEvaluateResultService trainingEvaluateResultService;
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGrid")
	public @ResponseBody Map<String, Object> loadAllGrid(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return trainingEvaluateResultService.loadAllGrid(condition);
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllList")
	public @ResponseBody Map<String, Object> loadAllList(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return this.getMessager().success().data(trainingEvaluateResultService.loadAllList(condition));
	}	
	
	
	/**
	 * 加载单条数据
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody Map<String, Object> load(@RequestParam("id") String id){		
		return this.getMessager().success().data(trainingEvaluateResultService.load(id));		
	}
	
	/**
	 * 新增
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")	
	public @ResponseBody Map<String, Object> add(TrainingEvaluateResult trainingevaluateresult, HttpServletRequest request){
		trainingEvaluateResultService.save(trainingevaluateresult);
		return this.getMessager().success();
	}
	
	/**
	 * 编辑
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")	
	public @ResponseBody Map<String, Object> update(
		   @RequestParam("id") String id,
		   HttpServletRequest request){		
		TrainingEvaluateResult trainingevaluateresult = trainingEvaluateResultService.get(id);
		this.bindObject(request, trainingevaluateresult);
		trainingEvaluateResultService.update(trainingevaluateresult);
		return this.getMessager().success();
	}
	
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")	
	public @ResponseBody Map<String, Object> delete(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		trainingEvaluateResultService.deleteByIds(ids);
		return this.getMessager().success();
	}

	@RequestMapping("/saveEvaluateResult")	
	public @ResponseBody Map<String, Object> saveEvaluateResult(HttpServletRequest request){
		
		Condition condition = this.getCondition(request,"personList","evaList","subEvaList");
		
		TrainingEvaluate trainingEvaluate = new TrainingEvaluate();
		trainingEvaluate.setCreateUserId(getCurrentUser(request).getId());
		trainingEvaluate.setCreateUserName(getCurrentUser(request).getName());
		Date date = new Date();
		trainingEvaluate.setCreateTime(date);
		trainingEvaluate.setUpdateTime(date);
		
		trainingEvaluateResultService.saveEvaluateResult(trainingEvaluate,condition);
		return this.getMessager().success();
	}
	
	@RequestMapping("/updateEvaluateResult")	
	public @ResponseBody Map<String, Object> updateEvaluateResult(HttpServletRequest request){
		
		Condition condition = this.getCondition(request,"personList","evaList","subEvaList");
		trainingEvaluateResultService.updateEvaluateResult(condition);
		return this.getMessager().success();
	}
	
	/**
	 * 获取方案下的课程信息
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/getEvaluateResults")
	public @ResponseBody Map<String, Object> getCurriculum(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"schemeId","evaluateId");
		Map<String, Object> dataMap=trainingEvaluateResultService.getEvaluateResults(condition);
		return this.getMessager().success().put("data", dataMap);
	}
}
