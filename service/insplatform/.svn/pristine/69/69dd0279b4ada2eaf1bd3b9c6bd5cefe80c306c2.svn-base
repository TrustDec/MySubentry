package com.insplatform.module.attachment.repository.impl;

import java.io.File;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Repository;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.insframework.common.utils.FileUtil;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;
import com.insplatform.module.attachment.model.AttachmentsFile;
import com.insplatform.module.attachment.repository.AttachmentsFileRepository;


@Repository
public class AttachmentsFileRepositoryImpl extends BaseRepositoryImpl<AttachmentsFile> implements AttachmentsFileRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.* from PX_ATTACHMENTS_FILE t ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_ATTACHMENTS_FILE t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_ATTACHMENTS_FILE t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public AttachmentsFile get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(AttachmentsFile entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(AttachmentsFile entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public List<Map<String, Object>> loadAllByPid(String pid,String type) {
		String sql = "select t.* from PX_ATTACHMENTS t where t.pid = '"+pid+"' and t.type='"+type+"'";
		return jdbcAssistant.query(sql);
	}
	
	/**
	 * 获取上传文件
	 * @param request
	 * @param name
	 * @return
	 */
	public MultipartFile getMultipartFile(HttpServletRequest request, String name) {
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;		
		Map<String,MultipartFile> fileMap = multipartRequest.getFileMap();
		MultipartFile mFile = (MultipartFile) fileMap.get(name);
		return mFile;
	}
	
	/**
	 * 获取上传文件列表
	 * @param request
	 * @param name
	 * @return
	 */
	public List<MultipartFile> getMultipartFiles(HttpServletRequest request, String name) {
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;		
		return multipartRequest.getFiles(name);
	}	
	
	/**
	 * 保存上传文件
	 * @param file				文件
	 * @param basePath			基础路径
	 * @param baseUrl			基础相对url
	 * @param useTimeDir		是否创建时间目录
	 * @return
	 * @throws Exception
	 */
	private AttachmentsFile saveFile(MultipartFile file, String basePath, String baseUrl, boolean useTimeDir) throws Exception{
		
		String fileName = FileUtil.getName(file.getOriginalFilename());
		String path = "";
		String url = "";
		try{
			if(useTimeDir){
				SimpleDateFormat formater = new SimpleDateFormat("yyyyMMdd");
				String dir = formater.format(new Date());
				path = basePath + File.separatorChar + dir + File.separatorChar + fileName;
				url = baseUrl + "/" + dir + "/" +  fileName;	
				FileUtil.mkDirs(basePath + File.separator + dir);
			}else{
				path = basePath + File.separatorChar + fileName;
				url = baseUrl + "/" + fileName;	
				FileUtil.mkDirs(basePath);
			}		
			this.saveMultipartFile(file, path);
		}catch(Exception ex){
			ex.printStackTrace();
			return null;
		}
		AttachmentsFile att = new AttachmentsFile();
		att.setPath(path);
		att.setUrl(url);
		att.setNewFileName(fileName);
		return att;
		
	}
	
	
	/**
	 * 保存上传文件
	 * @param file
	 * @param path
	 * @throws Exception
	 */
	private void saveMultipartFile(MultipartFile file, String path) throws Exception{
		file.transferTo(new File(path));
	}
	
	/**
	 * 保存上传文件
	 * @param file				文件
	 * @param basePath			基础路径
	 * @param baseUrl			基础相对url
	 * @param useTimeDir		是否创建时间目录
	 * @return
	 */
	@Override
	public int batchSaveFiles(String pid,String type,List<MultipartFile> files, String basePath,
			String baseUrl, boolean b, CurrentUser user) {
		for (MultipartFile file : files) {
			try {
				String fileName = file.getOriginalFilename();
				if (fileName==null||!"".equals(fileName)) {
					AttachmentsFile att = this.saveFile(file, basePath, baseUrl, b);
					att.setPid(pid);
					att.setCreateUserId(user.getId());
					att.setCreateUserName(user.getName());
					att.setOldFileName(file.getOriginalFilename());
					att.setCreateTime(new Date());
					att.setType(type);
					super.save(att);
				}
			} catch (Exception e) {
				e.printStackTrace();
				return -1;
			}
		}
		return files.size();
	}

	@Override
	public void deleteFile(String[] pids,String type) {
		String[] sqlInsert = new String[pids.length];
		for(int i = 0 ; i < pids.length ; i++)
		{
		   sqlInsert[i]= "delete from PX_ATTACHMENTS_FILE t where t.pid='"+pids[i]+"' and t.type='"+type+"'";
		}
		jdbcAssistant.batchUpdate(sqlInsert);
		
	}


	
}
