package com.insplatform.module.yeardemand.service.impl;

import java.io.Serializable;
import java.util.*;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.map.Condition;

import com.insplatform.module.yeardemand.model.YearDemand;
import com.insplatform.module.yeardemand.repository.YearDemandRepository;
import com.insplatform.module.yeardemand.service.YearDemandService;

@Service
public class YearDemandServiceImpl extends BaseServiceImpl<YearDemand> implements YearDemandService{
	
	@Autowired
	private YearDemandRepository yearDemandRepository;

	@Override
	public BaseRepository<YearDemand> getRepository() {		
		return yearDemandRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return yearDemandRepository.loadAllGrid(condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return yearDemandRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return yearDemandRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public YearDemand get(Serializable id) {		
		return yearDemandRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(YearDemand entity) {	
		return yearDemandRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(YearDemand entity) {		
		yearDemandRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		yearDemandRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public Map<String, Object> deleteByIdsx(String... ids) {
		Map<String, Object> mapResult = new HashMap<String, Object>();
		int delNum = 0;
		int noDelNum = 0;
		for (int i = 0; i < ids.length; i++) {
			if (yearDemandRepository.beforeDeleteCheack(ids[i])) {
				delNum += yearDemandRepository.deleteByIdx(ids[i]);
			}else{
				noDelNum++;
			}
		}
		mapResult.put("delNum", delNum);
		mapResult.put("noDelNum", noDelNum);
		return mapResult;
	}

	@Override
	public String updateReleaseOrCancel(String id, String type) {
		if ("release".equals(type)) {
			//发布前校验
			boolean result = yearDemandRepository.beforeReleaseCheck();
			if (result) {
				return yearDemandRepository.release(id)+"";
			}
			return "NO";
		}else if("cancel".equals(type)) {
			//取消发布前校验
			boolean result = yearDemandRepository.beforeCancelReleaseCheck();
			if (result) {
				return yearDemandRepository.cancelRelease(id)+"";
			}
			return "NO";
		}
		return "unrealized";
	}

}
