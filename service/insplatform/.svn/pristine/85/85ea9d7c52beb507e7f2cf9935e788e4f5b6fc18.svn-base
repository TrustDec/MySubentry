package com.insplatform.module.monthplan.service.impl;

import java.io.Serializable;
import java.util.*;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.map.Condition;

//import com.insplatform.module.monthplan.model.MonthPlan;
import com.insplatform.module.monthplan.model.MonthPlanProject;
import com.insplatform.module.monthplan.repository.MonthPlanProjectRepository;
//import com.insplatform.module.monthplan.repository.MonthPlanRepository;
import com.insplatform.module.monthplan.service.MonthPlanProjectService;
//import com.insplatform.module.yearplan.repository.YearPlanRepository;

@Service
public class MonthPlanProjectServiceImpl extends BaseServiceImpl<MonthPlanProject> implements MonthPlanProjectService{
	
	@Autowired
	private MonthPlanProjectRepository monthPlanProjectRepository;
	
//	@Autowired
//	private MonthPlanRepository monthPlanRepository;
//	
//	@Autowired
//	private YearPlanRepository yearPlanRepository;

	@Override
	public BaseRepository<MonthPlanProject> getRepository() {		
		return monthPlanProjectRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return monthPlanProjectRepository.loadAllGrid(condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return monthPlanProjectRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return monthPlanProjectRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public MonthPlanProject get(Serializable id) {		
		return monthPlanProjectRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(MonthPlanProject entity) {	
		boolean flag = monthPlanProjectRepository.beforeSaveCheckPoject(entity);
		if (!flag) {
			return "hasThisProject";
		}
		return monthPlanProjectRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(MonthPlanProject entity) {		
		monthPlanProjectRepository.update(entity);
	}
	
	@Override
	public String updatex(MonthPlanProject entity) {
		boolean flag = monthPlanProjectRepository.beforeSaveCheckPoject(entity);
		if (!flag) {
			return "hasThisProject";
		}
		monthPlanProjectRepository.update(entity);
		return "1";
	}

	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		monthPlanProjectRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		monthPlanProjectRepository.deleteByIds(ids);
	}

	@Override
	public Map<String, Object> loadAllOptionalProject(Condition condition) {
//		MonthPlan mp = monthPlanRepository.get(condition.get("monthPlanId").toString());
		//获取最新的年度计划
//		Map<String, Object> map = yearPlanRepository.getTheLatestVersion(mp.getYear());
//		condition.put("YearPlanId", map.get("id").toString());
		return monthPlanProjectRepository.loadAllOptionalProject(condition);
	}

	
}
