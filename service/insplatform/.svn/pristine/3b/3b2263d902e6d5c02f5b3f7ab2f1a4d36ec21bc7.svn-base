package com.insplatform.module.worktype.repository.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.worktype.model.WorktypeLevel;
import com.insplatform.module.worktype.repository.WorktypeLevelRepository;

@Repository
public class WorktypeLevelRepositoryImpl extends BaseRepositoryImpl<WorktypeLevel> implements WorktypeLevelRepository{

	@Override
	public Map<String, Object> loadAll(Condition condition) {	
		String sql = "select t.* " +
				" from PX_WORKTYPE_LEVEL t " +				
				" where 1=1 ";
		if(condition.containsKey("worktypeId")){
			sql += " and t.worktype_id = ? ";
		}
		sql += " order by t.order_index ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllByWorkTypeId(Condition condition) {
		String sql = "select t.id value, t.name text, t.order_index, t.remark, t.worktype_id " +
				" from PX_WORKTYPE_LEVEL t " +				
				" where 1=1 ";
		if(condition.containsKey("worktypeId")){
			sql += " and t.worktype_id = ? ";
		}
		sql += " order by t.order_index ";
		return jdbcAssistant.query(sql,condition.valueArray());
	}

	@Override
	public Map<String, Object> loadAllChooser(Condition condition) {
		String sql = "select * from V_PX_WORKTYPE where 1=1 ";
		if(condition.containsKey("worktypeId")){
			sql += " and worktype_id = ? ";
		}
		if(condition.containsKey("worktypeClassifyId")){
			sql += " and worktype_classify_id = ? ";
		}
		if(condition.containsKey("fullName")){
			sql += " and full_name like ? ";
			condition.put("fullName", "%" + condition.get("fullName") + "%");
		}
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
			
		
	}

	
	/**
	 * 重写父类get方法
	 */
	@Override
	public WorktypeLevel get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(WorktypeLevel entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(WorktypeLevel entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}


	
	
	
}
