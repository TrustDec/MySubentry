package com.insplatform.module.teacherclock.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.stereotype.Repository;

import com.insframework.common.spring.jdbc.mapper.ValueMapper;
import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;

import com.insframework.system.map.Condition;
import com.insplatform.module.teacherclock.model.TeacherClock;
import com.insplatform.module.teacherclock.repository.TeacherClockRepository;

@Repository
public class TeacherClockRepositoryImpl extends
		BaseRepositoryImpl<TeacherClock> implements TeacherClockRepository {

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {
		String sql = " select * from ( select d.aq,d.courseid,d.coursename,d.id, to_char(d.stat_time,'yyyy-mm-dd hh24:mi') as stat_time,to_char(d.stop_time,'yyyy-mm-dd hh24:mi') as stop_time,  " 
				   + "  d.px_class_report,d.name,d.proname,d.px_content,e.teacher_id,e.px_class_curriculum "
				   + "  from (select (case   when a.course is null then a.coursename   else   (select tt.title from PX_COURSE tt where tt.id = a.course) "
				   + "  end) as coursename, a.course as courseid, (case  when a.course is null then  '0'   else    (select '1' from PX_COURSE tt where tt.id = a.course)     end) as aq, " 
				   + "  a.id, a.stat_time, a.stop_time,   a.px_class_report ,b.px_content,  b.name ,f.name proname  "
				   + "  from PX_CLASS_CURRICULUM a, PX_CLASS_REPORT b ,px_project f    where f.id=b.px_project and b.id = a.px_class_report "
				   + "   and b.state = '审批通过'  ) d "
				   + "  left join (select teacher_id, px_class_curriculum    from PX_CLASS_CURRICULUM_TEACHER) e "
				   + "  on d.id = e.px_class_curriculum where 1=1 " ;
				if (condition.containsKey("name")) {
					sql += " and d.name like ? ";
					condition.put("name", "%" + condition.get("name") + "%");
				}
				if (condition.containsKey("proname")) {
					sql += " and d.proname like ? ";
					condition.put("proname", "%" + condition.get("proname") + "%");
				}
				if (condition.containsKey("coursename")) {
					sql += " and d.coursename like ? ";
					condition.put("coursename", "%" + condition.get("coursename") + "%");
				}
				if (condition.containsKey("pxContent")) {
					sql += " and d.px_content like ? ";
					condition.put("pxContent", "%" + condition.get("pxContent") + "%");
				}
				sql+="  and d.stop_time>sysdate+1 and e.teacher_id = ?  ";
				condition.put("teacher_id", condition.getCurrentUser().getId());
		
		
		sql += " order by d.stat_time asc ,d.stop_time desc ) ";
		return gridService.loadData(condition.getGridTransModel(), sql,
				condition.valueArray(), new ValueMapper() {
					@Override
					public RETURN_CODE map(Map<String, Object> record)
							throws Exception {
						String sql = "select us.name from PX_CLASS_CURRICULUM_TEACHER t,PX_TEACHER te,SYS_USER us where t.teacher_id=te.user_id and te.user_id=us.id and t.px_class_curriculum='"
								+ record.get("id") + "'";
						List<Map<String, Object>> list = jdbcAssistant
								.query(sql);
						String name = "";
						for (Map<String, Object> map : list) {
							name += map.get("name").toString() + ",";
						}
						if (TextUtil.isNotEmpty(name)) {
							name = name.substring(0, name.lastIndexOf(","));
						}
						record.put("teacherListName", name);
						return RETURN_CODE.NEXT;
					}
				});
	}

	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {
		String sql = "select t.* from PX_TEACHER_CLOCK t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}

	@Override
	public Map<String, Object> load(String id, Condition condition) {
		String sql = "select d.px_address,d.px_content,d.coursename,d.id, to_char(d.stat_time,'yyyy-mm-dd hh24:mi') as stat_time,to_char(d.stop_time,'yyyy-mm-dd hh24:mi') as stop_time,d.px_class_report,d.name,d.proname,e.teacher_id,e.px_class_curriculum "
				+ "  from (select (case   when a.course is null then a.coursename "
				+ "     else   (select tt.title from PX_COURSE tt where tt.id = a.course) "
				+ "     end) as coursename,   a.id,a.stat_time, a.stop_time,   a.px_class_report,   b.name ,b.px_address,b.px_content,"
				+ "   f.name proname "
				+ "  from PX_CLASS_CURRICULUM a, PX_CLASS_REPORT b ,px_project f    where f.id=b.px_project and b.id = a.px_class_report "
				+ "   and b.state = '审批通过'  ) d "
				+ "  left join (select teacher_id, px_class_curriculum    from PX_CLASS_CURRICULUM_TEACHER) e "
				+ "  on d.id = e.px_class_curriculum where 1=1 and d.stop_time>sysdate-6 and e.teacher_id = ?  ";
		condition.put("teacher_id", condition.getCurrentUser().getId());
		sql += " and d.id= ? ";
		condition.put("d.id", id);
		sql += " order by d.stat_time asc ,d.stop_time desc";
		return jdbcAssistant.queryOne(sql, condition.valueArray(),
				new ValueMapper() {
					@Override
					public RETURN_CODE map(Map<String, Object> record)
							throws Exception {
						String sql = "select us.name from PX_CLASS_CURRICULUM_TEACHER t,PX_TEACHER te,SYS_USER us where t.teacher_id=te.user_id and te.user_id=us.id and t.px_class_curriculum='"
								+ record.get("id") + "'";
						List<Map<String, Object>> list = jdbcAssistant
								.query(sql);
						String name = "";
						for (Map<String, Object> map : list) {
							name += map.get("name").toString() + ",";
						}
						if (TextUtil.isNotEmpty(name)) {
							name = name.substring(0, name.lastIndexOf(","));
						}
						record.put("teacherListName", name);
						return RETURN_CODE.NEXT;
					}
				});
	}
	
	@Override
	public Map<String, Object> loadAllQueryClockGrid(String id,String pxId,Condition condition) {
		String sql = " select * from  ( select * from (select t.px_class_repor,    t.userId as id,     (case b.sex    when '1' then  '男'   when '2' then   '女'   end) as sex,   b.name, "+
                     " b.org_name,     b.id_card,     b.company_name,   b.duty  from V_SYS_USER_INFO b, PX_CLASS_REPORT_USER t " +
                     "  where 1 = 1    and t.userid = b.id    and state = '审批通过' ";
                     if (condition.containsKey("name")) {
             			sql += " and b.name like ? ";
             			condition.put("name", "%" + condition.get("name") + "%");
             		}
                 sql+="  and t.PX_CLASS_REPOR = ?" ;
            	  condition.put("t.PX_CLASS_REPOR", pxId);
            	  sql+=  " ) e left join (select (case "+
                   "  when a.course is null then   a.coursename   else   (select tt.title  from PX_COURSE tt     where tt.id = a.course) " +
                   "  end) as coursename,  (case  when a.course is null then  '0'   else    (select '1' from PX_COURSE tt where tt.id = a.course)     end) as aq, a.id as ccid,   a.px_class_report    from PX_CLASS_CURRICULUM a, PX_CLASS_REPORT b   where 1 = 1 " +
                   "  and b.id = a.px_class_report  and b.state = '审批通过'     " +
                   " and a.px_class_report = ? " ;
                   condition.put("a.px_class_report", pxId);
                  sql+= " and a.id = ? " ;
                	 condition.put("a.id", id);
                  sql+= ") f "+
                   "  on e.PX_CLASS_REPOR = f.px_class_report   left join (select statu, px_class_report, CLASS_CURRICU_ID, userId "+
                   " from px_teacher_clock) g  on g.px_class_report = e.PX_CLASS_REPOR and g.CLASS_CURRICU_ID = f.ccid  and e.Id = g.userId ) order by name ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	
	@Override
	public List<String> loadQueryClockRecord(String cid,String pxId) {
		String sql = "select userid from px_teacher_clock where px_class_report = '"+pxId+"' and class_curricu_id = '"+cid+"' ";
		return jdbcAssistant.queryAsList(sql, String.class, null);
	}
	
	
	@Override
	public String getOneQueryClockRecordId(String cid,String pxId,String uid) {	
		String sql = " select id from px_teacher_clock where px_class_report = '"+pxId+"' and class_curricu_id = '"+cid+"' and userid='"+uid+"' ";
		return jdbcAssistant.queryAsString(sql);
	}
	
	
	@Override
	public Map<String, Object> loadAdjustmentAllGrid(Condition condition) {
		String sql = "  select distinct id,coursename,px_content,stat_time,stop_time,px_class_report,name,proname,px_class_curriculum from  " 
				+ " ( select d.coursename,d.id,d.px_content, to_char(d.stat_time,'yyyy-mm-dd hh24:mi') as stat_time,to_char(d.stop_time,'yyyy-mm-dd hh24:mi') as stop_time,d.px_class_report,d.name,d.proname,e.teacher_id,e.px_class_curriculum "
				+ "  from (select (case   when a.course is null then a.coursename "
				+ "     else   (select tt.title from PX_COURSE tt where tt.id = a.course) "
				+ "     end) as coursename,  (case  when a.course is null then  '0'   else    (select '1' from PX_COURSE tt where tt.id = a.course)     end) as aq,  a.id, a.stat_time, a.stop_time,   a.px_class_report,b.px_content,   b.name ,f.name proname "
				+ "  from PX_CLASS_CURRICULUM a, PX_CLASS_REPORT b, px_project f    where f.id=b.px_project and b.id = a.px_class_report "
				+ "   and b.state = '审批通过'  ) d "
				+ "  left join (select teacher_id, px_class_curriculum    from PX_CLASS_CURRICULUM_TEACHER) e "
				+ "  on d.id = e.px_class_curriculum where 1=1   ";
				if (condition.containsKey("proname")) {
					sql += " and d.proname like ? ";
					condition.put("proname", "%" + condition.get("proname") + "%");
				}
				if (condition.containsKey("name")) {
					sql += " and d.name like ? ";
					condition.put("name", "%" + condition.get("name") + "%");
				}
				if (condition.containsKey("coursename")) {
					sql += " and d.coursename like ? ";
					condition.put("coursename", "%" + condition.get("coursename") + "%");
				}
				if (condition.containsKey("pxContent")) {
					sql += " and d.px_content like ? ";
					condition.put("pxContent", "%" + condition.get("pxContent") + "%");
				}
		        sql+= " order by d.stat_time asc ,d.stop_time desc )";
		return gridService.loadData(condition.getGridTransModel(), sql,
				condition.valueArray(), new ValueMapper() {
					@Override
					public RETURN_CODE map(Map<String, Object> record)
							throws Exception {
						String sql = "select us.name from PX_CLASS_CURRICULUM_TEACHER t,PX_TEACHER te,SYS_USER us where t.teacher_id=te.user_id and te.user_id=us.id and t.px_class_curriculum='"
								+ record.get("id") + "'";
						List<Map<String, Object>> list = jdbcAssistant
								.query(sql);
						String name = "";
						for (Map<String, Object> map : list) {
							name += map.get("name").toString() + ",";
						}
						if (TextUtil.isNotEmpty(name)) {
							name = name.substring(0, name.lastIndexOf(","));
						}
						record.put("teacherListName", name);
						return RETURN_CODE.NEXT;
					}
				});
	}
	
	@Override
	public Map<String, Object> loadOneAdjustment(String id, Condition condition) {
		String sql = " select distinct px_address,px_content,coursename,id,stat_time,stop_time,px_class_report,name,proname,px_class_curriculum from " 
				+ " ( select d.px_address,d.px_content,d.coursename,d.id, to_char(d.stat_time,'yyyy-mm-dd hh24:mi') as stat_time,to_char(d.stop_time,'yyyy-mm-dd hh24:mi') as stop_time,d.px_class_report,d.name,d.proname,e.teacher_id,e.px_class_curriculum "
				+ "  from (select (case   when a.course is null then a.coursename "
				+ "     else   (select tt.title from PX_COURSE tt where tt.id = a.course) "
				+ "     end) as coursename,  (case  when a.course is null then  '0'   else    (select '1' from PX_COURSE tt where tt.id = a.course)     end) as aq,  a.id,a.stat_time, a.stop_time,   a.px_class_report,   b.name ,b.px_address,b.px_content,"
				+ "   f.name proname "
				+ "  from PX_CLASS_CURRICULUM a, PX_CLASS_REPORT b,px_project f    where f.id=b.px_project and b.id = a.px_class_report "
				+ "   and b.state = '审批通过' ) d "
				+ "  left join (select teacher_id, px_class_curriculum    from PX_CLASS_CURRICULUM_TEACHER) e "
				+ "  on d.id = e.px_class_curriculum where 1=1   and d.id= ? ";
		condition.put("d.id", id);
		sql += " order by d.stat_time asc ,d.stop_time desc ) ";
		return jdbcAssistant.queryOne(sql, condition.valueArray(),
				new ValueMapper() {
					@Override
					public RETURN_CODE map(Map<String, Object> record)
							throws Exception {
						String sql = "select us.name from PX_CLASS_CURRICULUM_TEACHER t,PX_TEACHER te,SYS_USER us where t.teacher_id=te.user_id and te.user_id=us.id and t.px_class_curriculum='"
								+ record.get("id") + "'";
						List<Map<String, Object>> list = jdbcAssistant
								.query(sql);
						String name = "";
						for (Map<String, Object> map : list) {
							name += map.get("name").toString() + ",";
						}
						if (TextUtil.isNotEmpty(name)) {
							name = name.substring(0, name.lastIndexOf(","));
						}
						record.put("teacherListName", name);
						return RETURN_CODE.NEXT;
					}
				});
	}
	


	/**
	 * 重写父类get方法
	 */
	@Override
	public TeacherClock get(Serializable id) {
		return super.get(id);
	}

	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TeacherClock entity) {
		return super.save(entity);
	}

	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(TeacherClock entity) {
		super.update(entity);
	}

	@Override
	public Map<String, Object> loadAllQueryGrid(Condition condition) {
		String sql = "select d.px_address,d.px_content,d.coursename,d.id, to_char(d.stat_time,'yyyy-mm-dd hh24:mi') as stat_time,to_char(d.stop_time,'yyyy-mm-dd hh24:mi') as stop_time,d.px_class_report,d.name,d.proname,e.teacher_id,e.px_class_curriculum "
				+ "  from (select (case   when a.course is null then a.coursename "
				+ "     else   (select tt.title from PX_COURSE tt where tt.id = a.course) "
				+ "     end) as coursename,  (case  when a.course is null then  '0'   else    (select '1' from PX_COURSE tt where tt.id = a.course)     end) as aq,  a.id,a.stat_time, a.stop_time,   a.px_class_report,   b.name ,b.px_address,b.px_content,"
				+ "   f.name proname "
				+ "  from PX_CLASS_CURRICULUM a, PX_CLASS_REPORT b,px_project f    where f.id=b.px_project and b.id = a.px_class_report "
				+ "   and b.state = '审批通过'  ) d "
				+ "  left join (select teacher_id, px_class_curriculum    from PX_CLASS_CURRICULUM_TEACHER) e "
				+ "  on d.id = e.px_class_curriculum where 1=1 ";
				if (condition.containsKey("name")) {
					sql += " and d.name like ? ";
					condition.put("name", "%" + condition.get("name") + "%");
				}
				if (condition.containsKey("proname")) {
					sql += " and d.proname like ? ";
					condition.put("proname", "%" + condition.get("proname") + "%");
				}
				if (condition.containsKey("coursename")) {
					sql += " and d.coursename like ? ";
					condition.put("coursename", "%" + condition.get("coursename") + "%");
				}
				if (condition.containsKey("pxContent")) {
					sql += " and d.px_content like ? ";
					condition.put("pxContent", "%" + condition.get("pxContent") + "%");
				}
		sql += " and  e.teacher_id = ?  ";
		condition.put("teacher_id", condition.getCurrentUser().getId());
		sql += " order by d.stat_time asc ,d.stop_time desc";
		return gridService.loadData(condition.getGridTransModel(), sql,
				condition.valueArray(), new ValueMapper() {
					@Override
					public RETURN_CODE map(Map<String, Object> record)
							throws Exception {
						String sql = "select us.name from PX_CLASS_CURRICULUM_TEACHER t,PX_TEACHER te,SYS_USER us where t.teacher_id=te.user_id and te.user_id=us.id and t.px_class_curriculum='"
								+ record.get("id") + "'";
						List<Map<String, Object>> list = jdbcAssistant
								.query(sql);
						String name = "";
						for (Map<String, Object> map : list) {
							name += map.get("name").toString() + ",";
						}
						if (TextUtil.isNotEmpty(name)) {
							name = name.substring(0, name.lastIndexOf(","));
						}
						record.put("teacherListName", name);
						return RETURN_CODE.NEXT;
					}
				});
	}
	
	@Override
	public Map<String, Object> loadOneEditAdjustment(String id, Condition condition) {
		String sql = " select * from  ( select  e.teacher_id    from (select (case     when a.course is null then    a.coursename   else    (select tt.title "
                    +"   from PX_COURSE tt        where tt.id = a.course)      end) as coursename,    (case     when a.course is null then    '0'  else "
                    +"     (select '1' from PX_COURSE tt where tt.id = a.course)   end) as aq, "
                    +" a.id,  a.stat_time,   a.stop_time,    a.px_class_report,  b.name,  b.px_address,  b.px_content, f.name proname  from PX_CLASS_CURRICULUM a, "
                    +"   PX_CLASS_REPORT     b,    px_project      f     where f.id = b.px_project    and b.id = a.px_class_report  and b.state = '审批通过') d "
                    +"  left join (select teacher_id, px_class_curriculum   from PX_CLASS_CURRICULUM_TEACHER) e     on d.id = e.px_class_curriculum "
                    +"  where 1 = 1   and d.id = ? ";
                    condition.put("d.id", id);
              sql+= "  order by d.stat_time asc, d.stop_time desc      ) o left join "
                   + "  (   select  z.id,z.user_id,k.name,k.sex,k.edu,z.direction,z.lesson,z.remark  " 
                   +  "  from px_teacher z ,  V_SYS_USER_INFO k  where z.user_id = k.id and z.approval = '1' )q  on o.teacher_id=q.user_id ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}

}
