package com.insplatform.module.attachment.service.impl;

import java.io.File;
import java.io.Serializable;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.context.App;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;
import com.insplatform.module.attachment.model.AttachmentsFile;
import com.insplatform.module.attachment.repository.AttachmentsFileRepository;
import com.insplatform.module.attachment.service.AttachmentsFileService;

@Service
public class AttachmentsFileServiceImpl extends BaseServiceImpl<AttachmentsFile> implements AttachmentsFileService{
	
	@Autowired
	private AttachmentsFileRepository attachmentsFileRepository;

	@Override
	public BaseRepository<AttachmentsFile> getRepository() {		
		return attachmentsFileRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {			
		return attachmentsFileRepository.loadAllGrid(condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return attachmentsFileRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return attachmentsFileRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public AttachmentsFile get(Serializable id) {		
		return attachmentsFileRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(AttachmentsFile entity) {	
		return attachmentsFileRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(AttachmentsFile entity) {		
		attachmentsFileRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		attachmentsFileRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		attachmentsFileRepository.deleteByIds(ids);
	}

	@Override
	public int batchSaveFiles(String pid,String type, HttpServletRequest request) {
		try {
			List<MultipartFile> files = attachmentsFileRepository.getMultipartFiles(request,"attachment");
			String basePath = App.FILE_SYS + File.separatorChar + "attachment";
			String baseUrl = App.FILE_SYS_URL + "/" + "attachment";
			CurrentUser user = getCurrentUser(request);
			attachmentsFileRepository.batchSaveFiles(pid,type,files, basePath, baseUrl, true, user);
		} catch (Exception e) {
			return 0;
		}
		return 0;
	}

	private CurrentUser getCurrentUser(HttpServletRequest request) {
		Object obj = request.getSession().getAttribute(App.CURRENT_USER);
		if(obj != null){
			return (CurrentUser)obj;
		}
		return new CurrentUser();
	}

	@Override
	public List<Map<String, Object>> loadAllListByPid(Condition condition) {
		String pid = "noHavePid";
		String type="";
		if (condition.containsKey("pid")) {
			pid = condition.get("pid")+"";
		}
		if (condition.containsKey("type")) {
			type = condition.get("type")+"";
		}
		return attachmentsFileRepository.loadAllByPid(pid,type);
	}

	@Override
	public void deleteFile(String[] pids,String type) {
		attachmentsFileRepository.deleteFile(pids,type);
		
	}





}
