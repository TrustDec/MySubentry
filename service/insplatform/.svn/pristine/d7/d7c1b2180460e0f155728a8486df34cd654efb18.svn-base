package com.insplatform.system.user.repository.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.Serializable;
import java.util.List;
import java.util.Map;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.insframework.common.spring.jdbc.mapper.ValueMapper;
import com.insframework.common.utils.FileUtil;
import com.insframework.common.utils.SecurityUtil;
import com.insframework.common.utils.TextUtil;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;
import com.insplatform.system.role.RoleConstant;
import com.insplatform.system.role.repository.RoleRepository;
import com.insplatform.system.user.model.User;
import com.insplatform.system.user.repository.UserRepository;
import com.insplatform.system.user.service.UserBizDataAuthzService;

@Repository
public class UserRepositoryImpl extends BaseRepositoryImpl<User> implements UserRepository{

	
	@Autowired
	private UserBizDataAuthzService userBizDataAuthzService;	
	
	@Autowired
	private RoleRepository roleRepository;

	@Override
	public List<String> loadUserByOrganizationIds(List<String> orgIds) {
		String sql = "select u.id from SYS_USER u " +
				" left join SYS_USER_ORG_REL uo on uo.user_id = u.id " +
				" left join SYS_ORGANIZATION o on o.id = uo.organization_id " +
				" where o.id in " + TextUtil.tansferListtoSqlString(orgIds);
		return jdbcAssistant.queryAsList(sql, String.class, null);
	}
	
	@Override
	public String getLoadAllSql() {
		String sql = "select * from V_SYS_USER_INFO where 1=1 and is_delete = 'N' ";
		return sql;
	}
	
	@Override
	public Map<String, Object> loadAll(Condition condition) {
		String sql = getLoadAllSql();
		
		if(condition.containsKey("name")){
			sql += " and name like ? ";
			condition.put("name", "%" + condition.get("name") + "%");
		}
		if(condition.containsKey("account")){
			sql += " and account like ? ";
			condition.put("account", "%" + condition.get("account") + "%");
		}
		if(condition.containsKey("working")){
			sql += " and working = ? ";
		}
		if(condition.containsKey("enabled")){
			sql += " and enabled = ? ";
		}
		if(condition.containsKey("orgName")){
			sql += " and (org_name like '%"+condition.get("orgName")+"%' or company_name like '%"+condition.get("orgName")+"%') ";
			condition.remove("orgName");
		}
		if(condition.containsKey("orgId")){
			sql += " and org_id = '"+condition.get("orgId")+"'";
			condition.remove("orgId");
		}
		if(condition.containsKey("notOrg")){
			sql += " and id not in (select user_id from SYS_USER_ORG_REL) ";
			condition.remove("notOrg");
		}
		if(condition.containsKey("roleId")){
			sql += " and id in (select user_id from SYS_USER_ROLE_REL where role_id = '"+condition.get("roleId")+"') ";
			if(!RoleConstant.ORG_ADMIN_ID.getValue().equals(condition.get("roleId").toString())){
				sql += " and name != '机构管理员' ";
			}			
			condition.remove("roleId");
		}else{
			sql += " and name != '机构管理员' ";
		}
		if(condition.containsKey("notRoleId")){
			sql += " and id not in (select user_id from SYS_USER_ROLE_REL where role_id = '"+condition.get("notRoleId")+"') ";
			condition.remove("notRoleId");
		}
		
		//权限控制
		CurrentUser user = condition.getCurrentUser();
		//是否是机构管理员
		boolean isOrgAdmin = roleRepository.checkUserIsOrgAdmin(user.getId());
		//机构管理员的时候不仅要过滤权限，还需要看到机构为空的用户
		if(isOrgAdmin){
			sql = userBizDataAuthzService.buildUserBizDataAuthzUserSql(sql, "id", user, " or (org_id is null) ");
		}else{
			sql = userBizDataAuthzService.buildUserBizDataAuthzUserSql(sql, "id", user);
		}
		
		sql += " order by birthday,name";
		
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray(), new ValueMapper(){
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {	
				if(record.get("sex") != null){
					if("1".equals(record.get("sex").toString())){
						record.put("sex", "男");
					}else if("2".equals(record.get("sex").toString())){
						record.put("sex", "女");
					}
				}				
				return RETURN_CODE.NEXT;
			}
		});
	}

	@Override
	public Map<String, Object> load(String id) {
		String sql = "select t.id,t.name,t.account,t.id_card,t.sex,t.phone,t.working," +
				"t.enabled,t.remark,t.edu,t.nation,t.duty,t.nativeq," +
				"to_char(t.birthday,'yyyy-MM-dd') as birthday," +
				"o.name as org_name,o.id as org_id " +
				" from SYS_USER t " +
				"left join SYS_USER_ORG_REL uo on t.id = uo.user_id " +
				"left join SYS_ORGANIZATION o on uo.organization_id = o.id " +
				"where t.id = '"+id+"'";
		return jdbcAssistant.queryOne(sql);
	}

	@Override
	public void resetPassword(String[] ids) {
		if(ids.length > 0){
			String[] sqls = new String[ids.length];
			for(int i=0; i<sqls.length; i++){
				sqls[i] = "update SYS_USER set password = '"+SecurityUtil.encrypt("111111")+"' where id = '"+ids[i]+"'";
			}
			jdbcAssistant.batchUpdate(sqls);
		}		
	}
	
	/**
	 * 重写父类方法
	 */
	@Override
	public User get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类方法
	 */
	@Override
	public Serializable save(User entity) {		
		//设置默认密码
		entity.setPassword(SecurityUtil.encrypt("111111"));
		return super.save(entity);
	}
	
	/**
	 * 重写父类方法
	 */
	@Override
	public void update(User entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类方法
	 */
	@Override
	public void deleteByIds(String... ids) {	
		if(ids.length > 0){
			String [] sqls = new String[ids.length];
			for(int i=0; i<ids.length; i++){
				sqls[i] = "update SYS_USER set is_delete = 'Y' where id = '"+ids[i]+"' ";
			}
			jdbcAssistant.batchUpdate(sqls);
		}
		//super.deleteByIds(ids);
	}

	@Override
	public boolean checkHasAccount(String account, String id) {
		String sql = "select count(1) from SYS_USER t where upper(t.account)='"+account.toUpperCase()+"' ";
		//如果id不为空，排除当前id的数据
		if(TextUtil.isNotEmpty(id)){
			sql += " and t.id != '"+id+"' ";		
		}
		int count = jdbcAssistant.queryAsInt(sql);
		if(count > 0) return true;
		return false;
	}

	@Override
	public byte[] getPhotoById(String id) {
		String sql = "select photo from SYS_USER where id = '"+id+"' ";		
		return jdbcAssistant.queryAsObject(sql, byte[].class);
	}

	@Override
	public void savePhoto(String id, String photoReal) throws Exception{
		File file = new File(photoReal);
		byte [] bytes = FileUtil.input2byte(new FileInputStream(file));
		String sql = "update SYS_USER set photo = ? where id = '"+id+"'";
		jdbcAssistant.update(sql, new Object[]{bytes});
	}

	


}
