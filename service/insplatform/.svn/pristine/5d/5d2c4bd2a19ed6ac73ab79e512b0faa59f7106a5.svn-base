package com.insplatform.module.osta.register.notice.repository.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.insframework.common.spring.jdbc.mapper.ValueMapper;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.osta.register.notice.model.OstaRegNotice;
import com.insplatform.module.osta.register.notice.repository.OstaRegNoticeRepository;


@Repository
public class OstaRegNoticeRepositoryImpl extends BaseRepositoryImpl<OstaRegNotice> implements OstaRegNoticeRepository{

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select t.id, t.title, t.content, t.remark, t.state, t.state statex," +
				" t.create_user_id, t.create_user_name, t.create_time, t.update_time" +
				" from px_osta_reg_notice t where 1=1";
//		Condition condition = this.getCondition(request,"title","state",
//				"createUserName","startCreateTime","endCreateTime");

		if (condition.containsKey("title")) {
			sql += " and t.title like ?";
			condition.put("title","%"+condition.get("title")+"%");
		}
		if (condition.containsKey("state")) {
			sql += " and t.state = ?";
		}
		if (condition.containsKey("createUserName")) {
			sql += " and t.create_user_name like ?";
			condition.put("createUserName","%"+condition.get("createUserName")+"%");
		}
		if (condition.containsKey("startCreateTime")) {
			sql += " and t.create_time >= to_date( ?, 'yyyy-mm-dd hh24:mi:ss')";
		}
		if (condition.containsKey("endCreateTime")) {
			sql += " and t.update_time -1 < to_date( ?,'yyyy-mm-dd hh24:mi:ss')";
		}
		
		sql += " order by t.update_time desc";
		
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray(),new ValueMapper() {
			
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				state(record);
				return RETURN_CODE.NEXT;
			}
		});
	}
	
	@Override
	public Map<String, Object> loadAllGridWrite(Condition condition) {
		String sql = "select t.id, t.title, t.content, t.remark, t.state, t.state statex," +
				" t.create_user_id, t.create_user_name, t.create_time, t.update_time" +
				" from px_osta_reg_notice t where t.state != 'A'";
//		Condition condition = this.getCondition(request,"title","state",
//				"createUserName","startCreateTime","endCreateTime");

		if (condition.containsKey("title")) {
			sql += " and t.title like ?";
			condition.put("title","%"+condition.get("title")+"%");
		}
		if (condition.containsKey("state")) {
			sql += " and t.state = ?";
		}
		if (condition.containsKey("createUserName")) {
			sql += " and t.create_user_name like ?";
			condition.put("createUserName","%"+condition.get("createUserName")+"%");
		}
		if (condition.containsKey("startCreateTime")) {
			sql += " and t.create_time >= to_date( ?, 'yyyy-mm-dd hh24:mi:ss')";
		}
		if (condition.containsKey("endCreateTime")) {
			sql += " and t.update_time -1 < to_date( ?,'yyyy-mm-dd hh24:mi:ss')";
		}
		
		sql += " order by t.update_time desc";
		
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray(),new ValueMapper() {
			
			@Override
			public RETURN_CODE map(Map<String, Object> record) throws Exception {
				state(record);
				return RETURN_CODE.NEXT;
			}
		});
	}
	
	private void state(Map<String, Object> record) {
		String state = record.get("state")+"";
		if ("A".equals(state)) {
			record.put("state", "草稿");
		}else if ("B".equals(state)) {
			record.put("state", "报名中");
		}else if ("C".equals(state)) {
			record.put("state", "报名结束");
		}
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_OSTA_REG_NOTICE t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_OSTA_REG_NOTICE t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public OstaRegNotice get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(OstaRegNotice entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(OstaRegNotice entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	@Override
	public int deleteByIdx(String id) {
		String sql = "delete px_osta_reg_notice where id = ?";
		return jdbcAssistant.update(sql,new Object[]{id});
	}
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}
	
	@Override
	public String updateState(String id, String state) {
		String sql = "update px_osta_reg_notice set state = ? where id = ?";
		return jdbcAssistant.update(sql, new Object[]{state,id})+"";
	}
	
	@Override
	public boolean beforeDeleteCheck(String id) {
		OstaRegNotice obj = super.get(id);
		return "A".equals(obj.getState());
	}
	
	@Override
	public String beforeUpdateStateCheck(String id, String state) {
		OstaRegNotice obj = super.get(id);
		String sql = "";
		Map<String, Object> map = null;
		
		if ("A".equals(obj.getState())) {
			sql = "select t.id from px_osta_reg_worktype_level t where t.notice_id = ?";
			map = jdbcAssistant.queryOne(sql, new Object[]{id});
			if (map==null) {
				return "noHasWorktype";
			}
		}
		
		if ("A".equals(state)) {
			sql = "select t.id from px_osta_reg_notice_write t where t.notice_id = ?";
			map = jdbcAssistant.queryOne(sql, new Object[]{id});
			if (map!=null) {
				return "hasChild";
			}
		}
		
		return null;
	}
	
}
