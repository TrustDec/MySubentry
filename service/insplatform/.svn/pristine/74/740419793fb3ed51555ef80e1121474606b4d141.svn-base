package com.insplatform.module.monthplan.controller;

import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import com.insframework.system.base.controller.BaseController;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;
import com.insplatform.module.monthplan.model.MonthPlan;
import com.insplatform.module.monthplan.service.MonthPlanService;

@Controller
@RequestMapping("/px/monthplan")
public class MonthPlanController extends BaseController{
	
	@Autowired
	private MonthPlanService monthPlanService;

	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGridByNeedApprove")
	public @ResponseBody Map<String, Object> loadAllGridByNeedApprove(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"year","month","title",
				"createUserName","state","startCreateTime","endCreateTime");
		return monthPlanService.loadAllGridByNeedApprove(condition);
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGrid")
	public @ResponseBody Map<String, Object> loadAllGrid(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request,"year","month","title",
				"createUserName","state","startCreateTime","endCreateTime");
		return monthPlanService.loadAllGrid(condition);
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllList")
	public @ResponseBody Map<String, Object> loadAllList(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return this.getMessager().success().data(monthPlanService.loadAllList(condition));
	}	
	
	
	/**
	 * 加载单条数据
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody Map<String, Object> load(@RequestParam("id") String id){		
		return this.getMessager().success().data(monthPlanService.load(id));		
	}
	
	/**
	 * 新增
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")	
	public @ResponseBody Map<String, Object> add(MonthPlan monthplan, HttpServletRequest request){
		CurrentUser user = this.getCurrentUser(request);
		monthplan.setState("A");
		monthplan.setCreateUserId(user.getId());
		monthplan.setCreateUserName(user.getName());
		Date date = new Date();
		monthplan.setCreateTime(date);
		monthplan.setUpdateTime(date);
		String msg = monthPlanService.save(monthplan).toString();
		return this.getMessager().success().put("msg", msg);
	}
	
	/**
	 * 编辑
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")	
	public @ResponseBody Map<String, Object> update(
		   @RequestParam("id") String id,
		   HttpServletRequest request){		
		MonthPlan monthplan = monthPlanService.get(id);
		this.bindObject(request, monthplan);
		monthplan.setUpdateTime(new Date());
		String msg = monthPlanService.updatex(monthplan);
		return this.getMessager().success().put("msg", msg);
	}
	
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")	
	public @ResponseBody Map<String, Object> delete(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		int noDel = monthPlanService.deleteMonthPlan(ids);
		return this.getMessager().success().put("noDel", noDel);
	}
	
	/**
	 * 发送审批
	 * @param request
	 * @return
	 */
	@RequestMapping("/sendApproval")	
	public @ResponseBody Map<String, Object> sendApproval(@RequestParam("id") String id, HttpServletRequest request){
		int result = monthPlanService.updateSendApproval(id);
		return this.getMessager().success().put("result", result);
	}
	
	/**
	 * 审批
	 * @param request
	 * @return
	 */
	@RequestMapping("/approval")	
	public @ResponseBody Map<String, Object> approval(@RequestParam("id") String id, @RequestParam("type") String type, HttpServletRequest request){
		int result = monthPlanService.updateApproval(id,type);
		return this.getMessager().success().put("result", result);
	}
	
	/**
	 * 批量修改状态
	 * @param request
	 * @return
	 */
	@RequestMapping("/batchApproval")	
	public @ResponseBody Map<String, Object> batchApproval(@RequestParam("type") String type, HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		int result = monthPlanService.updateBatchApproval(ids,type);
		return this.getMessager().success().put("result", result);
	}
	
	/**
	 * 批量发送审批
	 * @param request
	 * @return
	 */
	@RequestMapping("/batchSendApproval")
	public @ResponseBody Map<String, Object> batchSendApproval(@RequestParam("type") String type, HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		Map<String, Object> result = monthPlanService.updateBatchSendApproval(ids,type);
		return this.getMessager().success().putAllMap(result);
	}


	
}
