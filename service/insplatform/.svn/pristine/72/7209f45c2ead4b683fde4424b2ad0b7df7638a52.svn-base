package com.insplatform.module.classroom.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.stereotype.Repository;

import com.insframework.system.base.repository.impl.BaseRepositoryImpl;

import com.insframework.system.map.Condition;
import com.insplatform.module.classroom.model.ClassroomEquipment;
import com.insplatform.module.classroom.repository.ClassroomEquipmentRepository;

@Repository
public class ClassroomEquipmentRepositoryImpl extends
		BaseRepositoryImpl<ClassroomEquipment> implements
		ClassroomEquipmentRepository {

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {
		String sql = "select t.* from PX_CLASSROOM_EQUIPMENT t where 1=1 ";
		if (condition.containsKey("id")) {
			sql += " and t.CLASSROOM_ID = ? ";
		}
		return gridService.loadData(condition.getGridTransModel(), sql,
				condition.valueArray());
	}

	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {
		String sql = "select t.* from PX_CLASSROOM_EQUIPMENT t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {
		String sql = "select t.* from PX_CLASSROOM_EQUIPMENT t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[] { id });
	}

	@Override
	public void deleteByClassroomIds(String[] ids) {
		String[] sqls = new String[ids.length];
		for (int i = 0; i < ids.length; i++) {
			sqls[i] = "delete from PX_CLASSROOM_EQUIPMENT t where t.CLASSROOM_ID = '"
					+ ids[i] + "'";
		}
		jdbcAssistant.batchUpdate(sqls);
	}
	
	@Override
	public void deleteByEuqipIds(String[] ids) {
		String[] sqls = new String[ids.length];
		for (int i = 0; i < ids.length; i++) {
			sqls[i] = "delete from PX_CLASSROOM_EQUIPMENT t where t.ID = '"
					+ ids[i] + "'";
		}
		jdbcAssistant.batchUpdate(sqls);
	}

	/**
	 * 重写父类get方法
	 */
	@Override
	public ClassroomEquipment get(Serializable id) {
		return super.get(id);
	}

	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(ClassroomEquipment entity) {
		return super.save(entity);
	}

	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(ClassroomEquipment entity) {
		super.update(entity);
	}

	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {
		super.deleteById(id);
	}

	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {
		super.deleteByIds(ids);
	}

}
