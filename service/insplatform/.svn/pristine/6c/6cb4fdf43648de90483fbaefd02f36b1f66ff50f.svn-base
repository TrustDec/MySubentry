package com.insplatform.system.role.service.impl;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.context.App;
import com.insframework.system.map.Condition;
import com.insplatform.system.authz.repository.AuthzRepository;
import com.insplatform.system.role.RoleConstant;
import com.insplatform.system.role.model.Role;
import com.insplatform.system.role.repository.RoleRepository;
import com.insplatform.system.role.service.RoleService;

@Service
public class RoleServiceImpl extends BaseServiceImpl<Role> implements RoleService{
	
	@Autowired
	private RoleRepository roleRepository;
	
	@Autowired
	private AuthzRepository authzRepository;

	@Override
	public BaseRepository<Role> getRepository() {	
		return roleRepository;
	}
	
	@Override
	public List<Map<String, Object>> loadAll(Condition condition) {
		List<Map<String, Object>> list = roleRepository.loadByMgt(condition.getCurrentUser().getId());
		for(Map<String, Object> role : list){
			String allowAuthz = role.get("allowAuthz").toString();
			String id = role.get("id").toString();
			if(RoleConstant.SYS_ADMIN_ID.getValue().equals(id) 
				|| RoleConstant.ORG_ADMIN_ID.getValue().equals(id)
				|| RoleConstant.DEFAULT.getValue().equals(id)){
				role.put("icon", App.STATIC_PATH + "/image/icon/group_delete.png");
			}else{
				if("N".equals(allowAuthz)){
					role.put("icon", App.STATIC_PATH + "/image/icon/group_error.png");
				}else{
					role.put("icon", App.STATIC_PATH + "/image/icon/group.png");
				}
			}			
		}
		return list;
	}
	/**
	 * 重写父类get方法
	 */
	@Override
	public Role get(Serializable id) {		
		return roleRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(Role entity) {	
		return roleRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(Role entity) {		
		roleRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		roleRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		roleRepository.deleteByIds(ids);
	}

	@Override
	public boolean checkUserIsSysAdmin(String userId) {		
		return roleRepository.checkUserIsSysAdmin(userId);
	}

	@Override
	public void addRoleUser(String roleId, String... userIds) {
		roleRepository.addRoleUser(roleId, userIds);
	}

	@Override
	public void deleteRoleUser(String id, String... userIds) {
		roleRepository.deleteRoleUser(id, userIds);
	}

	@Override
	public void addRoleAuthz(String roleId, String... authzIds) {
		//先删除此角色所有权限
		authzRepository.deleteRoleAuthz(roleId);
		//后添加
		authzRepository.addRoleAuthz(roleId, authzIds);
	}

	@Override
	public void deleteRoleAuthz(String roleId, String... authzIds) {
		authzRepository.deleteRoleAuthz(roleId, authzIds);
	}

	@Override
	public boolean checkNameAndCode(String name, String code, String id) {		
		return roleRepository.checkNameAndCode(name, code, id);
	}

}
