package com.insplatform.module.bbs.question.service.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insframework.common.utils.TextUtil;
import com.insframework.common.utils.pager.Pager;
import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.map.Condition;
import com.insplatform.module.bbs.question.model.BbsQuestion;
import com.insplatform.module.bbs.question.repository.BbsQuestionRepository;
import com.insplatform.module.bbs.question.service.BbsQuestionService;
import com.insplatform.module.bbs.questionanswer.repository.BbsQuestionAnswerRepository;

@Service
public class BbsQuestionServiceImpl extends BaseServiceImpl<BbsQuestion>
		implements BbsQuestionService {

	@Autowired
	private BbsQuestionRepository bbsQuestionRepository;

	@Autowired
	private BbsQuestionAnswerRepository bbsQuestionAnswerRepository;

	@Override
	public BaseRepository<BbsQuestion> getRepository() {
		return bbsQuestionRepository;
	}

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {
		return bbsQuestionRepository.loadAllGrid(condition);
	}

	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {
		return bbsQuestionRepository.loadAllList(condition);
	}

	@Override
	public Map<String, Object> load(String id) {
		return bbsQuestionRepository.load(id);
	}

	/**
	 * 重写父类get方法
	 */
	@Override
	public BbsQuestion get(Serializable id) {
		return bbsQuestionRepository.get(id);
	}

	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(BbsQuestion entity) {
		return bbsQuestionRepository.save(entity);
	}

	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(BbsQuestion entity) {
		bbsQuestionRepository.update(entity);
	}

	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {
		bbsQuestionRepository.deleteById(id);
	}

	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {
		bbsQuestionRepository.deleteByIds(ids);
	}

	@Override
	public Map<String, Object> loadAllByTemplate(Condition condition) {
		/* 收集参数 */
		String pageString = condition.get("page") + "";
		if (TextUtil.isEmpty(pageString)) {
			pageString = "1";
		}
		int page = Integer.parseInt(pageString);

		Pager<Map<String, Object>> pager = new Pager<Map<String, Object>>(0,
				page, 20);
		bbsQuestionRepository.loadAllByTemplatePagerData(condition, pager);

		Map<String, Object> dataMap = pager.toMap();

		List<Map<String, Object>> list = pager.getData();
		List<Map<String, Object>> acceptAnswerList = null;
		Map<String, Object> tempMap = new HashMap<String, Object>();
		for (int i = 0; i < list.size(); i++) {
			tempMap = list.get(i);
			acceptAnswerList = bbsQuestionAnswerRepository
					.loadAcceptApply(tempMap.get("id") + "");
			tempMap.put("acceptAnswerList", acceptAnswerList);
		}

		String queryType = condition.get("queryType") + "";

		// 返回查询条件到页面让选中的查询条件高亮
		dataMap.put("queryType", queryType);

		// 查询全部url地址
		dataMap.put("queryAllUrl", "#bbs/question/list/all/1");
		// 等待回答url地址
		dataMap.put("waitAnswerUrl", "#bbs/question/list/waitAnswer/1");
		// 我的提问url地址
		dataMap.put("myQuestionUrl", "#bbs/question/list/myQuestion/1");
		// 我回答过的问题url地址
		dataMap.put("myAnswerUrl", "#bbs/question/list/myAnswer/1");
		// 我关注的问题url地址
		dataMap.put("myLoveUrl", "#bbs/question/list/myLove/1");

		String url = "#bbs/question/list/" + queryType + "/";
		// 设置上一页/下一页/首页/尾页url地址
		if (pager.isHasNextPage()) {
			dataMap.put("nextPageUrl", url + (page + 1));
		} else {
			dataMap.put("nextPageUrl", "javascript:;");
		}
		if (pager.isHasPreviousPage()) {
			dataMap.put("previousPageUrl", url + (page - 1));
		} else {
			dataMap.put("previousPageUrl", "javascript:;");
		}
		if (pager.isFirstPage()) {
			dataMap.put("firstPageUrl", "javascript:;");
		} else {
			dataMap.put("firstPageUrl", url + "1");
		}
		if (pager.isLastPage()) {
			dataMap.put("lastPageUrl", "javascript:;");
		} else {
			dataMap.put("lastPageUrl", url + pager.getPageCount());
		}

		// 设置导航页
		int[] navigatePageNumbers = pager.getNavigatePageNumbers();
		List<Map<String, Object>> navigatePage = new ArrayList<Map<String, Object>>();
		for (int i : navigatePageNumbers) {
			Map<String, Object> navigatePageItem = new HashMap<String, Object>();
			navigatePageItem.put("text", i);
			navigatePageItem.put("url", url + i);
			if (i == page) {
				navigatePageItem.put("active", "Y");
			} else {
				navigatePageItem.put("active", "N");
			}
			navigatePage.add(navigatePageItem);
		}
		dataMap.put("navigatePage", navigatePage);

		/**
		 * 添加本周前十热门问题
		 */
		List<Map<String, Object>> lastWeekHostQuestion = bbsQuestionRepository
				.getHotQuestionByLastWeek();
		dataMap.put("lastWeekHostQuestion", lastWeekHostQuestion);

		/**
		 * 添加本周回答雷锋榜，前10人
		 */
		List<Map<String, Object>> answerListSort = bbsQuestionAnswerRepository
				.loadAllByApplyNum();
		dataMap.put("answerListSort", answerListSort);

		return dataMap;
	}

	@Override
	public Map<String, Object> getQuetionInfo(Condition condition) {
		String id = condition.get("id") + "";
		Map<String, Object> bbsquestion = bbsQuestionRepository
				.getQuetionInfo(condition);
		List<Map<String, Object>> otherQuestionList = bbsQuestionRepository
				.getAuthorOtherQuestion(id, bbsquestion.get("createPersonId")
						+ "");
		List<Map<String, Object>> answerList = bbsQuestionAnswerRepository
				.loadAllByPid(id);
		List<Map<String, Object>> acceptAnswerList = bbsQuestionAnswerRepository
				.loadAcceptApply(id);
		bbsquestion.put("otherQuestionList", otherQuestionList);
		bbsquestion.put("answerList", answerList);
		bbsquestion.put("acceptAnswerList", acceptAnswerList);
		return bbsquestion;
	}

	@Override
	public Map<String, Object> loadAllListMobile(String type, String idx) {
		return bbsQuestionRepository.loadAllListMobile(type, idx);
	}

	@Override
	public List<Map<String, Object>> loadAllListInfoMobile(String userId,
			String id) {
		return bbsQuestionRepository.loadAllListInfoMobile(userId, id);
	}

	@Override
	public List<Map<String, Object>> loadAllCommentInfoMobile(String id) {
		return bbsQuestionRepository.loadAllCommentInfoMobile(id);
	}

	@Override
	public Map<String, Object> loadSearchListMobile(String index,
			String idx, String info) {
		return bbsQuestionRepository.loadSearchListMobile(index, idx, info);
	}

	@Override
	public void addQuestionMobile(String userId, String title, String comment) {
		bbsQuestionRepository.addQuestionMobile(userId, title, comment);
	}

	@Override
	public void addAnswerMobile(String userId, String id, String comment) {
		bbsQuestionRepository.addAnswerMobile(userId, id, comment);
	}

	@Override
	public void addAnswerHFMobile(String id, String userId, String comment) {
		bbsQuestionRepository.addAnswerHFMobile(id, userId, comment);
	}

	@Override
	public void changeHeartMobile(String userId, String type, String id) {
		bbsQuestionRepository.changeHeartMobile(userId, type, id);
	}

	@Override
	public Map<String, Object> loadAllIAskMobile(String type, String userId,
			String idx) {
		return bbsQuestionRepository.loadAllIAskMobile(type, userId, idx);
	}

}
