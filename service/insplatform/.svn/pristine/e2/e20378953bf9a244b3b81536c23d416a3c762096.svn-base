package com.insplatform.module.trainingaccount.controller;

import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import com.insframework.system.base.controller.BaseController;
import com.insframework.system.map.Condition;
import com.insplatform.module.trainingaccount.model.TrainingAccount;
import com.insplatform.module.trainingaccount.service.TrainingAccountService;

@Controller
@RequestMapping("/px/trainingaccount")
public class TrainingAccountController extends BaseController{
	
	@Autowired
	private TrainingAccountService trainingAccountService;
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllGrid")
	public @ResponseBody Map<String, Object> loadAllGrid(
			HttpServletRequest request, HttpServletResponse response){
		return trainingAccountService.loadAllGrid(this.getCondition(request, "pxAddress","createUserName","trainingProject","sponsor","pxYear","pxMonth"));
	}
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllList")
	public @ResponseBody Map<String, Object> loadAllList(
			HttpServletRequest request, HttpServletResponse response){
		Condition condition = this.getCondition(request);
		return this.getMessager().success().data(trainingAccountService.loadAllList(condition));
	}	
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAllCompanyGrid")
	public @ResponseBody Map<String, Object> loadAllCompanyGrid(
			HttpServletRequest request, HttpServletResponse response){
		return trainingAccountService.loadAllCompanyGrid(this.getCondition(request, "companyName","createUserName","trainingProject","sponsor","pxYear","pxMonth"));
	}
	
	/**
	 * 加载单条数据
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody Map<String, Object> load(@RequestParam("id") String id){		
		return this.getMessager().success().data(trainingAccountService.load(id));		
	}
	
	/**
	 * 新增
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")	
	public @ResponseBody Map<String, Object> add(TrainingAccount trainingaccount, HttpServletRequest request){
		trainingaccount.setCreateUserId(this.getCurrentUser(request).getId());
		trainingaccount.setCreateUserName(this.getCurrentUser(request).getName());
		Date date = new Date();
		trainingaccount.setCreateTime(date);
		trainingaccount.setUpdateTime(date);
		trainingAccountService.addWithCompanyName(trainingaccount);
		return this.getMessager().success();
	}
	
	/**
	 * 编辑
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")	
	public @ResponseBody Map<String, Object> update(
		   @RequestParam("id") String id,
		   HttpServletRequest request){		
		TrainingAccount trainingaccount = trainingAccountService.get(id);
		this.bindObject(request, trainingaccount);
		
		trainingaccount.setUpdateTime(new Date());
		
		trainingAccountService.update(trainingaccount);
		return this.getMessager().success();
	}
	
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")	
	public @ResponseBody Map<String, Object> delete(HttpServletRequest request){
		String [] ids = this.getSelectedItems(request);
		trainingAccountService.deleteByIds(ids);
		return this.getMessager().success();
	}

	/**
	 * 新增前检查
	 * @param request
	 * @return
	 */
	@RequestMapping("/beforeInsertCheck")
	public @ResponseBody Map<String, Object> beforeInsertCheck(HttpServletRequest request){
		String year = request.getParameter("year");
		String month = request.getParameter("month");
		String id = getCurrentUser(request).getId();
		boolean has = trainingAccountService.beforeInsertCheck(id,year, month);
		return this.getMessager().success().put("has", has);
	}
}
