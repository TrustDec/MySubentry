package com.insplatform.system.organization.controller;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import com.insframework.system.base.controller.BaseController;
import com.insplatform.system.organization.model.Organization;
import com.insplatform.system.organization.service.OrganizationService;
import com.insplatform.system.user.model.User;

@Controller
@RequestMapping("/system/organization")
public class OrganizationController extends BaseController{
	
	@Autowired
	private OrganizationService organizationService;
	
	/**
	 * 加载数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/loadAll")
	public @ResponseBody Map<String, Object> loadAll(
			HttpServletRequest request, HttpServletResponse response){		
		return organizationService.loadAll(request, this.getCondition(request));
	}
	
	/**
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/load")
	public @ResponseBody Map<String, Object> load(@RequestParam("id") String id){		
		return this.getMessager().success().data(organizationService.get(id));		
	}
	
	/**
	 * 新增
	 * @param dict
	 * @return
	 */
	@RequestMapping("/add")	
	public @ResponseBody Map<String, Object> add(Organization organization, 
			@RequestParam(value="companyAdmin", required=false) String companyAdmin){
		organizationService.save(organization, companyAdmin);
		return this.getMessager().success();
	}
	
	/**
	 * 编辑
	 * @param dict
	 * @return
	 */
	@RequestMapping("/update")	
	public @ResponseBody Map<String, Object> update(
		   @RequestParam("id") String id, @RequestParam(value="companyAdmin", required=false) String companyAdmin,
		   HttpServletRequest request){		
		Organization organization = organizationService.get(id);
		this.bindObject(request, organization);
		organizationService.update(organization, companyAdmin);
		return this.getMessager().success();
	}
	
	/**
	 * 删除
	 * @param request
	 * @return
	 */
	@RequestMapping("/delete")	
	public @ResponseBody Map<String, Object> delete(@RequestParam("id") String id){		
		organizationService.deleteById(id);	
		return this.getMessager().success();
	}
	
	/**
	 * 获取机构管理员
	 * @param orgId
	 */
	@RequestMapping("/loadOrgCompanyAdmin")	
	public @ResponseBody Map<String, Object> loadOrgCompanyAdmin(@RequestParam("id") String id){
		User user = organizationService.loadOrgCompanyAdmin(id);
		return this.getMessager().success().put("user", user);
	}
	
	/**
	 * 删除机构下的用户
	 * @param request
	 * @return
	 */
	@RequestMapping("/deleteOrgUser")	
	public @ResponseBody Map<String, Object> deleteOrgUser(HttpServletRequest request){
		String id = request.getParameter("id");
		String[] userIds = this.getSelectedItems(request);
		organizationService.deleteOrgUser(id, userIds);
		return this.getMessager().success();
	}
	
	/**
	 * 添加机构下的用户
	 * @param request
	 * @return
	 */
	@RequestMapping("/addOrgUser")	
	public @ResponseBody Map<String, Object> addOrgUser(HttpServletRequest request){
		String id = request.getParameter("id");
		String[] userIds = this.getSelectedItems(request);
		organizationService.addOrgUser(id, userIds);
		return this.getMessager().success();
	}

	
}
