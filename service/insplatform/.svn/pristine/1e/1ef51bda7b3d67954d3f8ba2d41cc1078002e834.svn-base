package com.insplatform.module.bbs.question.repository.impl;

import java.io.Serializable;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.insframework.common.utils.TextUtil;
import com.insframework.common.utils.pager.Pager;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.curruser.CurrentUser;
import com.insframework.system.map.Condition;
import com.insplatform.module.bbs.question.model.BbsQuestion;
import com.insplatform.module.bbs.question.repository.BbsQuestionRepository;

@Repository
public class BbsQuestionRepositoryImpl extends BaseRepositoryImpl<BbsQuestion>
		implements BbsQuestionRepository {

	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {
		String sql = "select t.* from PX_BBS_QUESTION t ";
		return gridService.loadData(condition.getGridTransModel(), sql,
				condition.valueArray());
	}

	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {
		String sql = "select t.* from PX_BBS_QUESTION t";
		return jdbcAssistant.query(sql, condition.valueArray());
	}

	@Override
	public Map<String, Object> load(String id) {
		String sql = "select t.* from PX_BBS_QUESTION t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[] { id });
	}

	/**
	 * 重写父类get方法
	 */
	@Override
	public BbsQuestion get(Serializable id) {
		return super.get(id);
	}

	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(BbsQuestion entity) {
		return super.save(entity);
	}

	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(BbsQuestion entity) {
		super.update(entity);
	}

	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {
		super.deleteById(id);
	}

	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {
		super.deleteByIds(ids);
	}

	@Override
	public Pager<Map<String, Object>> loadAllByTemplatePagerData(
			Condition condition, Pager<Map<String, Object>> pager) {
		CurrentUser user = condition.getCurrentUser();
		String sql = "select t.id, t.title, t.classify, t.create_person_id, "
				+ " t.create_person_name, t.create_time, t.content,"
				+ " (select count(1) from px_bbs_question_answer qa where qa.pid = t.id) answernum,"
				+ " (select count(1) from px_bbs_question_mylove qul "
				+ " 		where qul.question_id = t.id and qul.create_person_id = '"
				+ user.getId() + "' ) isnotfollow"
				+ " from px_bbs_question t where 1=1 ";

		String queryType = condition.get("queryType") + "";
		if ("waitAnswer".equals(queryType)) {
			sql += " and t.id not in (select qa.pid from  px_bbs_question_answer qa) ";
		} else if ("myQuestion".equals(queryType)) {
			sql += " and t.create_person_id = '" + user.getId() + "'";
		} else if ("myAnswer".equals(queryType)) {
			sql += " and t.id in (select qa.pid from  px_bbs_question_answer qa where qa.answer_person_id = '"
					+ user.getId() + "')";
		} else if ("myLove".equals(queryType)) {
			sql += " and t.id in (select qml.question_id from px_bbs_question_mylove qml where qml.create_person_id = '"
					+ user.getId() + "')";
		} else {
			queryType = "all";
		}

		sql += "order by t.create_time desc";

		return jdbcAssistant.queryAsPager(sql, pager);
	}

	@Override
	public List<Map<String, Object>> getHotQuestionByLastWeek() {
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Calendar c = Calendar.getInstance();
		String currentTime = format.format(c.getTime());
		c.add(Calendar.WEEK_OF_MONTH, -1);
		String prevWeekCurrentTime = format.format(c.getTime());
		String sql = "select * from "
				+ " (select t.*,(select count(qa.id) from px_bbs_question_answer qa where qa.pid = t.id) answernum"
				+ " from px_bbs_question t" + " where t.id in ("
				+ " select qa.pid from px_bbs_question_answer qa" +

				" where qa.create_time <= to_date('" + currentTime
				+ "','yyyy-mm-dd hh24:mi:ss') "
				+ " and qa.create_time >= to_date('" + prevWeekCurrentTime
				+ "','yyyy-mm-dd hh24:mi:ss')" + " ) and rownum <10 )"
				+ " order by answernum desc";
		return jdbcAssistant.query(sql);
	}

	@Override
	public Map<String, Object> getQuetionInfo(Condition condition) {
		CurrentUser user = condition.getCurrentUser();
		String sql = "select t.id, t.title, t.classify, t.create_person_id, "
				+ " t.create_person_name, t.create_time, t.content,"
				+ " (select count(1) from px_bbs_question_mylove qul "
				+ " 		where qul.question_id = t.id and qul.create_person_id = '"
				+ user.getId() + "' ) isnotfollow,"
				+ " (select count(1) from px_bbs_question_mylove qul "
				+ " 		where qul.question_id = t.id) isnotfollowNum"
				+ " from px_bbs_question t where t.id = ? ";

		return jdbcAssistant
				.queryOne(sql, new Object[] { condition.get("id") });
	}

	@Override
	public List<Map<String, Object>> getAuthorOtherQuestion(String id,
			String createPersonId) {
		String sql = "select (select count(qa.id) from px_bbs_question_answer qa where qa.pid = t.id) snswernum ,t.id, t.title, t.classify, t.create_person_id, t.create_person_name, "
				+ " t.create_time, t.content from PX_BBS_QUESTION t"
				+ " where t.id != ? and t.create_person_id  = ? and rownum <10"
				+ " order by t.create_time desc";
		return jdbcAssistant.query(sql, new Object[] { id, createPersonId });
	}

	@Override
	public Map<String, Object> loadAllListMobile(String type,String idx) {
		Pager<Map<String, Object>> pager = new Pager<Map<String, Object>>(0, Integer.parseInt(idx),10);
		String sql = "select t.id as qid ,t.title,t.create_person_name,t.create_person_id,t.create_time as qcreate_time,t.content ," +
				"(select count(pp.id) from px_bbs_question_answer pp where pp.pid = t.id) as num,p.* from px_bbs_question t " +
				"left join px_bbs_question_answer p on t.id = p.pid and p.isnot_accept = 'Y'";

		if ("wait".equals(type)) {
			sql = "select t.id as qid ,t.title,t.create_person_name,t.create_person_id,t.create_time as qcreate_time,t.content," +
				"(select count(pp.id) from px_bbs_question_answer pp where pp.pid = t.id) as num from px_bbs_question t " +
				"where id not in (select p.pid from px_bbs_question_answer p)";
		}
		sql += "order by t.create_time desc";
		if(Integer.parseInt(jdbcAssistant.queryAsPager(sql, pager).getPageCount() + "") < Integer.parseInt(idx + ""))
		{
			return new HashMap<String, Object>();
		}
		else{
			return jdbcAssistant.queryAsPager(sql, pager).toMap();
		}
	}

	@Override
	public List<Map<String, Object>> loadAllListInfoMobile(String userId,String id) {
		String sql = "";
//		Pager<Map<String, Object>> pager = new Pager<Map<String, Object>>(0, 1,10);
		sql = "select count(*) as item from px_bbs_question_answer where pid = '"+ id + "'";
		Map<String, Object> map = jdbcAssistant.queryOne(sql);
		if (Integer.valueOf(map.get("ITEM") + "") == 0) {
			sql = "select t.id as qid ,t.title,t.create_person_name,t.create_time,t.content from px_bbs_question t where t.id = '"
					+ id + "'";
		} else {
			sql = "select t.id as qid ,t.title,t.create_person_name,t.create_time as q_create_time,t.content ,p.* from px_bbs_question t,px_bbs_question_answer p where t.id = '"
					+ id + "' and t.id = p.pid order by p.isnot_accept, p.create_time desc";
		}
//		Map<String, Object> mapAllTemp = jdbcAssistant.queryAsPager(sql, pager).toMap();
		List<Map<String, Object>> mapAllTemp = jdbcAssistant.query(sql);
//		List<Map<String, Object>> mapAll = (List<Map<String, Object>>) mapAllTemp.get("data");
		String sqlSelectHeart = "select count(*) as num from px_bbs_question_mylove where question_id = '"
				+ id + "' and create_person_id = '" + userId + "'";
		Map<String, Object> mapNum = jdbcAssistant.queryOne(sqlSelectHeart);
		if (Integer.parseInt(mapNum.get("num") + "") == 0) {
			mapAllTemp.get(0).put("hasHeart", false);
		} else if (Integer.parseInt(mapNum.get("num") + "") == 1) {
			mapAllTemp.get(0).put("hasHeart", true);
		}
		return mapAllTemp;
	}

	@Override
	public List<Map<String, Object>> loadAllCommentInfoMobile(String id) {
		String sql = "select t.id as aid ,t.content , t.create_person_name ,t.create_person_id , t.create_time from px_bbs_question_answer_hf t where t.question_answer_id = '"
				+ id + "'";
		sql += "order by t.create_time desc";
		return jdbcAssistant.query(sql);
	}

	@Override
	public Map<String, Object> loadSearchListMobile(String index, String idx, String info) {
		String sql = "";
		Pager<Map<String, Object>> pager = new Pager<Map<String,Object>>(0, Integer.parseInt(index), 20);
		if("0".equals(idx))
		{
//			sql= "select b.* ,(select count(pp.id) from px_bbs_question_answer pp where pp.pid = b.qid) as num," +
//				 "p.* from (select t.id as qid ,t.title,t.create_person_name,t.create_person_id,t.create_time as qcreate_time," +
//				 "t.content from px_bbs_question t where t.title like '%" + info + "%') b left join px_bbs_question_answer p " +
//				 "on b.qid = p.pid and p.isnot_accept = 'Y'order by b.qcreate_time desc";
			sql = "select t.id ,t.title from px_bbs_question t where t.title like '%" + info + "%'";
		}else{
			sql= "select t.id ,t.article_title as title from px_bbs_article t where t.article_title like '%" + info + "%'";
		}
		sql += " order by t.create_time desc";
		return jdbcAssistant.queryAsPager(sql, pager).toMap();
	}

	@Override
	public void addQuestionMobile(String title, String id, String comment) {
		String sql = "insert into px_bbs_question values('"+TextUtil.getUUID()+"',"
				+ "'"+ title+ "','',(select account from sys_user where id = '" + id + "'),"
				+ "(select name from sys_user where id = '" + id+ "'),"+ "(to_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss')," +
				"'yyyy-mm-dd hh24:mi:ss'))," + "'" + comment + "','')";
		jdbcAssistant.update(sql);
	}

	@Override
	public void addAnswerMobile(String userId, String id, String comment) {
		String sql = "insert into px_bbs_question_answer values('"+TextUtil.getUUID()+"','"
				+ comment+ "','"+ id+ "',"+ "(select account from sys_user where id = '"+ userId
				+ "'),"+ "(select name from sys_user where id = '"+ userId+ "'),"
				+ "(to_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss')),'')";
		jdbcAssistant.update(sql);
	}

	@Override
	public void addAnswerHFMobile(String id, String userId, String comment) {
		String sql = "insert into px_bbs_question_answer_hf values"
				+ "('"+TextUtil.getUUID()+"','"+ id+ "',"+ "'"+ comment+ "',(select account from sys_user where id = '"
				+ userId+ "'),"+ "(select name from sys_user where id = '"+ userId
				+ "'),"+ "(to_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss')),'','')";
		jdbcAssistant.update(sql);
	}

	@Override
	public void changeHeartMobile(String userId, String type, String id) {
		String sql = "";
		if ("true".equals(type)) {
			sql = "delete from px_bbs_question_mylove where question_id = '"+ id
					+ "' and create_person_id = (select account from sys_user where id = '"
					+ userId + "')";
		} else if ("false".equals(type)) {
			sql = "insert into px_bbs_question_mylove values('"+TextUtil.getUUID()+"','"
					+ id+ "',(select account from sys_user where id = '"
					+ userId+ "'),(select name from sys_user where id = '"+ userId + "'))";
		}
		jdbcAssistant.update(sql);
	}

	@Override
	public Map<String, Object> loadAllIAskMobile(String type,String userId,String idx) {
		Pager<Map<String, Object>> pager = new Pager<Map<String, Object>>(0, Integer.parseInt(idx),10);
		String sql = "";
		if ("iAsk".equals(type)) {
			sql = "select z.* ,p.* from (select t.id as qid ,t.title,t.create_person_name,t.create_person_id,t.create_time as q_create_time,t.content," +
					"(select count(pp.id) from px_bbs_question_answer pp where pp.pid = t.id) as num from px_bbs_question t where t.create_person_id  = '"
					+ userId+ "') z left join px_bbs_question_answer p on z.qid = p.pid and p.isnot_accept = 'Y' ";
		} else if ("iAnswer".equals(type)) {
			sql = "select z.* ,p.* from (select t.id as qid ,t.title,t.create_person_name,t.create_person_id,t.create_time as q_create_time,t.content," +
					"(select count(pp.id) from px_bbs_question_answer pp where pp.pid = t.id) as num from px_bbs_question t where t.id in (select pid from px_bbs_question_answer where answer_person_id = '"
					+ userId+ "' )) z left join px_bbs_question_answer p on z.qid = p.pid and p.isnot_accept = 'Y' ";
		} else if ("iLike".equals(type)) {
			sql = "select z.* ,p.* from (select t.id as qid ,t.title,t.create_person_name,t.create_person_id,t.create_time as q_create_time,t.content," +
					"(select count(pp.id) from px_bbs_question_answer pp where pp.pid = t.id) as num from px_bbs_question t where t.id in (select question_id from px_bbs_question_mylove where create_person_id = '"
					+ userId+ "' )) z left join px_bbs_question_answer p on z.qid = p.pid and p.isnot_accept = 'Y' ";
		}
		sql += "order by z.q_create_time desc";
		return jdbcAssistant.queryAsPager(sql, pager).toMap();
	}

}
