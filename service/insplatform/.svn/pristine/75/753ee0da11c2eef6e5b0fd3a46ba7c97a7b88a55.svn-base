package com.insplatform.module.classsummarize.service.impl;

import java.io.File;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.insframework.common.utils.FileUtil;
import com.insframework.component.service.file.UploadService;
import com.insframework.system.base.repository.BaseRepository;
import com.insframework.system.base.service.impl.BaseServiceImpl;
import com.insframework.system.context.App;
import com.insframework.system.map.Condition;
import com.insplatform.module.classsummarize.model.ClassSummarizeFolderAtt;
import com.insplatform.module.classsummarize.repository.ClassSummarizeFolderAttRepository;
import com.insplatform.module.classsummarize.service.ClassSummarizeFolderAttService;

@Service
public class ClassSummarizeFolderAttServiceImpl extends BaseServiceImpl<ClassSummarizeFolderAtt> implements ClassSummarizeFolderAttService{
	
	@Autowired
	private ClassSummarizeFolderAttRepository classSummarizeFolderAttRepository;
	
	@Autowired
	private UploadService uploadService;

	@Override
	public BaseRepository<ClassSummarizeFolderAtt> getRepository() {		
		return classSummarizeFolderAttRepository;
	}
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {
		String pid = "noPid";
		if (condition.containsKey("pid")) {
			pid = condition.get("pid").toString();
			condition.remove("pid");
		}
		return classSummarizeFolderAttRepository.loadAllGrid(pid, condition);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {			
		return classSummarizeFolderAttRepository.loadAllList(condition);
	}
	
	@Override
	public Map<String, Object> load(String id) {			
		return classSummarizeFolderAttRepository.load(id);
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public ClassSummarizeFolderAtt get(Serializable id) {		
		return classSummarizeFolderAttRepository.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(ClassSummarizeFolderAtt entity) {	
		return classSummarizeFolderAttRepository.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(ClassSummarizeFolderAtt entity) {		
		classSummarizeFolderAttRepository.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		classSummarizeFolderAttRepository.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		classSummarizeFolderAttRepository.deleteByIds(ids);
	}
	
	@Override
	public String saveAndFiles(ClassSummarizeFolderAtt obj,
			HttpServletRequest request) {
		String id = classSummarizeFolderAttRepository.save(obj).toString();
		obj.setId(id);
		MultipartFile file = uploadService.getMultipartFile(request,"attachment");
		String basePath = App.FILE_SYS + File.separatorChar + "attachmentclassfolder";
		String baseUrl = App.FILE_SYS_URL + "/" + "attachmentclassfolder";
		obj = this.saveFile(obj, file, basePath, baseUrl, true);
		obj.setOldFileName(file.getOriginalFilename());
		classSummarizeFolderAttRepository.update(obj);
		return id;
	}
	
	/**
	 * 保存上传文件
	 * @param ClassSummarize
	 * @param file				文件
	 * @param basePath			基础路径
	 * @param baseUrl			基础相对url
	 * @param useTimeDir		是否创建时间目录
	 * @return
	 * @throws Exception
	 */
	private ClassSummarizeFolderAtt saveFile(ClassSummarizeFolderAtt obj, MultipartFile file, String basePath, String baseUrl, boolean useTimeDir){
		
		String fileName = FileUtil.getName(file.getOriginalFilename());
		String path = "";
		String url = "";
		try{
			if(useTimeDir){
				SimpleDateFormat formater = new SimpleDateFormat("yyyyMMdd");
				String dir = formater.format(new Date());
				path = basePath + File.separatorChar + dir + File.separatorChar + fileName;
				url = baseUrl + "/" + dir + "/" +  fileName;	
				FileUtil.mkDirs(basePath + File.separator + dir);
			}else{
				path = basePath + File.separatorChar + fileName;
				url = baseUrl + "/" + fileName;	
				FileUtil.mkDirs(basePath);
			}		
			this.saveMultipartFile(file, path);
		}catch(Exception ex){
			ex.printStackTrace();
			return null;
		}
		obj.setPath(path);
		obj.setUrl(url);
		obj.setNewFileName(fileName);
		return obj;
		
	}
	
	
	/**
	 * 保存上传文件
	 * @param file
	 * @param path
	 * @throws Exception
	 */
	private void saveMultipartFile(MultipartFile file, String path) throws Exception{
		file.transferTo(new File(path));
	}


}
