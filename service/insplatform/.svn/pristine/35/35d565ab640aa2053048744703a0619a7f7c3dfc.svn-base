package com.insplatform.module.subcompanymontharrange.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insplatform.module.subcompanymontharrange.model.SubcompanyMonthSbook;
import com.insplatform.module.subcompanymontharrange.repository.SubcompanyMonthSbookRepository;
import com.insplatform.system.user.service.UserBizDataAuthzService;

import com.insframework.system.map.Condition;


@Repository
public class SubcompanyMonthSbookRepositoryImpl extends BaseRepositoryImpl<SubcompanyMonthSbook> implements SubcompanyMonthSbookRepository{

	@Autowired
	private UserBizDataAuthzService userBizDataAuthzService;
	
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {
		String sql = " select id,arrange_id,pxcompany,pxproject,pxcontent,pxnum,pxtype,pxday,pxclassroom,pxteacher,pxmoney,remark,pxyear,pxmonth, "+
                " to_char(bg_time,'yyyy-MM-dd') bg_time,to_char(ed_time,'yyyy-MM-dd') ed_time  " +
				" from PX_SUBCOMPANY_MONTH_SBOOK  where 1=1 ";
		if (condition.containsKey("pxcontent")) {
			sql += " and pxcontent like ? ";
			condition.put("pxcontent", "%" + condition.get("pxcontent") + "%");
		}
		if (condition.containsKey("pxclassroom")) {
			sql += " and pxclassroom like ? ";
			condition.put("pxclassroom", "%" + condition.get("pxclassroom") + "%");
		}
		sql = userBizDataAuthzService.buildUserBizDataAuthzUserSql(sql, "create_user_id", condition.getCurrentUser());
	    
		sql +=" order by pxyear desc,pxmonth desc ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_SUBCOMPANY_MONTH_SBOOK t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = " select id,arrange_id,pxcompany,pxproject,pxcontent,pxnum,pxtype,pxday,pxclassroom,pxteacher, " +
				     " pxmoney,remark,pxyear,pxmonth, " +
                     " to_char(bg_time,'yyyy-MM-dd') bg_time,to_char(ed_time,'yyyy-MM-dd') ed_time " +
                     " from PX_SUBCOMPANY_MONTH_SBOOK  where id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	@Override
	public Map<String, Object> loadArrangeGrid(Condition condition) {
		String sql = " select a.id,a.pxyear,a.pxmonth,a.pxproject,a.pxproject_id,a.pxnum, " +
				" to_char(a.bg_time,'yyyy-MM-dd') bg_time,to_char(a.ed_time,'yyyy-MM-dd') ed_time,a.pxclassroom,a.remark " +
				" from px_subcompany_month_arrange a where 1=1 " +
				" and a.id not in ( select b.arrange_id from PX_SUBCOMPANY_MONTH_SBOOK b where b.arrange_id=a.id) " +
		        " and a.approval = '1' ";
		if (condition.containsKey("pxproject")) {
			sql += " and a.pxproject like ? ";
			condition.put("pxproject", "%" + condition.get("pxproject") + "%");
		}
		if (condition.containsKey("pxclassroom")) {
			sql += " and a.pxclassroom like ? ";
			condition.put("pxclassroom", "%" + condition.get("pxclassroom")
					+ "%");
		}
		sql += " order by a.pxyear desc ,a.pxmonth desc ";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public SubcompanyMonthSbook get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(SubcompanyMonthSbook entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(SubcompanyMonthSbook entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}
	
}
