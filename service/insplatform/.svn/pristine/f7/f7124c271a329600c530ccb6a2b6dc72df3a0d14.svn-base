package com.insplatform.module.trainingimplement.repository.impl;

import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.web.multipart.MultipartFile;

import com.insframework.common.utils.TextUtil;
import com.insframework.component.service.file.DownloadService;
import com.insframework.component.service.file.UploadService;
import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.context.App;
import com.insframework.system.map.Condition;
import com.insplatform.module.doc.model.Doc;
import com.insplatform.module.doc.service.DocService;
import com.insplatform.module.trainingimplement.model.TrainingCourseware;
import com.insplatform.module.trainingimplement.repository.TrainingCoursewareRepository;
import com.insplatform.module.video.model.Video;
import com.insplatform.module.video.service.VideoService;


@Repository
public class TrainingCoursewareRepositoryImpl extends BaseRepositoryImpl<TrainingCourseware> implements TrainingCoursewareRepository{

	@Autowired
	private UploadService uploadService;
	
	@Autowired
	private VideoService videoService;
	
	@Autowired
	private DocService docService;
	
	@Autowired
	private DownloadService downloadService;
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select a.*,k.name as kpoint_name from ((select t.name, t.id, t.difficulty, " +
				"t.kpoint_id,t.original_name,t.remark, t.create_time, t.create_user_name, t.update_time " +
				"from px_doc t where t.id in (select release_id from px_training_courseware where " +
				"training_scheme_id = '" + condition.get("id") + "' )) union all (select t.name, t.id, " +
				"t.difficulty, t.kpoint_id,t.original_name,t.remark, t.create_time, t.create_user_name, " +
				"t.update_time from px_video t where t.id in (select release_id from px_training_courseware " +
				"where training_scheme_id = '" + condition.get("id") + "' ))) a  left join PX_KPOINT k on " +
				"a.kpoint_id = k.id order by a.update_time desc";
		return gridService.loadData(condition.getGridTransModel(), sql);
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {	
		String sql = "select t.* from PX_TRAINING_COURSEWARE t ";
		return jdbcAssistant.query(sql, condition.valueArray());
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_TRAINING_COURSEWARE t where t.release_id = ? ";
		Map<String, Object> map = jdbcAssistant.queryOne(sql, new Object[]{id});
		if("DOC".equals(map.get("type")))
		{
			return docService.load(id);
		}
		else
		{
			return videoService.load(id);
		}
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public TrainingCourseware get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(TrainingCourseware entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(TrainingCourseware entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		String[] sql = new String[ids.length];
		for (int i = 0 ; i < ids.length ; i++) {
			sql[i] = "delete from px_training_courseware where release_id = '" + ids[i] + "'";
		}
		jdbcAssistant.batchUpdate(sql);
	}

	@Override
	public Serializable save(TrainingCourseware trainingcourseware,
			HttpServletRequest request) {
		
		MultipartFile file = uploadService.getMultipartFile(request, "file");
		String type = file.getOriginalFilename();
		type = type.substring(type.lastIndexOf('.') + 1, type.length());
		
		String id = "";
		String sql= "";
		if("mp4".equals(type) || "flv".equals(type))
		{
			Video video = new Video();
			video.setCreateTime(trainingcourseware.getCreateTime());
			video.setCreateUserId(trainingcourseware.getCreateUserId());
			video.setCreateUserName(trainingcourseware.getCreateUserName());
			video.setDifficulty(trainingcourseware.getDifficulty());
			video.setKpointId(trainingcourseware.getKpointId());
			video.setName(trainingcourseware.getName());
			video.setUpdateTime(trainingcourseware.getUpdateTime());
			video.setRemark(trainingcourseware.getRemark());
			id = videoService.save(video, request).toString();
			sql = "insert into PX_TRAINING_COURSEWARE values('"+TextUtil.getUUID()+"','" + trainingcourseware.getTrainingSchemeId() + "','" + id + "','VIDEO')";
			jdbcAssistant.update(sql);
		}
		else
		{
			Doc doc = new Doc();
			doc.setCreateTime(trainingcourseware.getCreateTime());
			doc.setCreateUserId(trainingcourseware.getCreateUserId());
			doc.setCreateUserName(trainingcourseware.getCreateUserName());
			doc.setDifficulty(trainingcourseware.getDifficulty());
			doc.setKpointId(trainingcourseware.getKpointId());
			doc.setName(trainingcourseware.getName());
			doc.setUpdateTime(trainingcourseware.getUpdateTime());
			doc.setRemark(trainingcourseware.getRemark());
			id = docService.save(doc, request).toString();
			sql = "insert into PX_TRAINING_COURSEWARE values('"+TextUtil.getUUID()+"','" + trainingcourseware.getTrainingSchemeId() + "','" + id + "','DOC')";
			jdbcAssistant.update(sql);
		}
		
		sql = "select id from PX_TRAINING_COURSEWARE where training_scheme_id = '" + trainingcourseware.getTrainingSchemeId() + "' and release_id = '" + id + "'";
		return (Serializable)jdbcAssistant.queryOne(sql);
	}


	@Override
	public void update(String id,TrainingCourseware trainingCourseware,
			HttpServletRequest request) {
		String sql = "select t.* from PX_TRAINING_COURSEWARE t where t.release_id = '" + id + "'";
		Map<String, Object> map = jdbcAssistant.queryOne(sql);
		
		if("DOC".equals(map.get("type")))
		{
			Doc doc = docService.get(id);
			doc.setDifficulty(trainingCourseware.getDifficulty());
			doc.setKpointId(trainingCourseware.getKpointId());
			doc.setName(trainingCourseware.getName());
			doc.setRemark(trainingCourseware.getRemark());
			doc.setUpdateTime(new Date());
			docService.update(doc, request);
		}
		else
		{
			Video video = videoService.get(id);
			video.setDifficulty(trainingCourseware.getDifficulty());
			video.setKpointId(trainingCourseware.getKpointId());
			video.setName(trainingCourseware.getName());
			video.setRemark(trainingCourseware.getRemark());
			video.setUpdateTime(new Date());
			videoService.update(video, request);
		}
		
//		MultipartFile file = uploadService.getMultipartFile(request, "file");
//		String type = file.getOriginalFilename();
//		type = type.substring(type.lastIndexOf('.') + 1, type.length());
//		if("mp4".equals(type) || "flv".equals(type))
//		{
//			Video video = new Video();
//			video.setCreateTime(trainingcourseware.getCreateTime());
//			video.setCreateUserId(trainingcourseware.getCreateUserId());
//			video.setCreateUserName(trainingcourseware.getCreateUserName());
//			video.setDifficulty(trainingcourseware.getDifficulty());
//			video.setKpointId(trainingcourseware.getKpointId());
//			video.setName(trainingcourseware.getName());
//			video.setUpdateTime(trainingcourseware.getUpdateTime());
//			video.setRemark(trainingcourseware.getRemark());
//			videoService.update(video, request);
//		}
//		else
//		{
//			Doc doc = new Doc();
//			doc.setCreateTime(trainingcourseware.getCreateTime());
//			doc.setCreateUserId(trainingcourseware.getCreateUserId());
//			doc.setCreateUserName(trainingcourseware.getCreateUserName());
//			doc.setDifficulty(trainingcourseware.getDifficulty());
//			doc.setKpointId(trainingcourseware.getKpointId());
//			doc.setName(trainingcourseware.getName());
//			doc.setUpdateTime(trainingcourseware.getUpdateTime());
//			doc.setRemark(trainingcourseware.getRemark());
//			docService.update(doc, request);
//		}
	}

	@Override
	public void downloadAttachment(String id, HttpServletRequest request,
			HttpServletResponse response) {
		
		String sql = "select type from PX_TRAINING_COURSEWARE where release_id = '" + id + "'";
		Map<String, Object> map = jdbcAssistant.queryOne(sql);
		
		if("DOC".equals(map.get("type")))
		{
			Doc doc = docService.get(id);
			String url = doc.getDocOriginal();
			String path = App.FILE_SYS;
			path += url.replace(App.FILE_SYS_URL, "");
			downloadService.downloadFile(path, doc.getOriginalName(), response);
		}
		
		if("VIDEO".equals(map.get("type")))
		{
			Video video = videoService.get(id);
			String url = video.getVideo();
			String path = App.FILE_SYS;
			path += url.replace(App.FILE_SYS_URL, "");
			downloadService.downloadFile(path, video.getOriginalName(), response);
		}

	}
	
}
