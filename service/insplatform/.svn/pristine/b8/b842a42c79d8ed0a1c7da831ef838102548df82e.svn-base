package com.insplatform.module.yeardemand.repository.impl;

import java.io.Serializable;
import java.util.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.insframework.system.base.repository.impl.BaseRepositoryImpl;
import com.insframework.system.curruser.CurrentUser;
import com.insplatform.module.yeardemand.model.YearDemandStatistics;
import com.insplatform.module.yeardemand.repository.YearDemandStatisticsRepository;
import com.insplatform.system.user.service.UserBizDataAuthzService;

import com.insframework.system.map.Condition;


@Repository
public class YearDemandStatisticsRepositoryImpl extends BaseRepositoryImpl<YearDemandStatistics> implements YearDemandStatisticsRepository{

	@Autowired
	private UserBizDataAuthzService userBizDataAuthzService;
	
	@Override
	public Map<String, Object> loadAllGrid(Condition condition) {	
		String sql = "select pj.name project_name,pj.px_person_classify_name,yd.year year_demand_year,yd.title year_demand_title,t.id, " +
				" t.project_id, t.year_demand_id," +
				" t.month1, t.month2, t.month3, t.month4, t.month5, t.month6," +
				" t.month7, t.month8, t.month9, t.month10, t.month11, t.month12," +
				" t.create_user_id, t.create_user_name, t.create_time, t.update_time, t.company_id, t.company_name" +
				" from px_year_demand_statistics t" +
				" left join px_year_demand yd on yd.id = t.year_demand_id" +
				" left join px_project pj on pj.id = t.project_id " +
				" where 1=1";
//		Condition condition = this.getCondition(request,"year","yearDemandId","projectName","companyName",
//				"createUserName","startCreateTime","endCreateTime");
		
		if (condition.containsKey("year")) {
			sql += " and yd.year like ?";
			condition.put("year","%"+condition.get("year")+"%");
		}
		if (condition.containsKey("yearDemandId")) {
			sql += " and yd.id = ?";
		}
		if (condition.containsKey("projectName")) {
			sql += " and pj.name like ?";
			condition.put("projectName","%"+condition.get("projectName")+"%");
		}
		if (condition.containsKey("companyName")) {
			sql += " and t.company_name like ?";
			condition.put("companyName","%"+condition.get("companyName")+"%");
		}
		if (condition.containsKey("createUserName")) {
			sql += " and t.create_user_name like ?";
			condition.put("createUserName","%"+condition.get("createUserName")+"%");
		}
		if (condition.containsKey("startCreateTime")) {
			sql += " and t.create_time >= to_date( ?, 'yyyy-mm-dd hh24:mi:ss')";
		}
		if (condition.containsKey("endCreateTime")) {
			sql += " and t.create_time -1 < to_date( ?,'yyyy-mm-dd hh24:mi:ss')";
		}
		
		CurrentUser user = condition.getCurrentUser();
		sql = userBizDataAuthzService.buildUserBizDataAuthzUserSql(sql, "t.create_user_id", user);
		
		sql += " order by t.update_time desc";
		return gridService.loadData(condition.getGridTransModel(), sql, condition.valueArray());
	}
	
	@Override
	public List<Map<String, Object>> loadAllList(Condition condition) {
		CurrentUser user = condition.getCurrentUser();
		String sql = "select pjc.id class_id,pjc.name,pj.id,pj.name project_name,pj.px_person_classify_name," +
				" yds.id choice,yds.id demand_write_id," +
				" yds.month1,yds.month2,yds.month3,yds.month4,yds.month5,yds.month6," +
				" yds.month7,yds.month8,yds.month9,yds.month10,yds.month11,yds.month12" +
				" from px_project_classify pjc" +
				" left join px_project pj on pj.project_classify_id = pjc.id and pj.is_delete='N'" +
				" left join px_year_demand_statistics yds on yds.company_id = ? " +
				" and yds.year_demand_id = ? and yds.project_id = pj.id" +
				" where pjc.is_delete = 'N'" +
				" order by pj.name";
		return jdbcAssistant.query(sql, new Object[]{ user.getCompanyId(),condition.get("yearDemandId")});
	}
	
	@Override
	public Map<String, Object> load(String id) {	
		String sql = "select t.* from PX_YEAR_DEMAND_STATISTICS t where t.id = ? ";
		return jdbcAssistant.queryOne(sql, new Object[]{id});
	}
	
	/**
	 * 重写父类get方法
	 */
	@Override
	public YearDemandStatistics get(Serializable id) {		
		return super.get(id);
	}
	
	/**
	 * 重写父类save方法
	 */
	@Override
	public Serializable save(YearDemandStatistics entity) {	
		return super.save(entity);
	}
	
	/**
	 * 重写父类update方法
	 */
	@Override
	public void update(YearDemandStatistics entity) {		
		super.update(entity);
	}
	
	/**
	 * 重写父类deleteById方法
	 */
	@Override
	public void deleteById(Serializable id) {		
		super.deleteById(id);
	}
	
	/**
	 * 重写父类deleteByIds方法
	 */
	@Override
	public void deleteByIds(String... ids) {		
		super.deleteByIds(ids);
	}

	@Override
	public int deleteByyearDemandIdAndCompanyId(String companyId,
			String yearDemandId) {
		String sql = "delete px_year_demand_statistics where company_id = ? and year_demand_id = ? ";
		return jdbcAssistant.update(sql, new Object[]{ companyId, yearDemandId});
		
	}

	@Override
	public boolean hasRecord(Condition condition) {
		CurrentUser user = condition.getCurrentUser();
		String companyId = user.getCompanyId();
		String sql = "select t.id from px_year_demand_statistics t where t.year_demand_id = ? and t.company_id = ?";
		Map<String, Object> obj = jdbcAssistant.queryOne(sql, new Object[]{condition.get("yearDemandId"),companyId});
		return obj==null?false:true;
	}
	
}
